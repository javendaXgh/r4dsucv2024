{
  "hash": "2c474de59ee24a6f1009c17c665d962d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Ciencia de Datos para Economistas\"\nsubtitle: \"Clase 26- rowwise\"\ndate: \"17, february 2025\"\nauthor: \"MSc. José M. Avendaño\"\nformat:\n  revealjs:\n    incremental: true  \n---\n\n\n\n## Objetivo\n\n-   Conocer cómo realizar operaciones fila a fila al mismo tiempo.\n\n-   Realizar conexiones de lectura y escritura a bases de datos.\n\n## Ciclo 1\n\n### rowwise\n\n![](images/cd_ciclo_2.png)\n\n## Ciclo 2\n\n### DB´s\n\n![](images/cd_ciclo_1.png)\n\n## **Cuando usar `rowwise()`**\n\n-   **Operaciones complejas por fila:** realizar cálculos o transformaciones específicas para cada fila, como aplicar una función personalizada o acceder a múltiples columnas dentro de la misma fila.\n\n-   **Funciones que dependen de múltiples columnas:** Si la operación requiere información de varias columnas en la misma fila.\n\n## rowwise - ejemplo 1\n\nEjemplo 1: Calcular el promedio de una columna basado en otro valor de la misma fila\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\ndf_1 <- data.frame(\n  x = c(1, 2, 3),\n  y = c(4, 5, 6))\n\n\ndf_1 %>% \n  mutate(promedio_xy = mean(c(x, y)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  x y promedio_xy\n1 1 4         3.5\n2 2 5         3.5\n3 3 6         3.5\n```\n\n\n:::\n:::\n\n\n\n## rowwise - ejemplo 1 -cont.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_1 %>% \n  rowwise() %>% \n  mutate(promedio_xy = mean(c(x, y)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n# Rowwise: \n      x     y promedio_xy\n  <dbl> <dbl>       <dbl>\n1     1     4         2.5\n2     2     5         3.5\n3     3     6         4.5\n```\n\n\n:::\n:::\n\n\n\n## rowwise - ejemplo 2\n\nEjemplo 2: calcular ratio por fila\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Crear un tibble\ndatos <- tribble(\n  ~id, ~valor1, ~valor2,\n  \"A\", 10, 5,\n  \"B\", 40, 3,\n  \"C\", 9, 7\n)\n\ndatos\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  id    valor1 valor2\n  <chr>  <dbl>  <dbl>\n1 A         10      5\n2 B         40      3\n3 C          9      7\n```\n\n\n:::\n:::\n\n\n\n## rowwise - ejemplo 2- cont.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Crear una función \nmi_funcion <- function(x, y) {\n  sum(x, y)*mean(c(x,y))\n}\nmi_funcion(5,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 32\n```\n\n\n:::\n:::\n\n\n\n## rowwise - ejemplo 2- cont.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sin rowwise aplicar la función personalizada\ndatos %>%\n  mutate(resultado = mi_funcion(valor1, valor2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  id    valor1 valor2 resultado\n  <chr>  <dbl>  <dbl>     <dbl>\n1 A         10      5      913.\n2 B         40      3      913.\n3 C          9      7      913.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Usar rowwise para aplicar la función\ndatos %>%\n  rowwise() %>%\n  mutate(resultado = mi_funcion(valor1, valor2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n# Rowwise: \n  id    valor1 valor2 resultado\n  <chr>  <dbl>  <dbl>     <dbl>\n1 A         10      5      112.\n2 B         40      3      924.\n3 C          9      7      128 \n```\n\n\n:::\n:::\n\n\n\n## **Cuando no usar `rowwise()`**\n\n-   **Operaciones vectorizadas:** Si la operación se puede realizar de manera más eficiente usando funciones vectorizadas de dplyr o base R, ya que estas son generalmente más rápidas y sencillas.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}