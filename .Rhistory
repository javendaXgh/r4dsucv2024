file.copy('style/fonts/atkinson-hyperlegible-v11-latin-regular.woff2',
'_site/site_libs/revealjs/dist/theme/')
file.copy('style/fonts/atkinson-hyperlegible-v11-latin-regular.woff2',
'_site/site_libs/revealjs/dist/theme/')
file.copy('style/fonts/atkinson-hyperlegible-v11-latin-regular.woff2',
'_site/site_libs/revealjs/dist/theme/')
file.copy('style/fonts/atkinson-hyperlegible-v11-latin-regular.woff2',
'_site/site_libs/revealjs/dist/theme/')
file.copy('style/fonts/atkinson-hyperlegible-v11-latin-regular.woff2',
'_site/site_libs/revealjs/dist/theme/')
?rnorm
?rmarkdown
??rmarkdown
??ggplot2
mode(1)
mode('c')
?
c
?rdata
??rdata
?rmd
??rmd
c(i1)
i1
iL
L1
3L
file.copy('style/fonts/atkinson-hyperlegible-v11-latin-regular.woff2',
'_site/site_libs/revealjs/dist/theme/')
file.copy('style/fonts/atkinson-hyperlegible-v11-latin-regular.woff2',
'_site/site_libs/revealjs/dist/theme/')
c(5!)
5!
c(NULL)
c(NULL, NULL)
c(Inf, 1)
?Inf
c(NULL, NULL)
shiny::runApp('testApp')
library(rvest)
library(dplyr)
read_html('https://www.lavanguardia.com/cultura/20241101/10069133/the-cure-brillan-melancolia-desgarro-songs-of-lost-world.html')%>%
html_nodes('p')%>%
html_text()
library(usethis) ##
git_sitrep()
usethis::git_vaccinate()
usethis::edit_r_environ()
gitcreds::gitcreds_set()
git_sitrep()
install.packages("usethis")
install.packages("usethis")
git_sitrep()
# función con dos argumentos
lanzamiento <- function (cdad_dados,
nombre_jugador){
resultado <- sample (1:6,cdad_dados, replace = TRUE )
paste(nombre_jugador, 'obtuvo el siguiente resultado',
resultado)
}
#La siguiente llamada a la función generará error ya que no contiente
# dentro el valor del segundo argumento que es el nombre del jugador
# lanzamiento(cdad_dados= 4)
lanzamiento(nombre_jugador= 'Braian',
cdad_dados= 2)
# la siguiente ejecución generará un problema al no nombrar los
# argumentos y en orden posicional, pasar "Braian" como el primer
# argumento, que en la función que declaramos como "lanzamiento"
# corresponde a "cdad_dados", que debe ser de tipo numérico.
# Lo mismo pasaría con el segundo argumento que estamos pasando que en este caso es 5,
# pero no lo estamos referenciando con el nombre del argumento en la
# función, que corresponde en la segunda posición al de nombre_jugador
#lanzamiento( 'Braian',
#             5)
lanzamiento(2,'Jose')
# para revisar documentación de la función paste ejecutar
# ?paste
# función con dos argumentos
lanzamiento <- function (cdad_dados,
nombre_jugador){
resultado <- sample (1:6,cdad_dados, replace = TRUE )
paste(nombre_jugador, 'obtuvo el siguiente resultado',
resultado)
}
#La siguiente llamada a la función generará error ya que no contiente
# dentro el valor del segundo argumento que es el nombre del jugador
# lanzamiento(cdad_dados= 4)
lanzamiento(nombre_jugador= 'Braian',
cdad_dados= 2)
# la siguiente ejecución generará un problema al no nombrar los
# argumentos y en orden posicional, pasar "Braian" como el primer
# argumento, que en la función que declaramos como "lanzamiento"
# corresponde a "cdad_dados", que debe ser de tipo numérico.
# Lo mismo pasaría con el segundo argumento que estamos pasando que en este caso es 5,
# pero no lo estamos referenciando con el nombre del argumento en la
# función, que corresponde en la segunda posición al de nombre_jugador
#lanzamiento( 'Braian',
#             5)
lanzamiento(2,'Jose')
# para revisar documentación de la función paste ejecutar
# ?paste
# ejecutar código y gradualmente descomentar líneas
posibles_salidas_dado <- c(1:6)
# sample(posibles_salidas_dado, 1)
# sample(posibles_salidas_dado, 2)
# sample(posibles_salidas_dado, 3)
# sample(posibles_salidas_dado, 7) # genera error
# sample(posibles_salidas_dado, 7, replace=TRUE)
# primera versión función
lanzamiento <- function(cdad_dados){
sample(1:6,cdad_dados, replace=TRUE)
}
# arrojar dado según función que crearmos
lanzamiento (cdad_dados=3)
lanzamiento (cdad_dados=6)
# función con dos argumentos
lanzamiento <- function (cdad_dados,
nombre_jugador){
resultado <- sample (1:6,cdad_dados, replace = TRUE )
paste(nombre_jugador, 'obtuvo el siguiente resultado',
resultado)
}
#La siguiente llamada a la función generará error ya que no contiente
# dentro el valor del segundo argumento que es el nombre del jugador
# lanzamiento(cdad_dados= 4)
lanzamiento(nombre_jugador= 'Braian',
cdad_dados= 2)
# la siguiente ejecución generará un problema al no nombrar los
# argumentos y en orden posicional, pasar "Braian" como el primer
# argumento, que en la función que declaramos como "lanzamiento"
# corresponde a "cdad_dados", que debe ser de tipo numérico.
# Lo mismo pasaría con el segundo argumento que estamos pasando que en este caso es 5,
# pero no lo estamos referenciando con el nombre del argumento en la
# función, que corresponde en la segunda posición al de nombre_jugador
#lanzamiento( 'Braian',
#             5)
lanzamiento(2,'Jose')
nombre_paises <- c('togo','japon','irlanda')
nombre_paises
# vector para registrar variación PIB
var_pib <- c (-1.7, 2.3, -3.1 ) # separador décimal es el punto! ojo
# datos inventados, no obtenidos de la página
var_pib
##########################################################
crecimiento_presente <- var_pib >0
crecimiento_presente
# crear un vector de tipo logical donde se determina si cada elemento de var_pib es mayor que cero
# usar la función de R que se llama data_frame
df_pib_paises <- data.frame(pais= nombre_paises,
delta_PIB= var_pib,
crecimiento= crecimiento_presente)
# esta función de nombre data.frame, puede tomar tantos argumentos como sean necesarios, siendo cada argumento el nombre que se le dará a cada columna (o atributo) seguido de un signo igual y posteriormente los datos que conformarán cada columna, por ejemplo: pais= nombre_paises
# Al crear la data frame, se colocaran tantos argumentos, como columnas se quieran tener, y como en toda función, serán separados por una coma "," la indicación del argumento.
df_pib_paises # mostrar la Data Frame Creada
# recordar que para construir una DF desde distintos vectores necesitamos que cada vector contenta la misma cdad de elementos, en este caso son 3.
#
class (df_pib_paises)
vector_demo <- seq(from= 5, to =35, by=3)
vector_demo
vector_demo [3]
vector_demo [[3]]
month.name # el objeto month.name viene precargado en R
letters # el objeto letters viene precargado en R
lista_demo <- list(meses= month.name, letras= letters, numeros= 1:12)
lista_demo # verificamos contenido de la lista
lista_demo[1]
# ir descomentando línea a línea para evaluar los resultados
# lista_demo$meses
# lista_demo[[1]]
lista_demo$meses == lista_demo[[1]]
# ir descomentando línea a línea para evaluar los resultados
lista_demo[[1]][3]
#lista_demo$meses[3]
?vector
library(rvest)
library(dplyr)
read_html('https://www.bbc.com/mundo/articles/c4gzrnpy504o')%>%
html_nodes('p')%>%
html_text()%>%
paste(collapse = '. ')
browseVignettes(dplyr)
browseVignettes('dplyr')
View(mtcars)
?? dplyr
help(stringr)
help('stringr')
View(mtcars)
View(mtcars)
?mtcars
library(dplyr)
shiny::runApp('~/R/sistema_info/sistema_info')
table (mtcars)
table(cars)
table(mtcars$mpg)
mtcars$mpg
table(mtcars$mpg)
which(mtcars$mpg[mtcars$mpg == 16.2  ])
which (mtcars$mpg[mtcars$mpg == 16.2  ])
which (mtcars$mpg == 16.2  )
?which
mtcars$mpg == 16.2
which (mtcars$mpg == 19.2  )
which(mtcars$mpg==21 | mtcars$mpg==22.8)
?mtcars
?dplyr
??dplyr
file.copy('style/fonts/atkinson-hyperlegible-v11-latin-regular.woff2',
'_site/site_libs/revealjs/dist/theme/')
2!<3
library(webr)
install.packages('webr')
library(dplyr)
library(webr)
df_ahorro <- datasets::LifeCycleSavings
names(df_ahorro)
View(head(df_ahorro))
str(df_ahorro)
summary(df_ahorro)
?LifeCycleSavings
df_ahorro$edad_promedio <- mean(df_ahorro$pop15, df_ahorro$pop75)
sum(df_ahorro$pop15, df_ahorro$pop75)
mean(df_ahorro$pop15, df_ahorro$pop75)
summary(df_ahorro)
?mean
sapply(df_ahorro$pop15, mean,df_ahorro$pop75 )
colMeans(df_ahorro$pop15, mean,df_ahorro$pop75 )
colMeans(df_ahorro$pop15,df_ahorro$pop75 )
rbind(df_ahorro$pop15,df_ahorro$pop75 )
colMeans(rbind(df_ahorro$pop15,df_ahorro$pop75 ))
df_ahorro%>%
mutate(promedio=mean(pop15,pop75))
library(dplyr)
df_ahorro%>%
mutate(promedio=mean(pop15,pop75))
df_ahorro%>%
mutate(promedio=colMeans(pop15,pop75))
df_ahorro%>%
mutate(promedio=rowMeans(pop15,pop75))
df_ahorro%>%
rowwise()%>%
mutate(promedio=mean(pop15,pop75))
df_ahorro%>%
# rowwise()%>%
mutate(promedio=mean(pop15, pop75))
df_ahorro%>%
# rowwise()%>%
mutate(promedio=mean(c(pop15, pop75)))
mean(c(df_ahorro$pop15, df_ahorro$pop75))
df_ahorro%>%
rowwise()%>%
mutate(promedio=rowmean(c(pop15, pop75)))
df_ahorro%>%
rowwise()%>%
mutate(promedio=mean(c(pop15, pop75)))
df_ahorro%>%
rowwise()%>%
mutate(promedio=mean(c(pop15, pop75)))
(29.4+2.87)/2
sapply(c(df_ahorro$pop15,df_ahorro$pop75), mean)
!TRUE
!c(TRUE, FALSE,FALSE)
c(5,8,2)+1
2+'1'
as.character(8)
library(readxl)
p <- read_xls('https://github.com/javendaXgh/datos/raw/refs/heads/master/globalterrorismdb_0919dist.xlsx')
