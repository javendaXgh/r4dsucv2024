{
  "hash": "9bbab85186743968fb6282b9861063d7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Ciencia de Datos para Economistas\"\nsubtitle: \"Clase 8- Inspeccionar Data Frames\"\ndate: \"Noviembre 11, 2024\"\n# output:\n#   html_document:\n#     toc: yes\nfilters:\n  - webr\nengine: knitr\nformat: \n  revealjs:\n    incremental: true   \n# execute: \n#   echo: true\n  # eval: false\n---\n\n\n\n## Varios y Puntos Pendientes\n\n::: notes\nintervenciones en clase 13-11 sobre la visualizaciones que se hagan con ggplot2 que viene de tarea clase 5. Cambio de fecha del 11-11 al 13-11\n\nModificación tarea clase 5 ggplot\n\nTareas clase 7 (entrega 13 y 18) y clase 8 (20-11)\n\nClase 6 práctica 1 construccion vectores\n:::\n\n## Objetivo\n\n-   Presentar operadores lógicos y trabajar con ellos\n\n-   Acceder a elementos de vectores y DF's según condiciones lógicas\n\n-   Inspeccionar valores, rangos y estructura de una DF\n\n## Tabla de Contingencia\n\nCantidad cilindros por observación\n\n\n\n::: {.cell}\n\n```{.webr .cell-code}\n\nmtcars$cyl\n```\n:::\n\n\n\nConteo de frecuencia de un dato categórico\n\n```{webr-r}\n\ntable(mtcars$cyl)\n```\n\n## Tabla de Contingencia Cruzada\n\nMúltiples categorías\n\n|       |                                     |\n|:------|:------------------------------------|\n| `cyl` | Number of cylinders                 |\n| `vs`  | Engine (0 = V-shaped, 1 = straight) |\n\n```{webr-r}\ntable(mtcars$cyl, mtcars$vs)\n```\n\n## Tabla Resumen Estadístico\n\nRepresentar los valores mínimo y máximo, primer y tercer cuartil, media, promedio de un vector o data frame.\n\n```{webr-r}\nsummary(mtcars$mpg)\n```\n\n## Tabla Resumen Estadístico - cont\n\nLa salida de función `summary` cambia según el objeto que estemos trabajando\n\n```{webr-r}\nsummary(mtcars)\n```\n\n## Operadores Lógicos\n\n-   $>$ (mayor a)\n-   $>=$ (mayor o igual a)\n-   $<$ (menor a)\n-   $<=$ (menor o igual a)\n-   $==$ (igual a)\n-   $!=$ (distinto a)\n-   & (y)\n-   $|$ (o)\n\n## Uso de Operadores Lógicos en un Vector\n\nVector seleccionado \"millas por galón\" `mpg`\n\n```{webr-r}\nmtcars$mpg\n```\n\n## Vector Lógico con valores que Cumplen una Condición\n\nMayor que un valor dado\n\n```{webr-r}\n  mtcars$mpg>19.20\n```\n\n## Vector Lógico con valores que Cumplen una Condición -cont.\n\n<br> Mayor que el valor que retorna una función\n\n```{webr-r}\nmtcars$mpg>mean(mtcars$mpg)\n```\n\n## Asignación valores a variables\n\n-   variable con promedio\n\n-   creación df\n\n-   evaluar valores que cumplen ambas condiciones\n\n```{webr-r}\npromedio_mpg <- mean(mtcars$mpg)\nvalor_3ercuartil <- 33.90 \n\ndf_mpg <- data.frame(mpg= mtcars$mpg,\n                     may_mean= mtcars$mpg>promedio_mpg,\n                     men_3cuar= mtcars$mpg<valor_3ercuartil )\n\n\n```\n\nReforzar con lectura propuesta en Tarea Clase 8 sobre \"[Tabla de Verdad](https://es.wikipedia.org/wiki/Tabla_de_verdad)\".\n\n## Inspección DF que Cumple Condiciones\n\n```{webr-r}\ndf_mpg\n```\n\n## Forma vectorizada:\n\nSe aplica el condicional lógico sobre el elemento *i* del vector analizado teniendo de resultado un vector del mismo `length` del vector de entrada.\n\nPor ejemplo, si *i* vale 3, se compara si 22.8 es mayor que el `promedio_mpg` **y** si es menor que `valor_3ercuartil`\n\n```{webr-r}\nmtcars$mpg>promedio_mpg & mtcars$mpg<valor_3ercuartil \n```\n\n## Múltiples Condiciones\n\nOperador `&` (y)\n\n```{webr-r}\nmtcars$mpg[mtcars$mpg>promedio_mpg & mtcars$mpg<valor_3ercuartil ]\n```\n\n<br> Operador `==` doble igualdad (👀 es distinto a asignación)\n\n```{webr-r}\n which (mtcars$mpg == 19.2  )\n```\n\n`which` indica el índice de los elementos extraídos según una condición\n\n## Múltiples Condiciones - cont\n\n```{webr-r}\nmtcars[ mtcars$mpg==21, ]\n```\n\n<br> Operador `!=` diferente\n\n```{webr-r}\nmtcars[mtcars$mpg!=21,c(1,4:6)]\n```\n\n## Múltiples Condiciones - cont 2\n\n<br> Operador `|` or (o)\n\n```{webr-r}\nmtcars[which(mtcars$mpg==21 | mtcars$mpg==22.8),1:3]\n```\n\n## Data Frame a Trabajar\n\n```{webr-r}\n# View(datasets::LifeCycleSavings)\n```\n\n```         \nSobre el contenido de la df: según la hipótesis del ahorro a lo largo del ciclo vital desarrollada por Franco Modigliani, el coeficiente de ahorro (ahorro personal agregado dividido por la renta disponible) se explica por la renta disponible per cápita, la tasa porcentual de variación de la renta disponible per cápita y dos variables demográficas: el porcentaje de población menor de 15 años y el porcentaje de población mayor de 75 años. Los datos se promedian a lo largo de la década 1960-1970 para eliminar el ciclo económico u otras fluctuaciones a corto plazo\n```\n\n## Asignar a una variable la DF\n\n```{webr-r}\ndf_ahorro <- datasets::LifeCycleSavings\nhead(df_ahorro, 8)\n```\n\n## Inspección Data Frame\n\nDimensiones\n\n```{webr-r}\ndim(df_ahorro)\n```\n\n<br> Número de columnas\n\n```{webr-r}\nncol(df_ahorro)\n```\n\n## Inspección Data Frame -cont\n\n-   Número de filas\n\n```{webr-r}\nnrow(df_ahorro)\n```\n\n<br> Nombres de las columnas\n\n```{webr-r}\ncolnames(df_ahorro)\n```\n\n## Inspección Data Frame -cont2\n\n<br> Nombres de las filas\n\n```{webr-r}\nrownames(df_ahorro)\n```\n\n## Inspección Data Frame -cont3\n\nEstructura de un objeto\n\n```{webr-r}\nstr(df_ahorro)\n```\n\n## Inspección Data Frame -cont4\n\n<br> Resumen Estadístico\n\n```{webr-r}\nsummary(df_ahorro)\n```\n\n## Crear columna con nombre países\n\nRevisar nombres filas\n\n```{webr-r}\nrownames(df_ahorro)[1:10]\n```\n\n<br> Asignar nueva columa a la DF\n\n```{webr-r}\ndf_ahorro$pais <- rownames(df_ahorro)\n```\n\n## Inspección nuevo atributo\n\nRevisar DF\n\n```{webr-r}\nhead(df_ahorro, 3)\n```\n\n## Funciones Valores Extremos\n\nMínimo en vector\n\n```{webr-r}\nmin(df_ahorro$pop15)\n```\n\n<br> Máximo en vector\n\n```{webr-r}\nmax(df_ahorro$pop15)\n```\n\n## Importar en Formato csv una Data Frame\n\n```{webr-r}\ndf_gapminder <- read.csv('https://raw.githubusercontent.com/javendaXgh/datos/refs/heads/master/gapminder.csv') \n\n```\n\n<br>\n\n```{webr-r}\nhead(df_gapminder,3)\n```\n\n👀: los datos tienen estructura tabular. Observaciones son filas y atributos las columnas\n\n## Estructura Gapminder\n\nEstructura DF\n\n```{webr-r}\nstr(df_gapminder)\n```\n\n## Tabla Sumario Gapminder\n\n```{webr-r}\nsummary(df_gapminder)\n```\n\n::: notes\nTiene estructura tabular\n:::\n\n## Valores Únicos por Atributo\n\nPaíses\n\n```{webr-r}\nunique(df_gapminder$country)\n```\n\n## Valores Únicos por Atributo - cont\n\n<br> Años\n\n```{webr-r}\nunique(df_gapminder$year)\n```\n\n## DPLYR (🏇🏽 de batalla)\n\n```{webr-r}\nlibrary(dplyr)\n```\n\n## DPLYR / Filtrado\n\nFunción `filter`.\n\nEncadenamiento en los procesamientos: operador pipe `%>%`\n\n```{webr-r}\ndf_venezuela <- df_gapminder %>%\n  filter(country=='Venezuela')\n\ndf_venezuela\n```\n\n## Revisar Tabla Venezuela\n\nTabla sumario\n\n```{webr-r}\nsummary(df_venezuela)\n```\n\n## Juntar DF´s\n\n```{webr-r}\ndf_colombia <- df_gapminder %>%\n  filter(country=='Colombia')\n\ndf_colombia\n```\n\n## Combinar DF's\n\nFunción `bind_rows`\n\n```{webr-r}\ndf_gran_colombia <- bind_rows(df_venezuela,\n                              df_colombia )\n```\n\n## Revisar Nueva DF\n\n```{webr-r}\ndf_gran_colombia\n```\n\n## Continuar Inspección...\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}