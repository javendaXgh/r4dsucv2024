mutate(nombre=rownames(mtcars))%>%
remove_rownames()%>%
slice(1:4)%>%
select(nombre, mpg)%>%
mutate(mpg2=mpg+2,
mpg3=mpg-4,
mpg4=mpg+5)%>%
mutate(year=c(2001,2002,2003,2004))
testc
t(testc)
library(data.table)
transpose(testc)
testc
datapasta::df_paste()
data.frame(
stringsAsFactors = FALSE,
HS4.Trade.Value = c("1      Granos de cacao    30630638","2       Pasta de cacao     1354945",
"3 Mantequilla de cocoa     6080098",
"4       Polvo de cacao      512927","5            Chocolate     3739352")
)
datapasta::df_paste()
datapasta::df_paste()
df_2021 <-data.frame(
stringsAsFactors = FALSE,
HS4.Trade.Value = c("1      Granos de cacao    32994386",
"2     Cáscara de cacao        8638",
"3       Pasta de cacao       48523",
"4 Mantequilla de cocoa     5342684",
"5       Polvo de cacao      423555",
"6            Chocolate     3345093")
)
df_2020 <- data.frame(
stringsAsFactors = FALSE,
check.names = FALSE,
`1......Granos.de.cacao....28685276` = c("2       Pasta de cacao      434930",
"3 Mantequilla de cocoa     2164682",
"4       Polvo de cacao      370494",
"5            Chocolate     1530504")
)
df_2020
df_2021 <-data.frame(
stringsAsFactors = FALSE,
HS4.Trade.Value = c("1      Granos de cacao    32994386",
"2     Cáscara de cacao        8638",
"3       Pasta de cacao       48523",
"4 Mantequilla de cocoa     5342684",
"5       Polvo de cacao      423555",
"6            Chocolate     3345093"))
df_2022 <- data.frame(
stringsAsFactors = FALSE,
HS4.Trade.Value = c("1      Granos de cacao    30630638","2       Pasta de cacao     1354945",
"3 Mantequilla de cocoa     6080098",
"4       Polvo de cacao      512927","5            Chocolate     3739352"))%>%
select(-1)
df_2021 <-data.frame(
stringsAsFactors = FALSE,
HS4.Trade.Value = c("1      Granos de cacao    32994386",
"2     Cáscara de cacao        8638",
"3       Pasta de cacao       48523",
"4 Mantequilla de cocoa     5342684",
"5       Polvo de cacao      423555",
"6            Chocolate     3345093"))%>%
select(-1)
df_2020 <- data.frame(
stringsAsFactors = FALSE,
check.names = FALSE,
`1......Granos.de.cacao....28685276` = c("2       Pasta de cacao      434930",
"3 Mantequilla de cocoa     2164682",
"4       Polvo de cacao      370494",
"5            Chocolate     1530504"))%>%
select(-1)
df_2022 <- data.frame(
stringsAsFactors = FALSE,
HS4.Trade.Value = c("1      Granos de cacao    30630638","2       Pasta de cacao     1354945",
"3 Mantequilla de cocoa     6080098",
"4       Polvo de cacao      512927","5            Chocolate     3739352"))%>%
select(-1)%>%
mutate(year=2022)
df_2021 <-data.frame(
stringsAsFactors = FALSE,
HS4.Trade.Value = c("1      Granos de cacao    32994386",
"2     Cáscara de cacao        8638",
"3       Pasta de cacao       48523",
"4 Mantequilla de cocoa     5342684",
"5       Polvo de cacao      423555",
"6            Chocolate     3345093"))%>%
select(-1)%>%
mutate(year=2021)
df_2020 <- data.frame(
stringsAsFactors = FALSE,
check.names = FALSE,
`1......Granos.de.cacao....28685276` = c("2       Pasta de cacao      434930",
"3 Mantequilla de cocoa     2164682",
"4       Polvo de cacao      370494",
"5            Chocolate     1530504"))%>%
select(-1)%>%
mutate(year=2020)
bind_rows(df_2022,
df_2021,
df_2020)
df_2022
data.frame(
stringsAsFactors = FALSE,
HS4.Trade.Value = c("1      Granos de cacao    30630638","2       Pasta de cacao     1354945",
"3 Mantequilla de cocoa     6080098",
"4       Polvo de cacao      512927","5            Chocolate     3739352"))%>%
select(-1)
data.frame(
stringsAsFactors = FALSE,
HS4.Trade.Value = c("1      Granos de cacao    30630638","2       Pasta de cacao     1354945",
"3 Mantequilla de cocoa     6080098",
"4       Polvo de cacao      512927","5            Chocolate     3739352"))
data.frame(
stringsAsFactors = FALSE,
HS4.Trade.Value = c("1,      Granos de cacao,    30630638",
"2,       Pasta de cacao,     1354945",
"3, Mantequilla de cocoa,     6080098",
"4,       Polvo de cacao,      512927",
"5,           Chocolate,     3739352"))
##########################################################################################
######## Limpiar ambiente de trabajo                                               #######
##########################################################################################
rm(list= ls())
##########################################################################################
######## Cargar librerías                                                          #######
##########################################################################################
library(tidyverse)
library(tidyverse)
# gather
stocks <- tibble(
time = as.Date("2009-01-01") + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
gather(stocks, "stock", "price", -time)
stocks%>%
print(n=20)
stocks_wide <- gather(stocks, "stock", "price", -time)
stocks_longer <- gather(stocks, "stock", "price", -time)
stocks_longer%>%
print(n=20)
stocks_longer <- gather(stocks,
"stock",
"price",
-time)
stocks_longer%>%
print(n=20)
stocks %>%
gather("stock", "price", -time)
?gather
stocks %>%
pivot_longer("stock",
"price", -time)
stocks
stocks %>%
gather("stock",
"price",
-time)
stocks
# gather
stocks <- tibble(
fecha = as.Date("2024-01-01") + 0:9,
precio_x = rnorm(10, 0, 1),
precio_y = rnorm(10, 0, 2),
precio_z = rnorm(10, 0, 4)
)
# gather
precio_acciones <- tibble(
fecha = as.Date("2024-01-01") + 0:9,
precio_x = rnorm(10, 0, 1),
precio_y = rnorm(10, 0, 2),
precio_z = rnorm(10, 0, 4)
)
precio_acciones
precio_acciones %>%
gather("stock",
"price",
-time)
precio_acciones %>%
gather("stock",
"price",
-fecha)
precio_acciones %>%
gather("stock",
"precio_accion",
-fecha)
precio_acciones %>%
gather("accion_nombe",
"precio_accion",
-fecha)
?pivot_longer
precio_acciones %>%
pivot_longer(cols = starts_with("precio"),
names_to = "precio_accion",
values_to = "precio_accion")
precio_acciones %>%
pivot_longer(cols = starts_with("precio"),
names_to = "accion_nombe",
values_to = "precio_accion")
relig_income
relig_income %>%
pivot_longer(cols =!religion,
names_to = "income",
values_to = "count")
billboard
billboard %>%
pivot_longer(
cols = starts_with("wk"),
names_to = "week",
names_prefix = "wk",
values_to = "rank",
values_drop_na = TRUE
)
unique(billboard$artist)
billboard
billboard %>%
pivot_longer(
cols = starts_with("wk"),
names_to = "week",
names_prefix = "wk",
values_to = "rank",
values_drop_na = TRUE
)
billboard %>%
pivot_longer(
cols = starts_with("wk"),
names_to = "week",
# names_prefix = "wk",
values_to = "rank",
values_drop_na = TRUE
)
who
names(who)
?who
who %>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = c("diagnosis", "gender", "age"),
names_pattern = "new_?(.*)_(.)(.*)",
values_to = "count"
)
who %>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = c("diagnosis", "gender", "age"),
names_pattern = "new_?(.*)_(.)(.*)",
values_to = "count"
)
str_split("new_sp_m2534","new_?(.*)_(.)(.*)")
who%>%
select(new_sp_m2534)
who%>%
select(new_sp_m2534)%>%
filter(!is.na(new_sp_m2534))
who%>%
select(new_sp_m2534)%>%
filter(!is.na(new_sp_m2534))%>%
extract("new_?(.*)_(.)(.*)")
who%>%
select(new_sp_m2534)%>%
filter(!is.na(new_sp_m2534))%>%
extract(new_sp_m2534,"new_?(.*)_(.)(.*)")
who%>%
select(new_sp_m2534)%>%
filter(!is.na(new_sp_m2534))%>%
separate(new_sp_m2534,"new_?(.*)_(.)(.*)")
who%>%
select(new_sp_m2534)%>%
filter(!is.na(new_sp_m2534))%>%
separate(new_sp_m2534, "new_?(.*)_(.)(.*)")
who%>%
select(new_sp_m2534)%>%
filter(!is.na(new_sp_m2534))%>%
separate(new_sp_m2534, sep="new_?(.*)_(.)(.*)")
who%>%
select(new_sp_m2534)%>%
filter(!is.na(new_sp_m2534))%>%
separate(new_sp_m2534,
into=c('a','b','c')%>%
sep="new_?(.*)_(.)(.*)")
who%>%
select(new_sp_m2534)%>%
filter(!is.na(new_sp_m2534))%>%
separate(new_sp_m2534,
into=c('a','b','c'),
sep="new_?(.*)_(.)(.*)")
str_split("new_sp_m2534","new_?(.*)_(.)(.*)")
who %>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = c("diagnosis", "gender", "age"),
names_pattern = "new_?(.*)_(.)(.*)",
values_to = "count"
)
cadena <- "new_user_123"
patron <- "new_?(.*)_(.)(.*)"
str_match(cadena, patron)
precio_acciones
?gather
##########################################################################################
######## Cargar conjuntos de datos                                                 #######
##########################################################################################
df_gapminder_csv <- read.csv('https://raw.githubusercontent.com/javendaXgh/datos/refs/heads/master/gapminder.csv')%>%
select(-X)%>%
as_tibble()
df_gastosaludmundial <- read.csv('https://raw.githubusercontent.com/UCVeconomia2024-2/scripts/refs/heads/main/data_in/clase_12/IHME/IHME_HEALTH_SPENDING_1995_2021/IHME_HEALTH_SPENDING_1995_2021_Y2024M07D23.CSV')
##########################################################################################
######## Procesamientos. Cada enunciado es un problema a resolver                  #######
##########################################################################################
#1. Global Health Data Exchange. Revisar contenido pre EDA (Exploratory Data Analysis)
dim(df_gastosaludmundial)
names(df_gastosaludmundial)
summary(df_gastosaludmundial[,1:10])
str(df_gastosaludmundial[,1:10])
unique(df_gastosaludmundial$location_name)
#2. obtener listado de países de América según gapminder
df_paises_america <- df_gapminder_csv%>%
filter(continent=='Americas')%>%
select(country, lifeExp)%>%
distinct(country) #.keep_all
dim(df_paises_america)
str(df_paises_america)
df_paises_america
dim(df_paises_america)
str(df_paises_america)
df_paises_america
#2. obtener listado de países de América según gapminder
df_paises_america <- df_gapminder_csv%>%
filter(continent=='Americas')%>%
select(country, lifeExp)%>%
distinct(country, .keep_all=TRUE) #.keep_all
dim(df_paises_america)
str(df_paises_america)
df_paises_america
#3. crear df con valores duplicados uniendo dos df's
df_paises_america2 <- bind_rows(df_paises_america,
df_paises_america%>%
sample_n(30))
##########################################################################################
######## Limpiar ambiente de trabajo                                               #######
##########################################################################################
rm(list= ls())
##########################################################################################
######## Cargar librerías                                                          #######
##########################################################################################
library(tidyverse)
##########################################################################################
######## Cargar conjuntos de datos                                                 #######
##########################################################################################
df_gapminder_csv <- read.csv('https://raw.githubusercontent.com/javendaXgh/datos/refs/heads/master/gapminder.csv')%>%
select(-X)%>%
as_tibble()
df_gastosaludmundial <- read.csv('https://raw.githubusercontent.com/UCVeconomia2024-2/scripts/refs/heads/main/data_in/clase_12/IHME/IHME_HEALTH_SPENDING_1995_2021/IHME_HEALTH_SPENDING_1995_2021_Y2024M07D23.CSV')
##########################################################################################
######## Procesamientos. Cada enunciado es un problema a resolver                  #######
##########################################################################################
#1. Global Health Data Exchange. Revisar contenido pre EDA (Exploratory Data Analysis)
dim(df_gastosaludmundial)
names(df_gastosaludmundial)
summary(df_gastosaludmundial[,1:10])
str(df_gastosaludmundial[,1:10])
unique(df_gastosaludmundial$location_name)
#2. obtener listado de países de América según gapminder
df_paises_america <- df_gapminder_csv%>%
filter(continent=='Americas')
#3. crear df con valores duplicados uniendo dos df's
df_paises_america2 <- bind_rows(df_paises_america,
df_paises_america%>%
sample_n(30))
#4. remover filas duplicadas
df_paises_america_limpio <- df_paises_america2%>%
filter(continent=='Americas')%>%
select(country, lifeExp)#%>%
distinct(country) #.keep_all=TRUE
dim(df_paises_america_limpio)
str(df_paises_america_limpio)
df_paises_america_limpio
distinct(country, .keep_all=TRUE) #.keep_all=TRUE
#4. remover filas duplicadas
df_paises_america_limpio <- df_paises_america2%>%
filter(continent=='Americas')%>%
select(country, lifeExp)%>%
distinct(country, .keep_all=TRUE) #.keep_all=TRUE
dim(df_paises_america_limpio)
df_paises_america_limpio
#3. crear df con valores duplicados uniendo dos df's
df_paises_america2 <- bind_rows(df_paises_america,
df_paises_america%>%
sample_n(30))
#4. remover filas duplicadas
df_paises_america_limpio <- df_paises_america2%>%
filter(continent=='Americas')%>%
select(country, lifeExp)%>%
distinct(country, lifeExp, .keep_all=TRUE) #.keep_all=TRUE
dim(df_paises_america_limpio)
#3. crear df con valores duplicados uniendo dos df's
df_paises_america2 <- bind_rows(df_paises_america,
df_paises_america%>%
sample_n(30))
#3. crear df con valores duplicados uniendo dos df's
df_paises_america2 <- bind_rows(df_paises_america,
df_paises_america%>%
sample_n(30))
#4. remover filas duplicadas
df_paises_america_limpio <- df_paises_america2%>%
filter(continent=='Americas')%>%
select(country, lifeExp)%>%
distinct(country, lifeExp) #.keep_all=TRUE
dim(df_paises_america_limpio)
str(df_paises_america_limpio)
#3. crear df con valores duplicados uniendo dos df's
df_paises_america2 <- bind_rows(df_paises_america,
df_paises_america%>%
sample_n(30))
dim(df_paises_america2)
dim(df_paises_america)
dim(df_paises_america2)
#3. crear df con valores duplicados uniendo dos df's
df_paises_america2 <- bind_rows(df_paises_america,
df_paises_america%>%
sample_n(30))
dim(df_paises_america)
dim(df_paises_america2) #presencia de valores duplicados
#4. remover filas duplicadas
df_paises_america_limpio <- df_paises_america2%>%
filter(continent=='Americas')%>%
# select(country, lifeExp)%>%
distinct(country, lifeExp) #.keep_all=TRUE
dim(df_paises_america_limpio)
str(df_paises_america_limpio)
df_paises_america_limpio
#4. remover filas duplicadas
df_paises_america_limpio <- df_paises_america2%>%
filter(continent=='Americas')%>%
# select(country, lifeExp)%>%
distinct(country, lifeExp, , .keep_all=TRUE) #, .keep_all=TRUE
dim(df_paises_america_limpio)
str(df_paises_america_limpio)
df_paises_america_limpio
#3. crear df con valores duplicados uniendo dos df's
df_paises_america2 <- bind_rows(df_paises_america,
df_paises_america%>%
sample_n(30))%>%
arrange(country, year)
dim(df_paises_america)
dim(df_paises_america2) #presencia de valores duplicados
df_paises_america_limpio
#3. crear df con valores duplicados uniendo dos df's
df_paises_america2 <- bind_rows(df_paises_america,
df_paises_america%>%
sample_n(30))%>%
arrange(country, year)
dim(df_paises_america)
dim(df_paises_america2) #presencia de valores duplicados
#4. remover filas duplicadas
df_paises_america_limpio <- df_paises_america2%>%
filter(continent=='Americas')%>%
distinct(country, lifeExp) #, .keep_all=TRUE
df_paises_america2%>%
print(n=30)
#5. obtener listado de países de América según gapminder
paises_america <- df_gapminder_csv%>%
filter(continent=='Americas')%>%
select(country)%>%
distinct(country)%>% #.keep_all
pull(country)
#6. seleccionar sólo las columnas asociadas a valores promedios
df_gsm_mean <- df_gastosaludmundial%>%
filter(location_name %in% paises_america)%>%
select(location_name,year, ends_with('mean'))
names(df_gsm_mean)
unique(df_gsm_mean$location_name)
dim(df_gsm_mean)
string_paises <- paste0(paises_america,collapse = '|')
dim(df_gastosaludmundial)
#6. seleccionar sólo las columnas asociadas a valores promedios
df_gsm_mean <- df_gastosaludmundial%>%
filter(location_name %in% paises_america)%>%
select(location_name,year, ends_with('mean'))
names(df_gsm_mean)
unique(df_gsm_mean$location_name)
dim(df_gsm_mean)
string_paises <- paste0(paises_america,collapse = '|')
unique(df_gsm_mean$location_name)
paises_america
#faltantes
paises1 <- df_gastosaludmundial%>%
filter(location_name %in% paises_america)%>%
distinct(location_name)%>%
pull(location_name)
paises1
paises2
paises2 <- df_gastosaludmundial%>%
filter(str_detect(location_name, string_paises))%>%
distinct(location_name)%>%
pull(location_name)
paises2
paises2[paises2 %in% paises1]
paises2[!paises2 %in% paises1]
df_gapminder <- gapminder
##########################################################################################
######## Cargar librerías                                                          #######
##########################################################################################
library(tidyverse)
df_gapminder <- gapminder
library(gapminder)
df_gapminder <- gapminder
nombres <- I(c("Juan", "Ana", "Pedro"))
nombres
?I
