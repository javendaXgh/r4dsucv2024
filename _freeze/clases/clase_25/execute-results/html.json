{
  "hash": "537aa70d1ed41dfdc0ed5291a0369ec9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Ciencia de Datos para Economistas\"\nsubtitle: \"Clase 25- Joins\"\ndate: \"10, february 2025\"\nauthor: \"MSc. José M. Avendaño\"\nformat:\n  revealjs:\n    incremental: true  \n---\n\n\n\n## Objetivo\n\nConocer distintos métodos para juntar data frames por elementos coincidentes en al menos un atributo.\n\n## Ciclo\n\n![](images/cd_ciclo_2.png){fig-align=\"center\"}\n\n## Introducción a los Joins\n\nLos **joins** son operaciones fundamentales en el manejo de datos que permiten combinar dos o más data frames basados en una o más columnas comunes. En R, puedes utilizar la función `dplyr::join()` para realizar diferentes tipos de joins.\n\n## Tipos de Joins\n\n1.  **Inner Join**: Devuelve solo las filas que tienen coincidencias en ambos data frames.\n2.  **Left Join**: Devuelve todas las filas del primer data frame y las filas coincidentes del segundo data frame. Si no hay coincidencia, se rellenan con `NA`.\n\n## Tipos de Joins- cont.\n\n3.  **Right Join**: Devuelve todas las filas del segundo data frame y las filas coincidentes del primer data frame. Si no hay coincidencia, se rellenan con `NA`.\n4.  **Full Join**: Devuelve todas las filas de ambos data frames. Si no hay coincidencia, se rellenan con `NA`.\n\n## Explicación Visual\n\n![](images/sql_joins.jpg){fig-align=\"center\"}\n\n## Ejemplos Prácticos -Crear DF 1\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cargar la librería dplyr \nlibrary(dplyr)\n\n# Data frame de países con su población\n\ndf_paises <- data.frame ( pais = c(\"España\", \"Francia\", \n                                   \"Alemania\", \"Italia\"), \n                          poblacion = c(47.3, 65.2, 83.1, 60.4) )\n\ndf_paises\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      pais poblacion\n1   España      47.3\n2  Francia      65.2\n3 Alemania      83.1\n4   Italia      60.4\n```\n\n\n:::\n\n```{.r .cell-code}\n# Mostrar los data frames\n```\n:::\n\n\n\n## Crear DF 2\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Data frame de países con su PIB per cápita\n\ndf_economia <- data.frame( pais = c(\"España\", \"Alemania\",\n                                    \"Italia\", \"Portugal\"),\n                           pib_per_capita = c(29500, 37800, 31600, 24000) )\n\ndf_economia\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      pais pib_per_capita\n1   España          29500\n2 Alemania          37800\n3   Italia          31600\n4 Portugal          24000\n```\n\n\n:::\n:::\n\n\n\n## Inner Join\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Realizar un inner join\ninner_join(df_paises, \n           df_economia,\n           by = \"pais\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      pais poblacion pib_per_capita\n1   España      47.3          29500\n2 Alemania      83.1          37800\n3   Italia      60.4          31600\n```\n\n\n:::\n:::\n\n\n\n**Explicación** : Este join devuelve solo las filas que tienen coincidencias en ambos data frames. En este caso, los países \"España\", \"Alemania\" e \"Italia\".\n\n## Left Join\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Realizar un left join\nleft_join(df_paises, \n          df_economia,\n          by = \"pais\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      pais poblacion pib_per_capita\n1   España      47.3          29500\n2  Francia      65.2             NA\n3 Alemania      83.1          37800\n4   Italia      60.4          31600\n```\n\n\n:::\n:::\n\n\n\n**Explicación**: Este join devuelve todas las filas del primer data frame (df_paises) y las filas coincidentes del segundo data frame (df_economia). Si no hay coincidencia, se rellenan con NA. En este caso, el país \"Francia\" no tiene una correspondencia en el segundo data frame.\n\n## Right Join\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Realizar un right join\nright_join(df_paises, \n           df_economia, \n           by = \"pais\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      pais poblacion pib_per_capita\n1   España      47.3          29500\n2 Alemania      83.1          37800\n3   Italia      60.4          31600\n4 Portugal        NA          24000\n```\n\n\n:::\n:::\n\n\n\n**Explicación** : Este join devuelve todas las filas del segundo data frame (df_economia) y las filas coincidentes del primer data frame (df_paises). Si no hay coincidencia, se rellenan con NA. En este caso, el país \"Portugal\" no tiene una correspondencia en el primer data frame.\n\n## Full Join\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfull_join(df_paises, \n          df_economia, \n          by = c('pais'))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      pais poblacion pib_per_capita\n1   España      47.3          29500\n2  Francia      65.2             NA\n3 Alemania      83.1          37800\n4   Italia      60.4          31600\n5 Portugal        NA          24000\n```\n\n\n:::\n:::\n\n\n\n**Explicación** : Este join devuelve todas las filas de ambos data frames. Si no hay coincidencia, se rellenan con **`NA`**. En este caso, los países \"Francia\" y \"Portugal\" no tienen una correspondencia en el otro data frame.\n\n## Nombre Clave No coincidente\n\n### Cambiar df_economia\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_economia2 <- data.frame( Pais = c(\"España\", \"Alemania\",\n                                    \"Italia\", \"Portugal\"),\n                           pib_per_capita = c(29500, 37800, 31600, 24000) )\n```\n:::\n\n\n\n## Aplicar `by`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(df_paises,\n          df_economia2,\n          by = c('pais'= 'Pais'))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      pais poblacion pib_per_capita\n1   España      47.3          29500\n2  Francia      65.2             NA\n3 Alemania      83.1          37800\n4   Italia      60.4          31600\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}