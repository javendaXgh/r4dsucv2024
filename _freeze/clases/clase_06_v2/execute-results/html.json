{
  "hash": "01e148b8202b2651f82c687456eb7a37",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Ciencia de Datos para Economistas\"\nsubtitle: \"Clase 6- Construir Funciones y Data Frames\"\n#format: live-html\ndate: \"Noviembre 4, 2024\"\nformat: \n  revealjs:\n    incremental: true   \n---\n\n\n\n## Construir Funciones:\n\n### Representación de un 🎲\n\n-   ¿Cómo lo hacemos?\n\n-   Ayuda LLM\n\n    -   Funciones disponibles\n\n    -   Sintaxis\n\n## Función 🎲\n\n¿Qué debe hacer la función? ¿Qué debe representar?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ejecutar código y gradualmente descomentar líneas\nposibles_salidas_dado <- c(1:6)\n# sample(posibles_salidas_dado, 1)\n# sample(posibles_salidas_dado, 2)\n# sample(posibles_salidas_dado, 3)\n# sample(posibles_salidas_dado, 7) # genera error\n# sample(posibles_salidas_dado, 7, replace=TRUE)\n```\n:::\n\n\n\n¡Juguemos!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# primera versión función\n\nlanzamiento <- function(cdad_dados){\n  sample(1:6,cdad_dados, replace=TRUE)\n}\n\n# arrojar dado según función que crearmos\nlanzamiento (cdad_dados=3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4 6 6\n```\n\n\n:::\n\n```{.r .cell-code}\nlanzamiento (cdad_dados=6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 4 4 3 2 5\n```\n\n\n:::\n:::\n\n\n\n## Función 🎲🎲....🎲\n\n### - ¿Entrada? =\\> Argumentos\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# función con dos argumentos\nlanzamiento <- function (cdad_dados,\n                         nombre_jugador){\n  resultado <- sample (1:6,cdad_dados, replace = TRUE )\n  \n  paste(nombre_jugador, 'obtuvo el siguiente resultado',\n        resultado)\n}\n\n#La siguiente llamada a la función generará error ya que no contiente\n# dentro el valor del segundo argumento que es el nombre del jugador\n\n# lanzamiento(cdad_dados= 4)\n\nlanzamiento(nombre_jugador= 'Braian',\n            cdad_dados= 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Braian obtuvo el siguiente resultado 2\" \"Braian obtuvo el siguiente resultado 3\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# la siguiente ejecución generará un problema al no nombrar los\n# argumentos y en orden posicional, pasar \"Braian\" como el primer\n# argumento, que en la función que declaramos como \"lanzamiento\"\n# corresponde a \"cdad_dados\", que debe ser de tipo numérico. \n\n# Lo mismo pasaría con el segundo argumento que estamos pasando que en este caso es 5,\n# pero no lo estamos referenciando con el nombre del argumento en la \n# función, que corresponde en la segunda posición al de nombre_jugador\n\n#lanzamiento( 'Braian',\n#             5)\n\nlanzamiento(2,'Jose')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Jose obtuvo el siguiente resultado 5\" \"Jose obtuvo el siguiente resultado 6\"\n```\n\n\n:::\n:::\n\n\n\nPara entender mejor la construcción de las funciones les recomiendo la lectura de esta sección del libro Hands On Promgramming With R <https://rstudio-education.github.io/hopr/basics.html#sample-with-replacement> que va muy similar a lo que revisamos en clase en cuanto al ejemplo del 🎲.\n\nPara revisar documentación de la función `paste` ejecutar `?paste` en la consola.\n\n## Principios Nombres Funciones\n\n1.  **Descripción Clara** : El nombre debe claramente indicar qué hace la función. Evita nombres genéricos como **`funcion`** o **`proceso`**.\n\n2.  **Consistencia y Coherencia** : Mantén un estilo de nomenclatura consistente dentro del proyecto o grupo para facilitar la lectura y comprensión del código.\n\n## Principios Nombres Funciones - cont.\n\n1.  **Usa Minúsculas y Guiones Bajos** : Comienza el nombre con una letra minúscula y utiliza guiones bajos (**`_`**) para separar palabras. Esto hace que los nombres sean más fáciles de leer y evitar conflictos con palabras reservadas.\n\n2.  Resto de normas para nombrar objetos y variables\n\n## Construir Data Frame (DF)\n\ndatos [World Bank](https://data.worldbank.org/indicator/NY.GDP.MKTP.KD.ZG)\n\ncharacter/ nombres países\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnombre_paises <- c('togo','japon','irlanda')\nnombre_paises\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"togo\"    \"japon\"   \"irlanda\"\n```\n\n\n:::\n:::\n\n\n\nnumeric/ PIB año 2023\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# vector para registrar variación PIB\nvar_pib <- c (-1.7, 2.3, -3.1 ) # separador décimal es el punto! ojo\n# datos inventados, no obtenidos de la página\nvar_pib\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -1.7  2.3 -3.1\n```\n\n\n:::\n:::\n\n\n\nlogical\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##########################################################\ncrecimiento_presente <- var_pib >0\ncrecimiento_presente\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE  TRUE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n# crear un vector de tipo logical donde se determina si cada elemento de var_pib es mayor que cero\n```\n:::\n\n\n\n## Construir DF\n\nRecordar la relación de orden que tenemos entre los tres vectores\n\npaises - var_pib - crecimiento_presente\n\nLista con vectores del mismo `length()` . En la consola ejecutar para cada vector la función `length` de la siguiente forma `length(var_pib)` .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# usar la función de R que se llama data_frame\ndf_pib_paises <- data.frame(pais= nombre_paises,\n                            delta_PIB= var_pib,\n                            crecimiento= crecimiento_presente)\n# esta función de nombre data.frame, puede tomar tantos argumentos como sean necesarios, siendo cada argumento el nombre que se le dará a cada columna (o atributo) seguido de un signo igual y posteriormente los datos que conformarán cada columna, por ejemplo: pais= nombre_paises\n\n# Al crear la data frame, se colocaran tantos argumentos, como columnas se quieran tener, y como en toda función, serán separados por una coma \",\" la indicación del argumento.\n\n\ndf_pib_paises # mostrar la Data Frame Creada\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     pais delta_PIB crecimiento\n1    togo      -1.7       FALSE\n2   japon       2.3        TRUE\n3 irlanda      -3.1       FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n# recordar que para construir una DF desde distintos vectores necesitamos que cada vector contenta la misma cdad de elementos, en este caso son 3.\n#\n```\n:::\n\n\n\n## Consultar la clase del objeto creado:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass (df_pib_paises)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n:::\n\n\n\nEn el libro electrónico \"R para Principiantes\" de Juan B. Mendoza, pueden revisar algún complemento sobre las data frames, disponible en <https://bookdown.org/jboscomendoza/r-principiantes4/data-frames.html>\n\n## Acceso Elementos Vectores, Listas y Data Frames\n\nSe disponen de estos operadores para acceder a los elementos que conforman los vectores, listas y Data Frames\n\n| vector | lista     | DF        |\n|--------|-----------|-----------|\n| \\[ \\]  | \\[ \\]     | \\[ \\]     |\n|        | \\[\\[ \\]\\] | \\[\\[ \\]\\] |\n|        | \\$        | \\$        |\n\n## Ejemplos Accesos- Vectores\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvector_demo <- seq(from= 5, to =35, by=3)\nvector_demo\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  5  8 11 14 17 20 23 26 29 32 35\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvector_demo [3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 11\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvector_demo [[3]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 11\n```\n\n\n:::\n:::\n\n\n\nLos dos métodos de acceso, mediante los operadores `[` y `[[` generan el mismo resultado cuando se trabaja con vectores.\n\n## Ejemplos Accesos- Lista\n\nEn el libro \"R para Principiantes\" de Juan B. Mendoza , en el acceso <https://bookdown.org/jboscomendoza/r-principiantes4/listas.html> , pueden obtener información adicional sobre qué son las listas\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmonth.name # el objeto month.name viene precargado en R\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"January\"   \"February\"  \"March\"     \"April\"     \"May\"       \"June\"      \"July\"     \n [8] \"August\"    \"September\" \"October\"   \"November\"  \"December\" \n```\n\n\n:::\n\n```{.r .cell-code}\nletters # el objeto letters viene precargado en R\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"t\" \"u\"\n[22] \"v\" \"w\" \"x\" \"y\" \"z\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlista_demo <- list(meses= month.name, letras= letters, numeros= 1:12)\nlista_demo # verificamos contenido de la lista\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$meses\n [1] \"January\"   \"February\"  \"March\"     \"April\"     \"May\"       \"June\"      \"July\"     \n [8] \"August\"    \"September\" \"October\"   \"November\"  \"December\" \n\n$letras\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"t\" \"u\"\n[22] \"v\" \"w\" \"x\" \"y\" \"z\"\n\n$numeros\n [1]  1  2  3  4  5  6  7  8  9 10 11 12\n```\n\n\n:::\n:::\n\n\n\n### Métodos de acceso \\[ \\], \\$ y \\[\\[ \\]\\]\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlista_demo[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$meses\n [1] \"January\"   \"February\"  \"March\"     \"April\"     \"May\"       \"June\"      \"July\"     \n [8] \"August\"    \"September\" \"October\"   \"November\"  \"December\" \n```\n\n\n:::\n\n```{.r .cell-code}\n# ir descomentando línea a línea para evaluar los resultados\n# lista_demo$meses \n# lista_demo[[1]]\n```\n:::\n\n\n\n## Comparación Elementos\n\nSe hace una comparación de tipo lógico, entre la igualdad de cada uno de los elementos que arroja `lista_demo$meses` con los elementos que arroja `lista_demo[[1]]`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlista_demo$meses == lista_demo[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n```\n\n\n:::\n:::\n\n\n\nSe puede ver, uno a uno, que todos los elementos que arroja cada uno de los métodos de acceso, son iguales puesto que aparecen todos los valores como `TRUE`\n\n## Ejemplos Accesos- Lista/\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ir descomentando línea a línea para evaluar los resultados\nlista_demo[[1]][3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"March\"\n```\n\n\n:::\n\n```{.r .cell-code}\n#lista_demo$meses[3]\n```\n:::\n\n\n\n## Pendiente por Revisar en próxima Clase\n\nLas dos clases pasadas (5 y 6) ha quedado pendiente abordar estos dos temas:\n\n-   Consultar Vignettes y Cheat Sheets\n\n-   Acceso a elementos de df (filas, columnas o valor determinado)\n\n## Vídeo de Interés\n\nLa próxima semana empezamos a trabajar con el libro R4DS de Hadley Wickham y el segundo capítulo versa sobre la visualización de los datos, así que el siguiente vídeo puede resultar de interés <https://www.youtube.com/watch?v=jbkSRLYSojo>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}