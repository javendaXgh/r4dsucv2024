{
  "hash": "7d566b1f5c64e4665383d87a3c0445b0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Ciencia de Datos para Economistas\"\nsubtitle: \"Clase 11- Trabajando con Data Frames-columnas\"\ndate: \"Noviembre 20, 2024\"\nauthor: \"MSc. Jos√© M. Avenda√±o\"\n# output:\n#   html_document:\n#     toc: yes\nformat: \n  revealjs:\n    incremental: true   \n---\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n## Objetivo\n\nRealizar manipulaciones a los datos contenidos en una DF seg√∫n diversos criterios, en particular en operaciones que afectan a las columnas o atributos.\n\n![](images/im-or-trans.png)\n\n## Operaciones en Columnas\n\nA diferencia de las operaciones que revisamos en la Clase 10 donde aplicamos ciertas funciones para actuar sobre las filas, en esta oportunidad vamos a actuar sobre las columnas con una serie de funciones.\n\nRevisar presentaci√≥n e igualmente el qmd disponible en <https://github.com/javendaXgh/r4dsucv2024/blob/main/clases/clase_11.qmd>\n\n## Selecci√≥n de Columnas\n\nSe revisar√°n distintos m√©todos para seleccionar o deseleccionar columas de una data frame.\n\n## Select\n\nSelecciona columnas de una DF\n\n1.  Por nombre de las columnas:\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df_gapminder%>%\n      select(country, year, lifeExp)%>%\n      slice(1)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 1 √ó 3\n      country      year lifeExp\n      <fct>       <int>   <dbl>\n    1 Afghanistan  1952    28.8\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n2.  Por √≠ndice de la columna\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df_gapminder%>%\n      select(1, 3, 4)%>%\n      slice(1)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 1 √ó 3\n      country      year lifeExp\n      <fct>       <int>   <dbl>\n    1 Afghanistan  1952    28.8\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n## select(-)\n\nUso de operador sustracci√≥n para no selecci√≥n\n\n1.  Por nombre\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df_gapminder%>%\n      select(-continent, -gdpPercap, -continent, -pop )%>%\n      slice(1)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 1 √ó 3\n      country      year lifeExp\n      <fct>       <int>   <dbl>\n    1 Afghanistan  1952    28.8\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n2.  Por √≠ndice\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df_gapminder%>%\n      select(-c(2,5,6))%>%\n      slice(1)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 1 √ó 3\n      country      year lifeExp\n      <fct>       <int>   <dbl>\n    1 Afghanistan  1952    28.8\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n## select(!)\n\nDeseleccionar usando el operador de negaci√≥n `!`\n\n1.  Por nombre\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df_gapminder%>%\n      select(!c(continent, gdpPercap, pop))%>%\n      slice(1)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 1 √ó 3\n      country      year lifeExp\n      <fct>       <int>   <dbl>\n    1 Afghanistan  1952    28.8\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n2.  Por √≠ndice\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df_gapminder%>%\n      select(!c(2,5,6))%>%\n      slice(1)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 1 √ó 3\n      country      year lifeExp\n      <fct>       <int>   <dbl>\n    1 Afghanistan  1952    28.8\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n## Rename\n\nCambiar el nombre de una columna. Primero se coloca el nombre nuevo y luego el operador de igualdad y posteriormente el nombre que tiene actualmente la columna\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_gapminder%>%\n  rename(anno=year, pais= country)%>%\n  select(anno, pais)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,704 √ó 2\n    anno pais       \n   <int> <fct>      \n 1  1952 Afghanistan\n 2  1957 Afghanistan\n 3  1962 Afghanistan\n 4  1967 Afghanistan\n 5  1972 Afghanistan\n 6  1977 Afghanistan\n 7  1982 Afghanistan\n 8  1987 Afghanistan\n 9  1992 Afghanistan\n10  1997 Afghanistan\n# ‚Ñπ 1,694 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Mutate\n\nCrear una nueva columna en una DF, en este caso una columna que calcula el PIB\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_gapminder_pib <- df_gapminder%>%\n  mutate(pib= gdpPercap* pop)%>%\n  select(country, year, pib)\n\nhead(df_gapminder_pib, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 √ó 3\n  country      year         pib\n  <fct>       <int>       <dbl>\n1 Afghanistan  1952 6567086330.\n2 Afghanistan  1957 7585448670.\n3 Afghanistan  1962 8758855797.\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Mutate /ifelse\n\nLa funci√≥n `ifelse` funciona vectorizadamente, es decir, se aplica sobre cada valor de una determinada fila de la data frame y su objetivo es evaluar si una determinada condici√≥n que es establecida se cumple o no, para un determinado valor.\n\nLa condici√≥n evaluada solo puede arrojar un valor verdadero (TRUE) o uno falso (FALSE). Si arroja un verdadero ocurrir√° un suceso A y en caso de no cumplirse ocurrir√° un suceso B.\n\n## Mutate /ifelse -cont.\n\nLa sint√°xis es `ifelse(condici√≥n a evaluar, ocurre A, ocurre b)` , por ejemplo:\n\n`a <- 4`\n\n`b <- 7`\n\n`ifelse (a>b, \"es mayor\", \"es menor\")`\n\ndando de resultado la ejecuci√≥n anterior \"es menor\" ya que al evaluar si 4 es mayor que 7, el resultado es `FALSE` y por lo tanto se ir√° al suceso B que es arrojar el valor \"es menor\".\n\n## Mutate /ifelse- ejemplo- Planteamiento Problema\n\nVamos a estudiar cu√°les pa√≠ses tienen un PIB por encima del promedio de los PIB¬¥s para el a√±o 2007. A los pa√≠ses que est√©n por encima les vamos a asignar una categor√≠a que se llamar√° \"pib_up_mean\" y a los que est√©n por debajo otra que se llame \"pib_down_mean\".\n\nPrimero creamos la DF con los valores que vamos a evaluar\n\n## Mutate /ifelse- ejemplo- crear DF\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_pib_2007 <- df_gapminder %>%\n  filter(year==2007)%>%\n  mutate(pib= gdpPercap* pop)%>%\n  select(country, pib)\n\nhead(df_pib_2007, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 √ó 2\n  country              pib\n  <fct>              <dbl>\n1 Afghanistan 31079291949.\n2 Albania     21376411360.\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Mutate / ifelse - ejemplo - pasos intermedios\n\nEn caso de que los PIBs se presenten con notaci√≥n exponencial o cient√≠fica se hace el siguiente *setting*\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(scipen=999)\n```\n:::\n\n\n\n\n\n\nIgualmente vamos a evaluar cu√°l es el promedio del PIB y lo asignamos a la variable `pib_promedio`\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npib_promedio =mean(df_pib_2007$pib)\npib_promedio\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 409220666999\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Mutate / ifelse - ejemplo- Aplicar\n\nLa columna que vamos a crear se llama \"tipo_pib\"\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_pib_2007 <- df_pib_2007%>%\n  mutate(tipo_pib =ifelse(pib>=pib_promedio, # condici√≥n a evaluar\n                          \"pib_up_mean\", # caso verdadero => ocurre a\n                          \"pib_down_mean\"))  #caso falso => ocurre b\n\ndf_pib_2007%>%\n  sample_n(4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 √ó 3\n  country                 pib tipo_pib     \n  <fct>                 <dbl> <chr>        \n1 Israel        164029908950. pib_down_mean\n2 Mozambique     16433892152. pib_down_mean\n3 Guinea-Bissau    852652874. pib_down_mean\n4 Kuwait        118530454006. pib_down_mean\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Mutate / doble ifelse - problema\n\nAhora vamos a asignar tres categor√≠as seg√∫n el tama√±o del PIB.\n\n| Condici√≥n                             | Categor√≠a a asignar |\n|---------------------------------------|---------------------|\n| pib mayor a tercer cuantil            | 'super_pib'         |\n| pib entre 1 er cuantil y 3 er cuantil | 'medio_pib'         |\n| pib por debajo de 1 er cuantil        | 'bajo_pib'          |\n\n## Mutate /doble ifelse - pasos intermedios\n\nObtener cuantiles.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncuantiles_pib <- quantile(df_pib_2007$pib)\n\ncuantiles_pib\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            0%            25%            50%            75%           100% \n     319014077    17438491194    57869055458   275959963297 12934458535085 \n```\n\n\n:::\n\n```{.r .cell-code}\n#fijar variables\ntercer_cuantil <- cuantiles_pib[4]\nprimer_cuantil <- cuantiles_pib[2]\n```\n:::\n\n\n\n\n\n\n## Nota:\n\nNayuha, de forma apropiada investig√≥ cu√°l funci√≥n se usa para obtener estos valores `quantile` y c√≥mo se pueden asignar a una variable, dado que la salida que genera la funci√≥n `summary` no es maleable para extraer datos individuales como los valores asociados a un cuantil u otro.\n\n### üôåüèº\n\n## Mutate /doble ifelse - ejemplo 2- Aplicar\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_pib_2007 <- df_pib_2007%>%\n  arrange(desc(pib))%>%\n  mutate(tipo_pib2 =ifelse(pib<= primer_cuantil, # condici√≥n a evaluar\n                          \"bajo_pib\",# caso verdadero => ocurre a\n                          ifelse(pib>= tercer_cuantil, # caso falso => ocurre b y lleva a una 2da eval\n                                 'super_pib', # caso verdadero => ocurre b-a\n                                 'medio_pib') # caso falso => ocurre b-b\n                          )\n         )\n\nhead(df_pib_2007,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 √ó 4\n  country           pib tipo_pib    tipo_pib2\n  <fct>           <dbl> <chr>       <chr>    \n1 United States 1.29e13 pib_up_mean super_pib\n2 China         6.54e12 pib_up_mean super_pib\n3 Japan         4.04e12 pib_up_mean super_pib\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Tablas Sumarios e Histograma\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(df_pib_2007$tipo_pib)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\npib_down_mean   pib_up_mean \n          117            25 \n```\n\n\n:::\n\n```{.r .cell-code}\ntable(df_pib_2007$tipo_pib2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n bajo_pib medio_pib super_pib \n       36        70        36 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Histograma\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist (df_pib_2007$pib/1000000,\n      col = 4,\n      breaks=20,\n      main = \"Histograma PIB Pa√≠ses\", \n      xlab = \"Valor PIB\", \n      ylab = \"Frecuencia\")\n```\n\n::: {.cell-output-display}\n![](clase_11_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n## Explorar Pa√≠ses con mayor PIB\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df_pib_2007,10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 √ó 4\n   country            pib tipo_pib    tipo_pib2\n   <fct>            <dbl> <chr>       <chr>    \n 1 United States  1.29e13 pib_up_mean super_pib\n 2 China          6.54e12 pib_up_mean super_pib\n 3 Japan          4.04e12 pib_up_mean super_pib\n 4 India          2.72e12 pib_up_mean super_pib\n 5 Germany        2.65e12 pib_up_mean super_pib\n 6 United Kingdom 2.02e12 pib_up_mean super_pib\n 7 France         1.86e12 pib_up_mean super_pib\n 8 Brazil         1.72e12 pib_up_mean super_pib\n 9 Italy          1.66e12 pib_up_mean super_pib\n10 Mexico         1.30e12 pib_up_mean super_pib\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Explorar Pa√≠ses con menor PIB\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_pib_2007%>%\n  slice_tail(n=10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 √ó 4\n   country                          pib tipo_pib      tipo_pib2\n   <fct>                          <dbl> <chr>         <chr>    \n 1 Burundi                  3608510288. pib_down_mean bajo_pib \n 2 Lesotho                  3158513357. pib_down_mean bajo_pib \n 3 Eritrea                  3146934084. pib_down_mean bajo_pib \n 4 Central African Republic 3084613079. pib_down_mean bajo_pib \n 5 Liberia                  1323912407. pib_down_mean bajo_pib \n 6 Gambia                   1270911775. pib_down_mean bajo_pib \n 7 Djibouti                 1033689705. pib_down_mean bajo_pib \n 8 Guinea-Bissau             852652874. pib_down_mean bajo_pib \n 9 Comoros                   701111696. pib_down_mean bajo_pib \n10 Sao Tome and Principe     319014077. pib_down_mean bajo_pib \n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Explorar Pa√≠ses con medio PIB\n\nMuestra aleatoria\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_pib_2007%>%\n  filter(tipo_pib2== 'medio_pib')%>%\n  sample_n(8)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 √ó 4\n  country               pib tipo_pib      tipo_pib2\n  <fct>               <dbl> <chr>         <chr>    \n1 Bahrain      21112675360. pib_down_mean medio_pib\n2 Iraq        122952583891. pib_down_mean medio_pib\n3 Botswana     20603633702. pib_down_mean medio_pib\n4 Sudan       110062906753. pib_down_mean medio_pib\n5 Ireland     167141167138. pib_down_mean medio_pib\n6 Libya        72790086208. pib_down_mean medio_pib\n7 Morocco     128958323770. pib_down_mean medio_pib\n8 Afghanistan  31079291949. pib_down_mean medio_pib\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Asignaci√≥n a un Nuevo Objeto\n\nTodas las operaciones realizadas anteriormente, tiene sentido asignarlas a un nuevo objeto, ya que se est√° modificando la estructura de los datos de entrada con los que estamos trabando. P.ej:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_gap_pib <- df_gapminder%>%\n  mutate(pib= gdpPercap* pop) %>%\n  rename(pais= country, anno=year) %>%\n  select(pais, anno, pib)\n\nhead(df_gap_pib, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 √ó 3\n  pais         anno         pib\n  <fct>       <int>       <dbl>\n1 Afghanistan  1952 6567086330.\n2 Afghanistan  1957 7585448670.\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Lecturas Recomendadas:\n\n-   Cap√≠tulo 4 R4DS (temas pasados referente a variables y operaciones b√°sicas)\n\n-   Cap√≠tulo 5 R4DS: comparaciones, operadores l√≥gicos, arrange, select, mutate, summarise, pipe operator. En el cap√≠tulo se tratan los valores faltantes `NA` que luego ser√°n abordados\n",
    "supporting": [
      "clase_11_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}