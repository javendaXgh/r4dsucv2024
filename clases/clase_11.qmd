---
title: "Ciencia de Datos para Economistas"
subtitle: "Clase 11- Trabajando con Data Frames-columnas"
date: "Noviembre 20, 2024"
author: "MSc. Jos칠 M. Avenda침o"
# output:
#   html_document:
#     toc: yes
format: 
  revealjs:
    incremental: true   
---

```{r}
#| echo: false

# instalar paquete gapminder sino se tiene instalado, descomentar l칤nea
# install.packages('gapmider')

# cargar librer칤as
library(tidyverse)
library(gapminder)

# la df de gapminder viene precargada en el paquete gapminder. Por eso no la vamos a importar con read_xlsx
df_gapminder <- gapminder

```

## Objetivo

Realizar manipulaciones a los datos contenidos en una DF seg칰n diversos criterios, en particular en operaciones que afectan a las columnas o atributos.

![](images/im-or-trans.png)

## Operaciones en Columnas

A diferencia de las operaciones que revisamos en la Clase 10 donde aplicamos ciertas funciones para actuar sobre las filas, en esta oportunidad vamos a actuar sobre las columnas con una serie de funciones.

Revisar presentaci칩n e igualmente el qmd disponible en <https://github.com/javendaXgh/r4dsucv2024/blob/main/clases/clase_11.qmd>

## Selecci칩n de Columnas

Se revisar치n distintos m칠todos para seleccionar o deseleccionar columas de una data frame.

## Select

Selecciona columnas de una DF

1.  Por nombre de las columnas:

    ```{r}
    df_gapminder%>%
      select(country, year, lifeExp)%>%
      slice(1)
    ```

2.  Por 칤ndice de la columna

    ```{r}
    df_gapminder%>%
      select(1, 3, 4)%>%
      slice(1)
    ```

## select(-)

Uso de operador sustracci칩n para no selecci칩n

1.  Por nombre

    ```{r}
    df_gapminder%>%
      select(-continent, -gdpPercap, -continent, -pop )%>%
      slice(1)

    ```

2.  Por 칤ndice

    ```{r}
    df_gapminder%>%
      select(-c(2,5,6))%>%
      slice(1)
    ```

## select(!)

Deseleccionar usando el operador de negaci칩n `!`

1.  Por nombre

    ```{r}
    df_gapminder%>%
      select(!c(continent, gdpPercap, pop))%>%
      slice(1)
    ```

2.  Por 칤ndice

    ```{r}
    df_gapminder%>%
      select(!c(2,5,6))%>%
      slice(1)

    ```

## Rename

Cambiar el nombre de una columna. Primero se coloca el nombre nuevo y luego el operador de igualdad y posteriormente el nombre que tiene actualmente la columna

```{r}
df_gapminder%>%
  rename(anno=year, pais= country)%>%
  select(anno, pais)
```

## Mutate

Crear una nueva columna en una DF, en este caso una columna que calcula el PIB

```{r}
df_gapminder_pib <- df_gapminder%>%
  mutate(pib= gdpPercap* pop)%>%
  select(country, year, pib)

head(df_gapminder_pib, 3)
```

## Mutate /ifelse

La funci칩n `ifelse` funciona vectorizadamente, es decir, se aplica sobre cada valor de una determinada fila de la data frame y su objetivo es evaluar si una determinada condici칩n que es establecida se cumple o no, para un determinado valor.

La condici칩n evaluada solo puede arrojar un valor verdadero (TRUE) o uno falso (FALSE). Si arroja un verdadero ocurrir치 un suceso A y en caso de no cumplirse ocurrir치 un suceso B.

## Mutate /ifelse -cont.

La sint치xis es `ifelse(condici칩n a evaluar, ocurre A, ocurre b)` , por ejemplo:

`a <- 4`

`b <- 7`

`ifelse (a>b, "es mayor", "es menor")`

dando de resultado la ejecuci칩n anterior "es menor" ya que al evaluar si 4 es mayor que 7, el resultado es `FALSE` y por lo tanto se ir치 al suceso B que es arrojar el valor "es menor".

## Mutate /ifelse- ejemplo- Planteamiento Problema

Vamos a estudiar cu치les pa칤ses tienen un PIB por encima del promedio de los PIB췂s para el a침o 2007. A los pa칤ses que est칠n por encima les vamos a asignar una categor칤a que se llamar치 "pib_up_mean" y a los que est칠n por debajo otra que se llame "pib_down_mean".

Primero creamos la DF con los valores que vamos a evaluar

## Mutate /ifelse- ejemplo- crear DF

```{r}
df_pib_2007 <- df_gapminder %>%
  filter(year==2007)%>%
  mutate(pib= gdpPercap* pop)%>%
  select(country, pib)

head(df_pib_2007, 2)
```

## Mutate / ifelse - ejemplo - pasos intermedios

En caso de que los PIBs se presenten con notaci칩n exponencial o cient칤fica se hace el siguiente *setting*

```{r}
options(scipen=999)
```

Igualmente vamos a evaluar cu치l es el promedio del PIB y lo asignamos a la variable `pib_promedio`

```{r}
pib_promedio =mean(df_pib_2007$pib)
pib_promedio
```

## Mutate / ifelse - ejemplo- Aplicar

La columna que vamos a crear se llama "tipo_pib"

```{r}
df_pib_2007 <- df_pib_2007%>%
  mutate(tipo_pib =ifelse(pib>=pib_promedio, # condici칩n a evaluar
                          "pib_up_mean", # caso verdadero => ocurre a
                          "pib_down_mean"))  #caso falso => ocurre b

df_pib_2007%>%
  sample_n(4)
```

## Mutate / doble ifelse - problema

Ahora vamos a asignar tres categor칤as seg칰n el tama침o del PIB.

| Condici칩n                             | Categor칤a a asignar |
|---------------------------------------|---------------------|
| pib mayor a tercer cuantil            | 'super_pib'         |
| pib entre 1 er cuantil y 3 er cuantil | 'medio_pib'         |
| pib por debajo de 1 er cuantil        | 'bajo_pib'          |

## Mutate /doble ifelse - pasos intermedios

Obtener cuantiles.

```{r}
cuantiles_pib <- quantile(df_pib_2007$pib)

cuantiles_pib

#fijar variables
tercer_cuantil <- cuantiles_pib[4]
primer_cuantil <- cuantiles_pib[2]
```

## Nota:

Nayuha, de forma apropiada investig칩 cu치l funci칩n se usa para obtener estos valores `quantile` y c칩mo se pueden asignar a una variable, dado que la salida que genera la funci칩n `summary` no es maleable para extraer datos individuales como los valores asociados a un cuantil u otro.

### 游뗿游낖

## Mutate /doble ifelse - ejemplo 2- Aplicar

```{r}
df_pib_2007 <- df_pib_2007%>%
  arrange(desc(pib))%>%
  mutate(tipo_pib2 =ifelse(pib<= primer_cuantil, # condici칩n a evaluar
                          "bajo_pib",# caso verdadero => ocurre a
                          ifelse(pib>= tercer_cuantil, # caso falso => ocurre b y lleva a una 2da eval
                                 'super_pib', # caso verdadero => ocurre b-a
                                 'medio_pib') # caso falso => ocurre b-b
                          )
         )

head(df_pib_2007,3)
```

## Tablas Sumarios e Histograma

```{r}

table(df_pib_2007$tipo_pib)

table(df_pib_2007$tipo_pib2)
```

## Histograma

```{r}
hist (df_pib_2007$pib/1000000,
      col = 4,
      breaks=20,
      main = "Histograma PIB Pa칤ses", 
      xlab = "Valor PIB", 
      ylab = "Frecuencia")
```

## Explorar Pa칤ses con mayor PIB

```{r}
head(df_pib_2007,10)
```

## Explorar Pa칤ses con menor PIB

```{r}
df_pib_2007%>%
  slice_tail(n=10)
  
```

## Exporar Pa칤ses con medio PIB

Muestra aleatoria

```{r}
df_pib_2007%>%
  filter(tipo_pib2== 'medio_pib')%>%
  sample_n(8)
```

## Asignaci칩n a un Nuevo Objeto

Todas las operaciones realizadas anteriormente, tiene sentido asignarlas a un nuevo objeto, ya que se est치 modificando la estructura de los datos de entrada con los que estamos trabando. P.ej:

```{r}
df_gap_pib <- df_gapminder%>%
  mutate(pib= gdpPercap* pop) %>%
  rename(pais= country, anno=year) %>%
  select(pais, anno, pib)

head(df_gap_pib, 2)
```

## Lecturas Recomendadas:

-   Cap칤tulo 4 R4DS (temas pasados referente a variables y operaciones b치sicas)

-   Cap칤tulo 5 R4DS: comparaciones, operadores l칩gicos, arrange, select, mutate, summarise, pipe operator. En el cap칤tulo se tratan los valores faltantes `NA` que luego ser치n abordados
