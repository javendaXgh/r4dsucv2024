{
  "hash": "06046548bb82748e589e9c45daeb229b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Laboratorio 1'\noutput:\n  html_document:\n    toc: yes\n    code_folding: show\n---\n\n\n## Ejercicios Prácticos\n\n### 1. Creación de Archivos con Comentarios\n\n#### Ejercicio 1.1\n\nPara crear un comentario en una línea de código se usa el signo numeral al inicio de la línea. Esto le indica a R que esa línea la debe ignorar a la hora de ejecutar el código.\n\nCrea un archivo de texto llamado \"mi_primer_archivo.R\" con una línea comentada que diga \"Este es mi primer archivo en R\". Verifica en la sección derecha de RStudio, en la tab \"files\", la ruta donde estás guardando el archivo\n\n### 2. Instalación de Paquetes\n\n#### Ejercicio 2.1\n\nInstala los paquetes `dplyr` y `stringr`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# descomentar línea de abajo (quitar numeral)\n\n#install.packages('dplyr')\n#install.packages('stringr')\n```\n:::\n\n\n#### Ejercicio 2.2.\n\nCarga los paquetes instalados\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(stringr)\n```\n:::\n\n\n### 3. Creación de Vectores\n\n**Introducción:**\n\n-   **¿Qué es un vector?** Un vector es una secuencia de elementos del mismo tipo. En R, los vectores pueden contener números, caracteres, valores lógicos, fechas, y más.\n\n-   **¿Cómo crear un vector?** Se utiliza la función `c()` para combinar elementos en un vector.\n\n-   Variables: es similar a una caja con un nombre, donde guardamos información que puede cambiar. En programación, usamos variables para almacenar datos que necesitamos más tarde.\n\n-   Operador de asignación: El operador `<-` es como una flecha que apunta desde el valor hacia la caja, indicando que el valor de la derecha se asigna a la variable de la izquierda.\n\n**Ejemplos Completos:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Vector numérico\nnumeros <- c(1, 2, 3, 4, 5)\n# la variable se llama numeros y su contenido es 1, 2, 3, 4, 5\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Vector de caracteres\ndias_semana <- c(\"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\", \"domingo\")\n\n# la variable se llama dias_semana y su contenido es \"lunes\", \"martes\",....\n# prestar atención a comillas al inicio y final de cada día de la semana\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Vector lógico\nmayores_edad <- c(TRUE, FALSE, TRUE)\n# la variable se llama mayores_edad y tiene asignado los valores TRUE, FALSE,TRUE \n# importante: los valores lógicos no van entre comillas\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# vectores con la fecha\nfechas_nacimiento <- c('2010-01-01', \"2005-06-10\",'1999-10-31')\n\n# prestar atención al uso de comillas simples y dobles\n```\n:::\n\n\n### Llamado a variables creadas\n\nLos chunks anteriores tienen que haber sido ejecutados. Es ideal que los códigos se ejecuten secuencialmente dentro de un *script*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(numeros)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(mayores_edad)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE  TRUE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(dias_semana)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"lunes\"     \"martes\"    \"miércoles\" \"jueves\"    \"viernes\"   \"sábado\"   \n[7] \"domingo\"  \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(fechas_nacimiento)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2010-01-01\" \"2005-06-10\" \"1999-10-31\"\n```\n\n\n:::\n:::\n\n\n### **Ejercicios para corregir:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# descomentar línea de abajo (quitar numeral)\n#numeros_pares <- c(2, 4, 6, , 10)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# descomentar línea de abajo (quitar numeral)\n# mis_frutas <- c(\"manzana', \"banana\", 'uva´)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# descomentar línea de abajo (quitar numeral)\n#mayor_que_cinco < - c(6, 8, 10)\n```\n:::\n\n\n### Ejercicios para realizar en aula:\n\n1.  **Crear un vector numérico:**\n\n    Para añadir un chunk de código se debe presionar el botón verde en la barra de herramientas ![](/images/laboratorios/chunk.png)\n\n    Para cada uno de los ejercicios indicados se debe añadir un chunk distinto repitiendo el procedimiento\n\n    -   Con los números pares del 2 al 10.\n\n    -   Con los números impares del 1 al 9.\n\n2.  **Crear un vector de caracteres:**\n\n    -   Con el nombre de la Facultad y de la Universidad.\n\n    -   Con los nombres de los tres primeros meses del año.\n\n3.  **Crear un vector lógico:**\n\n    -   Indicando si cada número del 1 al 5 es mayor que 3.Indicando si cada letra de la palabra \"banana\" es una \"a\".\n\n4.  **Crear un vector de fechas:**\n\n    -   Del primer día y último día de tres meses de el año que prefieras\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}