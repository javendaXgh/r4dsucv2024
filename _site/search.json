[
  {
    "objectID": "laboratorios/lab-1.html",
    "href": "laboratorios/lab-1.html",
    "title": "Laboratorio 1",
    "section": "",
    "text": "Para crear un comentario en una línea de código se usa el signo numeral al inicio de la línea. Esto le indica a R que esa línea la debe ignorar a la hora de ejecutar el código.\nCrea un archivo de texto llamado “mi_primer_archivo.R” con una línea comentada que diga “Este es mi primer archivo en R”. Verifica en la sección derecha de RStudio, en la tab “files”, la ruta donde estás guardando el archivo\n\n\n\n\n\n\nInstala los paquetes dplyr y stringr.\n\n# descomentar línea de abajo (quitar numeral)\n\n#install.packages('dplyr')\n#install.packages('stringr')\n\n\n\n\nCarga los paquetes instalados\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(stringr)\n\n\n\n\n\nIntroducción:\n\n¿Qué es un vector? Un vector es una secuencia de elementos del mismo tipo. En R, los vectores pueden contener números, caracteres, valores lógicos, fechas, y más.\n¿Cómo crear un vector? Se utiliza la función c() para combinar elementos en un vector.\nVariables: es similar a una caja con un nombre, donde guardamos información que puede cambiar. En programación, usamos variables para almacenar datos que necesitamos más tarde.\nOperador de asignación: El operador &lt;- es como una flecha que apunta desde el valor hacia la caja, indicando que el valor de la derecha se asigna a la variable de la izquierda.\n\nEjemplos Completos:\n\n# Vector numérico\nnumeros &lt;- c(1, 2, 3, 4, 5)\n# la variable se llama numeros y su contenido es 1, 2, 3, 4, 5\n\n\n# Vector de caracteres\ndias_semana &lt;- c(\"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\", \"domingo\")\n\n# la variable se llama dias_semana y su contenido es \"lunes\", \"martes\",....\n# prestar atención a comillas al inicio y final de cada día de la semana\n\n\n# Vector lógico\nmayores_edad &lt;- c(TRUE, FALSE, TRUE)\n# la variable se llama mayores_edad y tiene asignado los valores TRUE, FALSE,TRUE \n# importante: los valores lógicos no van entre comillas\n\n\n# vectores con la fecha\nfechas_nacimiento &lt;- c('2010-01-01', \"2005-06-10\",'1999-10-31')\n\n# prestar atención al uso de comillas simples y dobles\n\n\n\n\nLos chunks anteriores tienen que haber sido ejecutados. Es ideal que los códigos se ejecuten secuencialmente dentro de un script.\n\nprint(numeros)\n\n[1] 1 2 3 4 5\n\n\n\nprint(mayores_edad)\n\n[1]  TRUE FALSE  TRUE\n\n\n\nprint(dias_semana)\n\n[1] \"lunes\"     \"martes\"    \"miércoles\" \"jueves\"    \"viernes\"   \"sábado\"   \n[7] \"domingo\"  \n\n\n\nprint(fechas_nacimiento)\n\n[1] \"2010-01-01\" \"2005-06-10\" \"1999-10-31\"\n\n\n\n\n\n\n# descomentar línea de abajo (quitar numeral)\n#numeros_pares &lt;- c(2, 4, 6, , 10)\n\n\n# descomentar línea de abajo (quitar numeral)\n# mis_frutas &lt;- c(\"manzana', \"banana\", 'uva´)\n\n\n# descomentar línea de abajo (quitar numeral)\n#mayor_que_cinco &lt; - c(6, 8, 10)\n\n\n\n\n\nCrear un vector numérico:\nPara añadir un chunk de código se debe presionar el botón verde en la barra de herramientas \nPara cada uno de los ejercicios indicados se debe añadir un chunk distinto repitiendo el procedimiento\n\nCon los números pares del 2 al 10.\nCon los números impares del 1 al 9.\n\nCrear un vector de caracteres:\n\nCon el nombre de la Facultad y de la Universidad.\nCon los nombres de los tres primeros meses del año.\n\nCrear un vector lógico:\n\nIndicando si cada número del 1 al 5 es mayor que 3.Indicando si cada letra de la palabra “banana” es una “a”.\n\nCrear un vector de fechas:\n\nDel primer día y último día de tres meses de el año que prefieras",
    "crumbs": [
      "Prácticas",
      "Práctica 1"
    ]
  },
  {
    "objectID": "laboratorios/lab-1.html#ejercicios-prácticos",
    "href": "laboratorios/lab-1.html#ejercicios-prácticos",
    "title": "Laboratorio 1",
    "section": "",
    "text": "Para crear un comentario en una línea de código se usa el signo numeral al inicio de la línea. Esto le indica a R que esa línea la debe ignorar a la hora de ejecutar el código.\nCrea un archivo de texto llamado “mi_primer_archivo.R” con una línea comentada que diga “Este es mi primer archivo en R”. Verifica en la sección derecha de RStudio, en la tab “files”, la ruta donde estás guardando el archivo\n\n\n\n\n\n\nInstala los paquetes dplyr y stringr.\n\n# descomentar línea de abajo (quitar numeral)\n\n#install.packages('dplyr')\n#install.packages('stringr')\n\n\n\n\nCarga los paquetes instalados\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(stringr)\n\n\n\n\n\nIntroducción:\n\n¿Qué es un vector? Un vector es una secuencia de elementos del mismo tipo. En R, los vectores pueden contener números, caracteres, valores lógicos, fechas, y más.\n¿Cómo crear un vector? Se utiliza la función c() para combinar elementos en un vector.\nVariables: es similar a una caja con un nombre, donde guardamos información que puede cambiar. En programación, usamos variables para almacenar datos que necesitamos más tarde.\nOperador de asignación: El operador &lt;- es como una flecha que apunta desde el valor hacia la caja, indicando que el valor de la derecha se asigna a la variable de la izquierda.\n\nEjemplos Completos:\n\n# Vector numérico\nnumeros &lt;- c(1, 2, 3, 4, 5)\n# la variable se llama numeros y su contenido es 1, 2, 3, 4, 5\n\n\n# Vector de caracteres\ndias_semana &lt;- c(\"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\", \"domingo\")\n\n# la variable se llama dias_semana y su contenido es \"lunes\", \"martes\",....\n# prestar atención a comillas al inicio y final de cada día de la semana\n\n\n# Vector lógico\nmayores_edad &lt;- c(TRUE, FALSE, TRUE)\n# la variable se llama mayores_edad y tiene asignado los valores TRUE, FALSE,TRUE \n# importante: los valores lógicos no van entre comillas\n\n\n# vectores con la fecha\nfechas_nacimiento &lt;- c('2010-01-01', \"2005-06-10\",'1999-10-31')\n\n# prestar atención al uso de comillas simples y dobles\n\n\n\n\nLos chunks anteriores tienen que haber sido ejecutados. Es ideal que los códigos se ejecuten secuencialmente dentro de un script.\n\nprint(numeros)\n\n[1] 1 2 3 4 5\n\n\n\nprint(mayores_edad)\n\n[1]  TRUE FALSE  TRUE\n\n\n\nprint(dias_semana)\n\n[1] \"lunes\"     \"martes\"    \"miércoles\" \"jueves\"    \"viernes\"   \"sábado\"   \n[7] \"domingo\"  \n\n\n\nprint(fechas_nacimiento)\n\n[1] \"2010-01-01\" \"2005-06-10\" \"1999-10-31\"\n\n\n\n\n\n\n# descomentar línea de abajo (quitar numeral)\n#numeros_pares &lt;- c(2, 4, 6, , 10)\n\n\n# descomentar línea de abajo (quitar numeral)\n# mis_frutas &lt;- c(\"manzana', \"banana\", 'uva´)\n\n\n# descomentar línea de abajo (quitar numeral)\n#mayor_que_cinco &lt; - c(6, 8, 10)\n\n\n\n\n\nCrear un vector numérico:\nPara añadir un chunk de código se debe presionar el botón verde en la barra de herramientas \nPara cada uno de los ejercicios indicados se debe añadir un chunk distinto repitiendo el procedimiento\n\nCon los números pares del 2 al 10.\nCon los números impares del 1 al 9.\n\nCrear un vector de caracteres:\n\nCon el nombre de la Facultad y de la Universidad.\nCon los nombres de los tres primeros meses del año.\n\nCrear un vector lógico:\n\nIndicando si cada número del 1 al 5 es mayor que 3.Indicando si cada letra de la palabra “banana” es una “a”.\n\nCrear un vector de fechas:\n\nDel primer día y último día de tres meses de el año que prefieras",
    "crumbs": [
      "Prácticas",
      "Práctica 1"
    ]
  },
  {
    "objectID": "clases/test.html#r-base",
    "href": "clases/test.html#r-base",
    "title": "test",
    "section": "R base",
    "text": "R base\nCon R base nos referimos a los comandos básicos que vienen incorporados en el R, sin necesidad de cargar librerías."
  },
  {
    "objectID": "clases/test.html#uso-de-la-consola-como-una-calculadora--operaciones-aritméticas",
    "href": "clases/test.html#uso-de-la-consola-como-una-calculadora--operaciones-aritméticas",
    "title": "test",
    "section": "Uso de la consola como una calculadora- operaciones aritméticas",
    "text": "Uso de la consola como una calculadora- operaciones aritméticas\n\nEn la consola podemos hacer calculos tal cual si estuviesemos usando una calculadora\n\n\n5*3+6\n\n[1] 21\n\n5*(3+6)\n\n[1] 45\n\n\ntener presente el uso de los paréntesis y el orden en que serán ejecutadas las operaciones matemáticas"
  },
  {
    "objectID": "clases/test.html#definición-de-objetos",
    "href": "clases/test.html#definición-de-objetos",
    "title": "test",
    "section": "Definición de objetos",
    "text": "Definición de objetos\nLos Objetos/Elementos constituyen la categoría esencial del R. De hecho, todo en R es un objeto, y se almacena con un nombre específico que no debe poseer espacios. Un número, un vector, una función, la progresión de letras del abecedario, una base de datos, un gráfico, constituyen para R objetos de distinto tipo. Los objetos que vamos creando a medida que trabajamos pueden visualizarse en el panel derecho superior de la pantalla (el Environment).\nEl operador &lt;- (Alt + Guión) sirve para definir un objeto. A la izquierda del &lt;- debe ubicarse el nombre que tomará el elemento a crear. Del lado derecho debe ir la definición del mismo.\n\nA &lt;- 1\n\nPor ejemplo, podemos crear el elemento A, cuyo valor será 1. Para esto, debemos correr el código presionando Ctrl + Enter, con el cursor ubicado en cualquier parte de la línea. Al definir un elemento, el mismo queda guardado en el ambiente del programa, y podrá ser utilizado posteriormente para observar su contenido o para realizar una operación con el mismo.\n\nA \n\n[1] 1\n\nA+6\n\n[1] 7\n\n\nAl correr una linea con el nombre del objeto, la consola del programa nos muestra su contenido. Entre corchetes observamos el número de orden del elemento en cuestión. Si corremos una operación, la consola nos muestra el resultado de la misma.\nEl operador = es equivalente a &lt;-, pero en la práctica no se utiliza para la definición de objetos.\n\nB = 2\nB\n\n[1] 2\n\n\n&lt;- es un operador Unidireccional, es decir que:\nA &lt;- B implica que A va tomar como valor el contenido del objeto B, y no al revés.\n\nA &lt;- B\nA      # Ahora A toma el valor de B, y B continúa conservando el mismo valor\n\n[1] 2\n\nB\n\n[1] 2"
  },
  {
    "objectID": "clases/test.html#variables",
    "href": "clases/test.html#variables",
    "title": "test",
    "section": "Variables",
    "text": "Variables\nPueden contener cualquier estructura de datos como una matriz, un valor numérico, un texto, un vector y otras que se verán más adelante. Son creadas mediante el uso del operador de asignación."
  },
  {
    "objectID": "clases/test.html#tipos-de-datos",
    "href": "clases/test.html#tipos-de-datos",
    "title": "test",
    "section": "Tipos de datos",
    "text": "Tipos de datos\nCuando queremos saber con cuál tipo de datos estamos trabajando necesitamos usar la función class()\n\nx &lt;- 2\n\nclass(x)\n\n[1] \"numeric\"\n\n\ntipos de datos - numeric\nSi queremos preguntar lo hacemos con la función is.numeric()\n\nis.numeric(x)\n\n[1] TRUE\n\n\nEn la lámina anterior vimos que el valor que retornó class(x) fue “numeric”.\n\nNúmericos: son aquellos que incluyen números enteros y decimales. En otros lenguajes se les conocen como números de tipo “float” y “double”.\n\n\nx &lt;- 2\n\nclass(x)\n\n[1] \"numeric\"\n\n\ntipos de datos - integer\n\nEnteros: hay casos en los que es necesario trabajar con números enteros sin que contenga ningún decimal. Estos números se declaran con el uso de una L posterior al número.\n\n\ny &lt;- 2L\ny\n\n[1] 2\n\nclass(y)\n\n[1] \"integer\"\n\n\nEjemplo de una operación:\n\nx &lt;- 2.7\nclass(x)\n\n[1] \"numeric\"\n\ny &lt;- 3L\nclass(y)\n\n[1] \"integer\"\n\n\ntipos de datos - lógicos\n\nLógicos: Sirven para representar datos que solo pueden tener uno de estos dos valores\n\nverdadero - TRUE\nfalso - FALSE\n\n\nOperadores lógicos:\n\n\\(&gt;\\) (mayor a-)\n\\(&gt;=\\) (mayor o igual a-)\n\\(&lt;\\) (menor a-)\n\\(&lt;=\\) (menor o igual a-)\n\\(==\\) (igual a-)\n\\(!=\\) (distinto a-)\n\n\n# Redefinimos los valores A y B\nA &lt;- 10\nB &lt;- 20\n\n# Realizamos comparaciones lógicas\nA &gt;  B\n\n[1] FALSE\n\nA &gt;= B\n\n[1] FALSE\n\nA &lt;  B\n\n[1] TRUE\n\nA &lt;= B\n\n[1] TRUE\n\nA == B\n\n[1] FALSE\n\nA != B\n\n[1] TRUE\n\nC &lt;- A != B\nC\n\n[1] TRUE\n\n\nComo muestra el último ejemplo, el resultado de una operación lógica puede almacenarse como el valor de un objeto.\n\nx &lt;- 2.7\ny &lt;-3L\nz &lt;- x==y\nz\n\n[1] FALSE\n\nclass(z)\n\n[1] \"logical\"\n\n\nacabamos de usar el operador ‘==’ que nos sirve para hacer una comparación de igualdad entre dos objetos. Lo que estamos es preguntando si son iguales el uno al otro y la respuesta que obtenemos es de tipo lógica booleana TRUE o FALSE\n\nTRUE*4\n\n[1] 4\n\nFALSE*2\n\n[1] 0\n\n\nacabamos de ver coerción. Forzar a un cambio de un tipo de dato en otro tipo de dato. Los TRUE pueden ser interpretados mediante la coerción como 1 y los FALSE como 0\n\n# dos es igual a 3?\n2==3\n\n[1] FALSE\n\n# dos es distinto de tres? (tener presente que el ! \n# precediendo al igual quiere decir que es lo inverso \n# al igual, es decir, distinto)\n2!=3\n\n[1] TRUE\n\n#dos es menor que tres?\n2&lt;3\n\n[1] TRUE\n\n\n\n#juan es igual a pedro? (hablamos del texto)\n'juan'=='pedro'\n\n[1] FALSE\n\n# el texto jose es igual a jose?\n'jose'=='jose'\n\n[1] TRUE\n\n#dos es igual a dos?\n2==2\n\n[1] TRUE\n\n\n\n# a es menor que b?\n'a'&lt;'b'\n\n[1] TRUE\n\n# a es mayor que 8?\n'a'&gt;8\n\n[1] TRUE\n\n# a es igual a 1?\n'a'==1\n\n[1] FALSE\n\n\ntipos de datos - character\n\nDatos de caracteres: se usan para almacenar cadenas de caracteres como por ejemplo un nombre, una oración, o cualquier valor que el computador no deba entender como un objeto lógico, número entero, númerico, matriz, etc. El valor debe estar declarado entre comillas simples ” o comilla sencilla ’. Prestar atención a no usar la tipo tilde ´ o cualquiera diferente a las mencionadas\n\n\nnombre &lt;- 'jose miguel'\nno_es_numero &lt;- '2'\nno_es_numero\n\n[1] \"2\"\n\nclass(no_es_numero)\n\n[1] \"character\"\n\nnchar(x)\n\n[1] 3\n\n\n\nnchar('hola')\n\n[1] 4\n\nnchar(5)\n\n[1] 1\n\nnchar(1532)\n\n[1] 4\n\n\ntipos de datos - Date\n\nFechas El trabajo con las fechas puede llegar a ser un tanto complejo y será abordado de forma más intensiva adelante. Revisando algunas de las formas de trabajar con fechas tenemos el uso de las funciones Date y POSIXct\n\nLa función Date solo almacena la fecha calendario\nLa función POSIXct puede almacenar en conjunto hora y fecha\n\n\nLas fechas se representan, en cualquiera de los casos como la cantidad de días (date) o segundos (POSIXct) que han transcurrido desde el 1 ero de enero de 1970.\n\nfecha1 &lt;- as.Date('2020-01-31')\nfecha1\n\n[1] \"2020-01-31\"\n\nclass(fecha1)\n\n[1] \"Date\"\n\nas.numeric(fecha1)\n\n[1] 18292\n\n\n\nfecha2 &lt;- as.POSIXct('2020-01-31 11:15')\nfecha2\n\n[1] \"2020-01-31 11:15:00 -04\"\n\nas.numeric(fecha2)\n\n[1] 1580483700\n\nclass(fecha2)\n\n[1] \"POSIXct\" \"POSIXt\""
  },
  {
    "objectID": "clases/test.html#vectores",
    "href": "clases/test.html#vectores",
    "title": "test",
    "section": "Vectores:",
    "text": "Vectores:\nSon colecciones de elementos que tienen que ser exclusivamente del mismo tipo, de la misma clase. Se usa la c () para declarar un vector. Los elementos que conforman el vector van separados por comas. Los vectores pueden, y es lo más común, les asignamos nombre como lo vimos con las variables. Incluso podemos tener vectores con una solo elemento (que de por si son las variables que ya estudiamos).\n\nnumeros &lt;- c(1,2,5,7)\nnumeros\n\n[1] 1 2 5 7\n\nclass(numeros)\n\n[1] \"numeric\"\n\ntextos &lt;- c('juan','eliana','maria')\nclass(textos)\n\n[1] \"character\"\n\ntextos\n\n[1] \"juan\"   \"eliana\" \"maria\" \n\nlogicos &lt;- c(TRUE, FALSE, TRUE)\nclass(logicos)\n\n[1] \"logical\"\n\n\n\nunico &lt;- c('aula')\nunico\n\n[1] \"aula\"\n\nclass(unico)\n\n[1] \"character\"\n\nerrado &lt;- c('texto', 1)\nerrado\n\n[1] \"texto\" \"1\"    \n\nclass(errado)\n\n[1] \"character\"\n\n\n\nerrado &lt;- c('texto', 1)\nerrado\n\n[1] \"texto\" \"1\"    \n\nclass(errado)\n\n[1] \"character\"\n\n#aplicó la coercion"
  },
  {
    "objectID": "clases/test.html#funciones",
    "href": "clases/test.html#funciones",
    "title": "test",
    "section": "Funciones:",
    "text": "Funciones:\nLas funciones son series de procedimientos estandarizados, que toman como imput determinados argumentos a fijar por el usuario, y devuelven un resultado acorde a la aplicación de dichos procedimientos. Su lógica de funcionamiento es:\nfuncion(argumento1 = arg1, argumento2 = arg2)\nA lo largo del curso iremos viendo numerosas funciones, según lo requieran los distintos ejercicios. Sin embargo, veamos ahora algunos ejemplos para comprender su funcionamiento:\n\npaste() : concatena una serie de caracteres, pudiendo indicarse cómo separar a cada uno de ellos\n\npaste0(): concatena una serie de caracteres sin separar\nsum(): suma de todos los elementos de un vector\n\nmean() promedio aritmético de todos los elementos de un vector\n\n\npaste(\"Pega\", \"estas\", 4, \"palabras\", sep = \" \")\n\n[1] \"Pega estas 4 palabras\"\n\n#Puedo concatenar caracteres almacenados en objetos\npaste(A, B, C, sep = \"**\")\n\n[1] \"10**20**TRUE\"\n\n# Paste0 pega los caracteres sin separador\npaste0(A, B, C)\n\n[1] \"1020TRUE\"\n\n1:5\n\n[1] 1 2 3 4 5\n\nsum(1:5)\n\n[1] 15\n\nmean(1:5, na.rm = TRUE)\n\n[1] 3"
  },
  {
    "objectID": "clases/test.html#caracteres-especiales",
    "href": "clases/test.html#caracteres-especiales",
    "title": "test",
    "section": "Caracteres especiales",
    "text": "Caracteres especiales\n\nR es sensible a mayúsculas y minúsculas, tanto para los nombres de las variables, como para las funciones y parámetros.\nEl numeral # se utiliza para hacer comentarios. Todo lo que se escribe después del # no es interpretado por R. Se debe utilizar un # por cada línea de código que se desea anular\nLos corchetes [] se utilizan para acceder a un objeto:\n\nen un vector[n° orden]\nen una tabla[fila, columna]\nen una lista[n° elemento]\n\nel signo $ también es un método de acceso. Particularmente, en los dataframes, nos permitira acceder a una determinada columna de una tabla\nLos paréntesis() se utilizan en las funciones para definir los parámetros.\nLas comas , se utilizan para separar los parametros al interior de una función."
  },
  {
    "objectID": "clases/test.html#objetos",
    "href": "clases/test.html#objetos",
    "title": "test",
    "section": "Objetos:",
    "text": "Objetos:\nTodo lo que existe dentro de R es un objeto: funciones, vectores, etc. En R se puede trabajar con una gran cantidad de objetos distintos tanto en su tipo como tenerlos dentro de una sesión de trabajo, en lo que respecta al curso estos son con 4 estructuras en las cuales tendremos datos almacenados en memoria.\n\nValores\nVectores\nListas\nData Frames"
  },
  {
    "objectID": "clases/test.html#ambientes-de-trabajo",
    "href": "clases/test.html#ambientes-de-trabajo",
    "title": "test",
    "section": "Ambientes de trabajo",
    "text": "Ambientes de trabajo\nHay algunas cosas que tenemos que tener en cuenta respecto del orden del ambiente en el que trabajamos:\n\nWorking Directory: Es el directorio de trabajo. Pueden ver el suyo con getwd(), es hacia donde apunta el código, por ejemplo, si quieren leer un archivo, la ruta del archivo tiene que estar explicitada como el recorrido desde el Working Directory.\nEnvironment: Esto engloba tanto la información que tenemos cargada en Data y Values, como las librerías que tenemos cargadas mientras trabajamos.\n\nEs importante que mantengamos bien delimitadas estas cosas entre diferentes trabajos, sino:\n\nEl directorio queda referido a un lugar específico en nuestra computadora.\n\n\nSi se lo compartimos a otro se rompe\nSi cambiamos de computadora se rompe\nSi lo cambiamos de lugar se rompe\nSi primero abrimos otro script se rompe\n\n\nTenemos mezclados resultados de diferentes trabajos:\n\n\nNunca sabemos si esa variable/tabla/lista se creo en ese script y no otro\nPerdemos espacio de la memoria\nNo estamos seguros de que el script cargue todas las librerías que necesita\n\nRstudio tiene una herramienta muy útil de trabajo que son los proyectos. Estos permiten mantener un ambiente de trabajo delimitado por cada uno de nuestros trabajos. Es decir:\n\nEl directorio de trabajo se refiere a donde esta ubicado el archivo .Rproj\nEl Environment es específico de nuestro proyecto.\n\nUn proyecto no es un sólo script, sino toda una carpeta de trabajo.\nPara crearlo, vamos al logo de nuevo projecto (Arriba a la derecha de la panatalla), y elegimos la carpeta de trabajo."
  },
  {
    "objectID": "clases/test.html#tipos-de-archivos-de-r",
    "href": "clases/test.html#tipos-de-archivos-de-r",
    "title": "test",
    "section": "Tipos de archivos de R",
    "text": "Tipos de archivos de R\n\nScript: Es un archivo de texto plano, donde podemos poner el código que utilizamos para preservarlo\nRmd: También sirve para guardar el código, pero a diferencia de los scripts, se puede compilar, e intercalar código con resultados (este archivo es un rmarkdown)\nRproject: Es un archivo que define la metadata del proyecto\nRDS y Rdata: Dos formatos de archivos propios de R para guardar datos.\nqmd: archivo de Quarto, el cual es un sistema de publicaciones (página web, blogs, que puede contener códigos y otros objetos resultados de una rutina de programación acompañados por texto legible."
  },
  {
    "objectID": "clases/test.html#remover-objetos-del-global-environment",
    "href": "clases/test.html#remover-objetos-del-global-environment",
    "title": "test",
    "section": "Remover objetos del Global Environment",
    "text": "Remover objetos del Global Environment\nEn caso de querer remover un objeto (todo lo que existe dentro del programa que estamos ejecutando) del “global environment” podemos usar la función rm() teniendo como argumento el nombre del objeto que queremos remover\nrm(“nombre”)\n\n\n\n\n🔗 ucveconomiar4ds"
  },
  {
    "objectID": "clases/clase_03_apoyo.html#r-base",
    "href": "clases/clase_03_apoyo.html#r-base",
    "title": "Clase 3- Apoyo",
    "section": "R base",
    "text": "R base\nCon R base nos referimos a los comandos básicos que vienen incorporados en el R, sin necesidad de cargar librerías."
  },
  {
    "objectID": "clases/clase_03_apoyo.html#uso-de-la-consola-como-una-calculadora--operaciones-aritméticas",
    "href": "clases/clase_03_apoyo.html#uso-de-la-consola-como-una-calculadora--operaciones-aritméticas",
    "title": "Clase 3- Apoyo",
    "section": "Uso de la consola como una calculadora- operaciones aritméticas",
    "text": "Uso de la consola como una calculadora- operaciones aritméticas\n\nEn la consola podemos hacer calculos tal cual si estuviesemos usando una calculadora\n\n\n5*3+6\n\n[1] 21\n\n5*(3+6)\n\n[1] 45\n\n\ntener presente el uso de los paréntesis y el orden en que serán ejecutadas las operaciones matemáticas"
  },
  {
    "objectID": "clases/clase_03_apoyo.html#definición-de-objetos",
    "href": "clases/clase_03_apoyo.html#definición-de-objetos",
    "title": "Clase 3- Apoyo",
    "section": "Definición de objetos",
    "text": "Definición de objetos\nLos Objetos/Elementos constituyen la categoría esencial del R. De hecho, todo en R es un objeto, y se almacena con un nombre específico que no debe poseer espacios. Un número, un vector, una función, la progresión de letras del abecedario, una base de datos, un gráfico, constituyen para R objetos de distinto tipo. Los objetos que vamos creando a medida que trabajamos pueden visualizarse en el panel derecho superior de la pantalla (el Environment).\nEl operador &lt;- (Alt + Guión) sirve para definir un objeto. A la izquierda del &lt;- debe ubicarse el nombre que tomará el elemento a crear. Del lado derecho debe ir la definición del mismo.\n\nA &lt;- 1\n\nPor ejemplo, podemos crear el elemento A, cuyo valor será 1. Para esto, debemos correr el código presionando Ctrl + Enter, con el cursor ubicado en cualquier parte de la línea. Al definir un elemento, el mismo queda guardado en el ambiente del programa, y podrá ser utilizado posteriormente para observar su contenido o para realizar una operación con el mismo.\n\nA \n\n[1] 1\n\nA+6\n\n[1] 7\n\n\nAl correr una linea con el nombre del objeto, la consola del programa nos muestra su contenido. Entre corchetes observamos el número de orden del elemento en cuestión. Si corremos una operación, la consola nos muestra el resultado de la misma.\nEl operador = es equivalente a &lt;-, pero en la práctica no se utiliza para la definición de objetos.\n\nB = 2\nB\n\n[1] 2\n\n\n&lt;- es un operador Unidireccional, es decir que:\nA &lt;- B implica que A va tomar como valor el contenido del objeto B, y no al revés.\n\nA &lt;- B\nA      # Ahora A toma el valor de B, y B continúa conservando el mismo valor\n\n[1] 2\n\nB\n\n[1] 2"
  },
  {
    "objectID": "clases/clase_03_apoyo.html#variables",
    "href": "clases/clase_03_apoyo.html#variables",
    "title": "Clase 3- Apoyo",
    "section": "Variables",
    "text": "Variables\nPueden contener cualquier estructura de datos como una matriz, un valor numérico, un texto, un vector y otras que se verán más adelante. Son creadas mediante el uso del operador de asignación."
  },
  {
    "objectID": "clases/clase_03_apoyo.html#funciones-precargadas",
    "href": "clases/clase_03_apoyo.html#funciones-precargadas",
    "title": "Clase 3- Apoyo",
    "section": "Funciones Precargadas:",
    "text": "Funciones Precargadas:\nRBase cuenta con diversas funciones que ya vienen definidas con el lenguaje de programación. Muchas de ellas son comandos básicos para realizar rutinas de programación. Otro lote de funciones, distinto a otros lenguajes, son funciones para aplicar métodos inherentes a la estadística. Cuando se vea un texto en un script que está asociado a un verbo, o proceso, y posterior al nombre, viene acompañado de un signo de inicio de paréntesis y finaliza con otro signo de cierre de paréntesis, se está en presencia de una función. En algunos casos entre ambos signos de paréntesis aparecerá un texto que puede estar entre comillas, sin comillas y en otros casos varios textos separados por comas. Cuando se da este último caso se refiere a que la función necesita distintos argumentos para poder ejecutarse.\nEjemplos:\n\nFunción sin argumento\n\nSys.Date()\n\n[1] \"2024-10-23\"\n\n\nFunción con un argumento\n\nhead(mtcars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n\nFunción con múltiples argumentos\n\n# asignación variables\nvelocidad &lt;- cars$speed\ndistancia &lt;- cars$dist\n\n# crear un gráfico de tipo scatter plot (diagrama de dispersión )\nplot(velocidad, distancia)"
  },
  {
    "objectID": "clases/clase_03_apoyo.html#tipos-de-datos",
    "href": "clases/clase_03_apoyo.html#tipos-de-datos",
    "title": "Clase 3- Apoyo",
    "section": "Tipos de datos",
    "text": "Tipos de datos\nCuando queremos saber con cuál tipo de datos estamos trabajando necesitamos usar la función class()\n```{r data_types, include=TRUE, echo=TRUE\nLas funciones son series de procedimientos estandarizados, que toman como imput determinados argumentos a fijar por el usuario, y devuelven un resultado acorde a la aplicación de dichos procedimientos. Su lógica de funcionamiento es:\nfuncion(argumento1 = arg1, argumento2 = arg2)\nOtros ejemplos de funciones:\n\npaste() : concatena una serie de caracteres, pudiendo indicarse cómo separar a cada uno de ellos\n\npaste0(): concatena una serie de caracteres sin separar\nsum(): suma de todos los elementos de un vector\n\nmean() promedio aritmético de todos los elementos de un vector\n\n\npaste(\"Pega\", \"estas\", 4, \"palabras\", sep = \" \")\n\n[1] \"Pega estas 4 palabras\"\n\n#Puedo concatenar caracteres almacenados en objetos\nA= 'nombre'\nB= 'apellido'\nC= 'ciudad'\npaste(A, B, C, sep = \"**\")\n\n[1] \"nombre**apellido**ciudad\"\n\n# Paste0 pega los caracteres sin separador\npaste0(A, B, C)\n\n[1] \"nombreapellidociudad\"\n\n1:5\n\n[1] 1 2 3 4 5\n\nsum(1:5)\n\n[1] 15\n\nmean(1:5, na.rm = TRUE)\n\n[1] 3"
  },
  {
    "objectID": "clases/clase_03_apoyo.html#vectores",
    "href": "clases/clase_03_apoyo.html#vectores",
    "title": "Clase 3- Apoyo",
    "section": "Vectores",
    "text": "Vectores\nSon colecciones de elementos que tienen que ser exclusivamente del mismo tipo, de la misma clase. Se usa la c () para declarar un vector. Los elementos que conforman el vector van separados por comas. Los vectores pueden, y es lo más común, les asignamos nombre como lo vimos con las variables. Incluso podemos tener vectores con una solo elemento (que de por si son las variables que ya estudiamos)."
  },
  {
    "objectID": "clases/clase_03_apoyo.html#tipos-de-vectores",
    "href": "clases/clase_03_apoyo.html#tipos-de-vectores",
    "title": "Clase 3- Apoyo",
    "section": "Tipos de vectores",
    "text": "Tipos de vectores\nvectores - numeric\nSi queremos preguntar lo hacemos con la función is.numeric()\n\nx=10\nis.numeric(x)\n\n[1] TRUE\n\n\nEn la lámina anterior vimos que el valor que retornó class(x) fue “numeric”.\n\nNúmericos: son aquellos que incluyen números enteros y decimales. En otros lenguajes se les conocen como números de tipo “float” y “double”.\n\n\nx &lt;- 2\n\nclass(x)\n\n[1] \"numeric\"\n\n\nvectores - integer\n\nEnteros: hay casos en los que es necesario trabajar con números enteros sin que contenga ningún decimal. Estos números se declaran con el uso de una L posterior al número.\n\n\ny &lt;- 2L\ny\n\n[1] 2\n\nclass(y)\n\n[1] \"integer\"\n\n\nEjemplo de una operación:\n\nx &lt;- 2.7\nclass(x)\n\n[1] \"numeric\"\n\ny &lt;- 3L\nclass(y)\n\n[1] \"integer\"\n\n\nvectores - lógicos\n\nLógicos: Sirven para representar datos que solo pueden tener uno de estos dos valores\n\nverdadero - TRUE\nfalso - FALSE\n\n\nOperadores lógicos:\n\n\\(&gt;\\) (mayor a)\n\\(&gt;=\\) (mayor o igual a)\n\\(&lt;\\) (menor a)\n\\(&lt;=\\) (menor o igual a)\n\\(==\\) (igual a)\n\\(!=\\) (distinto a)\n\n\n# Redefinimos los valores A y B\nA &lt;- 10\nB &lt;- 20\n\n# Realizamos comparaciones lógicas\nA &gt;  B\n\n[1] FALSE\n\nA &gt;= B\n\n[1] FALSE\n\nA &lt;  B\n\n[1] TRUE\n\nA &lt;= B\n\n[1] TRUE\n\nA == B\n\n[1] FALSE\n\nA != B\n\n[1] TRUE\n\nC &lt;- A != B\nC\n\n[1] TRUE\n\n\nComo muestra el último ejemplo, el resultado de una operación lógica puede almacenarse como el valor de un objeto.\n\nx &lt;- 2.7\ny &lt;-3L\nz &lt;- x==y\nz\n\n[1] FALSE\n\nclass(z)\n\n[1] \"logical\"\n\n\nacabamos de usar el operador ‘==’ que nos sirve para hacer una comparación de igualdad entre dos objetos. Lo que estamos es preguntando si son iguales el uno al otro y la respuesta que obtenemos es de tipo lógica booleana TRUE o FALSE\n\nTRUE*4\n\n[1] 4\n\nFALSE*2\n\n[1] 0\n\n\nacabamos de ver coerción. Forzar a un cambio de un tipo de dato en otro tipo de dato. Los TRUE pueden ser interpretados mediante la coerción como 1 y los FALSE como 0\n\n# dos es igual a 3?\n2==3\n\n[1] FALSE\n\n# dos es distinto de tres? (tener presente que el ! \n# precediendo al igual quiere decir que es lo inverso \n# al igual, es decir, distinto)\n2!=3\n\n[1] TRUE\n\n#dos es menor que tres?\n2&lt;3\n\n[1] TRUE\n\n\n\n#juan es igual a pedro? (hablamos del texto)\n'juan'=='pedro'\n\n[1] FALSE\n\n# el texto jose es igual a jose?\n'jose'=='jose'\n\n[1] TRUE\n\n#dos es igual a dos?\n2==2\n\n[1] TRUE\n\n\n\n# a es menor que b?\n'a'&lt;'b'\n\n[1] TRUE\n\n# a es mayor que 8?\n'a'&gt;8\n\n[1] TRUE\n\n# a es igual a 1?\n'a'==1\n\n[1] FALSE\n\n\nvectores - character\n\nDatos de caracteres: se usan para almacenar cadenas de caracteres como por ejemplo un nombre, una oración, o cualquier valor que el computador no deba entender como un objeto lógico, número entero, númerico, matriz, etc. El valor debe estar declarado entre comillas simples ” o comilla sencilla ’. Prestar atención a no usar la tipo tilde ´ o cualquiera diferente a las mencionadas\n\n\nnombre &lt;- 'jose miguel'\nno_es_numero &lt;- '2'\nno_es_numero\n\n[1] \"2\"\n\nclass(no_es_numero)\n\n[1] \"character\"\n\nnchar(x)\n\n[1] 3\n\n\n\nnchar('hola')\n\n[1] 4\n\nnchar(5)\n\n[1] 1\n\nnchar(1532)\n\n[1] 4\n\n\nvectores - Date\n\nFechas El trabajo con las fechas puede llegar a ser un tanto complejo y será abordado de forma más intensiva adelante. Revisando algunas de las formas de trabajar con fechas tenemos el uso de las funciones Date y POSIXct\n\nLa función Date solo almacena la fecha calendario\nLa función POSIXct puede almacenar en conjunto hora y fecha\n\n\nLas fechas se representan, en cualquiera de los casos como la cantidad de días (date) o segundos (POSIXct) que han transcurrido desde el 1 ero de enero de 1970.\n\nfecha1 &lt;- as.Date('2020-01-31')\nfecha1\n\n[1] \"2020-01-31\"\n\nclass(fecha1)\n\n[1] \"Date\"\n\nas.numeric(fecha1)\n\n[1] 18292\n\n\n\nfecha2 &lt;- as.POSIXct('2020-01-31 11:15')\nfecha2\n\n[1] \"2020-01-31 11:15:00 -04\"\n\nas.numeric(fecha2)\n\n[1] 1580483700\n\nclass(fecha2)\n\n[1] \"POSIXct\" \"POSIXt\""
  },
  {
    "objectID": "clases/clase_03_apoyo.html#vectores-repaso",
    "href": "clases/clase_03_apoyo.html#vectores-repaso",
    "title": "Clase 3- Apoyo",
    "section": "Vectores repaso:",
    "text": "Vectores repaso:\n\nnumeros &lt;- c(1,2,5,7)\nnumeros\n\n[1] 1 2 5 7\n\nclass(numeros)\n\n[1] \"numeric\"\n\ntextos &lt;- c('juan','eliana','maria')\nclass(textos)\n\n[1] \"character\"\n\ntextos\n\n[1] \"juan\"   \"eliana\" \"maria\" \n\nlogicos &lt;- c(TRUE, FALSE, TRUE)\nclass(logicos)\n\n[1] \"logical\"\n\nis.numeric(numeros)\n\n[1] TRUE\n\nis.logical(textos)\n\n[1] FALSE\n\nis.character(textos)\n\n[1] TRUE\n\n\n\nunico &lt;- c('aula')\nunico\n\n[1] \"aula\"\n\nclass(unico)\n\n[1] \"character\"\n\nerrado &lt;- c('texto', 1)\nerrado\n\n[1] \"texto\" \"1\"    \n\nclass(errado)\n\n[1] \"character\"\n\n\n\nerrado &lt;- c('texto', 1)\nerrado\n\n[1] \"texto\" \"1\"    \n\nclass(errado)\n\n[1] \"character\"\n\n#aplicó la coercion"
  },
  {
    "objectID": "clases/clase_03_apoyo.html#estructuras-de-datos-objetos",
    "href": "clases/clase_03_apoyo.html#estructuras-de-datos-objetos",
    "title": "Clase 3- Apoyo",
    "section": "Estructuras de Datos/ Objetos:",
    "text": "Estructuras de Datos/ Objetos:\nTodo lo que existe dentro de R es un objeto: funciones, vectores, etc. En R se puede trabajar con una gran cantidad de objetos distintos tanto en su tipo como tenerlos dentro de una sesión de trabajo.\nEstas son algunos de los objetos que contienen datos con los cuales trabajaremos a lo largo del curso.\n\nValores\nVectores\nListas\nData Frames\nTibbles\n\nNo obstante, existen estructuras más complejas que no son de tipo tabular que no serán abordadas como la raster layers."
  },
  {
    "objectID": "clases/clase_03_apoyo.html#caracteres-especiales",
    "href": "clases/clase_03_apoyo.html#caracteres-especiales",
    "title": "Clase 3- Apoyo",
    "section": "Caracteres especiales",
    "text": "Caracteres especiales\n\nR es sensible a mayúsculas y minúsculas, tanto para los nombres de las variables, como para las funciones y parámetros.\nEl numeral # se utiliza para hacer comentarios. Todo lo que se escribe después del # no es interpretado por R. Se debe utilizar un # por cada línea de código que se desea anular\nLos corchetes [] se utilizan para acceder a un objeto:\n\nen un vector[n° orden]\nen una tabla[fila, columna]\nen una lista[n° elemento]\n\nel signo $ también es un método de acceso. Particularmente, en los dataframes, nos permitira acceder a una determinada columna de una tabla\nLos paréntesis() se utilizan en las funciones para definir los parámetros.\nLas comas , se utilizan para separar los parametros al interior de una función."
  },
  {
    "objectID": "clases/clase_03_apoyo.html#nombres-variables",
    "href": "clases/clase_03_apoyo.html#nombres-variables",
    "title": "Clase 3- Apoyo",
    "section": "Nombres Variables",
    "text": "Nombres Variables"
  },
  {
    "objectID": "clases/clase_03_apoyo.html#ambientes-de-trabajo",
    "href": "clases/clase_03_apoyo.html#ambientes-de-trabajo",
    "title": "Clase 3- Apoyo",
    "section": "Ambientes de trabajo",
    "text": "Ambientes de trabajo\nHay algunas cosas que tenemos que tener en cuenta respecto del orden del ambiente en el que trabajamos:\n\nWorking Directory: Es el directorio de trabajo. Pueden ver el suyo con getwd(), es hacia donde apunta el código, por ejemplo, si quieren leer un archivo, la ruta del archivo tiene que estar explicitada como el recorrido desde el Working Directory.\nEnvironment: Esto engloba tanto la información que tenemos cargada en Data y Values, como las librerías que tenemos cargadas mientras trabajamos.\n\nEs importante que mantengamos bien delimitadas estas cosas entre diferentes trabajos, sino:\n\nEl directorio queda referido a un lugar específico en nuestra computadora.\n\n\nSi se lo compartimos a otro se rompe\nSi cambiamos de computadora se rompe\nSi lo cambiamos de lugar se rompe\nSi primero abrimos otro script se rompe\n\n\nTenemos mezclados resultados de diferentes trabajos:\n\n\nNunca sabemos si esa variable/tabla/lista se creo en ese script y no otro\nPerdemos espacio de la memoria\nNo estamos seguros de que el script cargue todas las librerías que necesita\n\nRstudio tiene una herramienta muy útil de trabajo que son los proyectos. Estos permiten mantener un ambiente de trabajo delimitado por cada uno de nuestros trabajos. Es decir:\n\nEl directorio de trabajo se refiere a donde esta ubicado el archivo .Rproj\nEl Environment es específico de nuestro proyecto.\n\nUn proyecto no es un sólo script, sino toda una carpeta de trabajo.\nPara crearlo, vamos al logo de nuevo projecto (Arriba a la derecha de la panatalla), y elegimos la carpeta de trabajo."
  },
  {
    "objectID": "clases/clase_03_apoyo.html#tipos-de-archivos-de-r",
    "href": "clases/clase_03_apoyo.html#tipos-de-archivos-de-r",
    "title": "Clase 3- Apoyo",
    "section": "Tipos de archivos de R",
    "text": "Tipos de archivos de R\n\nScript: Es un archivo de texto plano, donde podemos poner el código que utilizamos para preservarlo\nRmd: También sirve para guardar el código, pero a diferencia de los scripts, se puede compilar, e intercalar código con resultados (este archivo es un rmarkdown)\nRproject: Es un archivo que define la metadata del proyecto\nRDS y Rdata: Dos formatos de archivos propios de R para guardar datos.\nqmd: archivo de Quarto, el cual es un sistema de publicaciones (página web, blogs, que puede contener códigos y otros objetos resultados de una rutina de programación acompañados por texto legible."
  },
  {
    "objectID": "clases/clase_03_apoyo.html#remover-objetos-del-global-environment",
    "href": "clases/clase_03_apoyo.html#remover-objetos-del-global-environment",
    "title": "Clase 3- Apoyo",
    "section": "Remover objetos del Global Environment",
    "text": "Remover objetos del Global Environment\nEn caso de querer remover un objeto (todo lo que existe dentro del programa que estamos ejecutando) del “global environment” podemos usar la función rm() teniendo como argumento el nombre del objeto que queremos remover\nrm(“nombre”)\n\n\n\n\n🔗 ucveconomiar4ds"
  },
  {
    "objectID": "clases/clase_02.html#ides",
    "href": "clases/clase_02.html#ides",
    "title": "Conociendo el IDE RStudio",
    "section": "IDE’s",
    "text": "IDE’s\n\n\nconsola R, entornos de programación, no todo es visual-acciones, hablar sobre la programación, no son out of the box"
  },
  {
    "objectID": "clases/clase_02.html#rstudio",
    "href": "clases/clase_02.html#rstudio",
    "title": "Conociendo el IDE RStudio",
    "section": "RStudio:",
    "text": "RStudio:\n\nimagen tomada de presentación de Yanina Bellini Saibene @yabellini para el grupo RLadies"
  },
  {
    "objectID": "clases/clase_02.html#rstudio-1",
    "href": "clases/clase_02.html#rstudio-1",
    "title": "Conociendo el IDE RStudio",
    "section": "RStudio:",
    "text": "RStudio:\nRStudio es un entorno de desarrollo integrado (IDE) que proporciona una interfaz al agregar muchas funciones y herramientas convenientes.\n\n\nsoftware libre, colaboradores, cambio de presentacion"
  },
  {
    "objectID": "clases/clase_02.html#ide-rstudio",
    "href": "clases/clase_02.html#ide-rstudio",
    "title": "Conociendo el IDE RStudio",
    "section": "IDE RStudio",
    "text": "IDE RStudio\nUno de los entornos más cómodos para utilizar el lenguaje R es el programa R studio.\n\nRstudio es una fundación que produce productos asociados al lenguaje R, como el programa sobre el que corremos los comandos, y extensiones del lenguaje (librerías).\nEl programa es gratuito y se puede bajar de la página oficial"
  },
  {
    "objectID": "clases/clase_02.html#se-puede-ejecutar-desde",
    "href": "clases/clase_02.html#se-puede-ejecutar-desde",
    "title": "Conociendo el IDE RStudio",
    "section": "Se puede ejecutar desde:",
    "text": "Se puede ejecutar desde:\n\nNube\nlocal: su propio computador\nLAN: red local"
  },
  {
    "objectID": "clases/clase_02.html#secciones",
    "href": "clases/clase_02.html#secciones",
    "title": "Conociendo el IDE RStudio",
    "section": "Secciones",
    "text": "Secciones\n\nPantalla Rstudio"
  },
  {
    "objectID": "clases/clase_02.html#partes---componentes-pestañas",
    "href": "clases/clase_02.html#partes---componentes-pestañas",
    "title": "Conociendo el IDE RStudio",
    "section": "Partes - Componentes, pestañas",
    "text": "Partes - Componentes, pestañas\n\n4 paneles y c/u con distintas pestañas y funcionalidades"
  },
  {
    "objectID": "clases/clase_02.html#abrir-archivos",
    "href": "clases/clase_02.html#abrir-archivos",
    "title": "Conociendo el IDE RStudio",
    "section": "abrir archivos",
    "text": "abrir archivos\n\nSon distintos los tipos de archivos que se pueden abrir"
  },
  {
    "objectID": "clases/clase_02.html#panel-editor-de-código",
    "href": "clases/clase_02.html#panel-editor-de-código",
    "title": "Conociendo el IDE RStudio",
    "section": "panel Editor de Código",
    "text": "panel Editor de Código\n\neditor de código. se introducen códigos (scripts)\nSe ejecutan con “run” el el área superior derecha"
  },
  {
    "objectID": "clases/clase_02.html#panel-environment-y-files",
    "href": "clases/clase_02.html#panel-environment-y-files",
    "title": "Conociendo el IDE RStudio",
    "section": "panel Environment y Files",
    "text": "panel Environment y Files"
  },
  {
    "objectID": "clases/clase_02.html#panel-cónsola",
    "href": "clases/clase_02.html#panel-cónsola",
    "title": "Conociendo el IDE RStudio",
    "section": "panel cónsola",
    "text": "panel cónsola\n\nimportante diferenciar: consola estamos dentro de R, en terminal acceso al SO del computador"
  },
  {
    "objectID": "clases/clase_02.html#panel-files",
    "href": "clases/clase_02.html#panel-files",
    "title": "Conociendo el IDE RStudio",
    "section": "panel files",
    "text": "panel files\n\nnavegador de archivos y visor."
  },
  {
    "objectID": "clases/clase_02.html#working-directory",
    "href": "clases/clase_02.html#working-directory",
    "title": "Conociendo el IDE RStudio",
    "section": "Working Directory:",
    "text": "Working Directory:\nes donde tenemos la ruta (path) a los archivos con los cuales trabajamos en un determinado proyecto: Absoluta\n\nen panel “files” \nen terminal con el comando pwd \nen la consola con la función getwd()"
  },
  {
    "objectID": "clases/clase_02.html#working-directory-1",
    "href": "clases/clase_02.html#working-directory-1",
    "title": "Conociendo el IDE RStudio",
    "section": "Working Directory:",
    "text": "Working Directory:\nrelativa"
  },
  {
    "objectID": "clases/clase_02.html#configurar-working-directory",
    "href": "clases/clase_02.html#configurar-working-directory",
    "title": "Conociendo el IDE RStudio",
    "section": "Configurar “working directory”",
    "text": "Configurar “working directory”\ncrear carpeta donde se van a guardar los proyectos, p ejemp, dentro de “Documentos” - paso 1"
  },
  {
    "objectID": "clases/clase_02.html#configurar-working-directory-cont.",
    "href": "clases/clase_02.html#configurar-working-directory-cont.",
    "title": "Conociendo el IDE RStudio",
    "section": "Configurar “working directory” (cont.)",
    "text": "Configurar “working directory” (cont.)\npaso 2"
  },
  {
    "objectID": "clases/clase_02.html#proyecto",
    "href": "clases/clase_02.html#proyecto",
    "title": "Conociendo el IDE RStudio",
    "section": "Proyecto:",
    "text": "Proyecto:\nconjunto de archivos (“files” ) que conforman un determinado análisis, página web, presentación, libro, etc.\nAl crearse hay algunos archivos que se definen automáticamente como por ejemplo el .Rproj\nCon la función 💡 (función 🤔????) list.files() se pueden listar todos los archivos que se encuentran en el directorio"
  },
  {
    "objectID": "clases/clase_02.html#primera-práctica",
    "href": "clases/clase_02.html#primera-práctica",
    "title": "Conociendo el IDE RStudio",
    "section": "Primera Práctica:",
    "text": "Primera Práctica:\nInstalar un paquete de R de manera offline\n\nCrear un Proyecto de nombre 02_inst_paqk_off\nDescargar script desde http://direccion_ip:90/descarga/scripts/clase_02_instalacion_paquete_offline.R\nDescargar archivo zip\nhttp://direccion_ip:90/descarga/winbinarios.zip\nMover el archivo zip al directorio de trabajo del proyecto que\nEjecutar línea a línea"
  },
  {
    "objectID": "clases/clase_02.html#video-creación-proyecto",
    "href": "clases/clase_02.html#video-creación-proyecto",
    "title": "Conociendo el IDE RStudio",
    "section": "Video Creación Proyecto",
    "text": "Video Creación Proyecto"
  },
  {
    "objectID": "clases/clase_02.html#playlist-economía-r4ds",
    "href": "clases/clase_02.html#playlist-economía-r4ds",
    "title": "Conociendo el IDE RStudio",
    "section": "Playlist Economía R4DS",
    "text": "Playlist Economía R4DS\nPlaylist videos del curso\n\n\n\n\n🔗 ucveconomiar4ds"
  },
  {
    "objectID": "scripts/clase_03/clase_03_complemento_variables.html",
    "href": "scripts/clase_03/clase_03_complemento_variables.html",
    "title": "Clase 03: complemento- nombres variables",
    "section": "",
    "text": "En esta clase veremos algunas recomendaciones sobre cómo deben nombrarse las variables en el lenguaje de programación R. Recuerde que el nombre de las variables es fundamental para mantener un código claro y comprensible.\n# Algún día haremos justicia los que tenemos la ñ en nuestro nombre\nprof_avendaño &lt;- 'se ejecutará pero no es recomendable'\nLos nombres de las variables no deben contener acentos, diéresis ni caracteres especiales. Aunque es posible utilizar algunos caracteres como la “ñ”, no es recomendable."
  },
  {
    "objectID": "scripts/clase_03/clase_03_complemento_variables.html#buenas-prácticas-para-nombrar-variables",
    "href": "scripts/clase_03/clase_03_complemento_variables.html#buenas-prácticas-para-nombrar-variables",
    "title": "Clase 03: complemento- nombres variables",
    "section": "Buenas prácticas para nombrar variables",
    "text": "Buenas prácticas para nombrar variables\nEs importante que el nombre de la variable describa el valor que está guardando. Por ejemplo, no use nombres ambiguos como:\n\nprincesa &lt;- 10000\n\nEn lugar de eso, use nombres descriptivos como:\n\nmeta_ventas_enero &lt;- 10000\n\nEsto le ayudará a entender el propósito de la variable más adelante en el código, especialmente cuando tiene múltiples variables en su programa."
  },
  {
    "objectID": "scripts/clase_03/clase_03_complemento_variables.html#declaración-de-variables",
    "href": "scripts/clase_03/clase_03_complemento_variables.html#declaración-de-variables",
    "title": "Clase 03: complemento- nombres variables",
    "section": "Declaración de variables",
    "text": "Declaración de variables\nDespués de elegir el nombre de la variable, es necesario usar el operador de asignación. En R, esto se hace con &lt;-. También puede usar atajos de teclado como Alt + - en Windows para escribir el operador más rápido.\n\nvariable_texto &lt;- \"contiene un texto\"\n\nTenga en cuenta que los textos deben ir entre comillas simples (') o dobles (\").\nSi el valor que desea asignar es numérico, no use comillas:\n\nvariable_numero &lt;- 1000\n\nCompare este ejemplo con una asignación incorrecta:\n\nvariable_numero_2 &lt;- '1000'\nvariable_numero + variable_numero  # Correcto\n\n[1] 2000\n\n# variable_numero + variable_numero_2  # Genera error"
  },
  {
    "objectID": "scripts/clase_03/clase_03_complemento_variables.html#ejecutar-código-en-r",
    "href": "scripts/clase_03/clase_03_complemento_variables.html#ejecutar-código-en-r",
    "title": "Clase 03: complemento- nombres variables",
    "section": "Ejecutar código en R",
    "text": "Ejecutar código en R\nAl declarar una variable y ejecutar la línea, R creará una variable en el entorno. Puede ver el nuevo objeto creado en la ventana de “Environment”.\n\nmeta_ventas_enero &lt;- 1000"
  },
  {
    "objectID": "scripts/clase_03/clase_03_complemento_variables.html#ejemplos-prácticos",
    "href": "scripts/clase_03/clase_03_complemento_variables.html#ejemplos-prácticos",
    "title": "Clase 03: complemento- nombres variables",
    "section": "Ejemplos prácticos",
    "text": "Ejemplos prácticos\nEjecute los siguientes ejemplos y asegúrese de que las variables aparezcan en el “Environment”.\n\nvar_nombre &lt;- 'primera asignacion'\n\nRecuerde siempre seguir las mejores prácticas de nombramiento para facilitar la lectura y el mantenimiento de su código."
  },
  {
    "objectID": "scripts/clase_03/clase_03_complemento_variables.html#reglas-para-la-creación-de-variables",
    "href": "scripts/clase_03/clase_03_complemento_variables.html#reglas-para-la-creación-de-variables",
    "title": "Clase 03: complemento- nombres variables",
    "section": "Reglas para la creación de variables",
    "text": "Reglas para la creación de variables\n\nEstilo y convención\n\nMinúsculas: Las variables deben escribirse en minúsculas como una recomendación de estilo. Aunque no es una limitación del lenguaje, es una buena práctica:\n\nprimeravariable &lt;- 'iniciamos un script'\n\nRayita abajo para juntar palabras: Puede usar el guion bajo _ para juntar dos o más palabras en el nombre de una variable:\n\n\nvariable_creada &lt;- 'este texto es el contenido de la variable'\n\n\n\nRestricciones\n\nNo espacios en los nombres: Las variables no pueden contener espacios en su nombre. El siguiente ejemplo no es válido y dará error:\n\n\n# variable con espacio &lt;- 'esta línea no se podrá ejecutar'\n\n\nNo comenzar con números: Las variables no pueden comenzar con un número. El siguiente ejemplo también genera un error:\n\n\n# 1variable &lt;- 'tampoco se ejecutará este código'\n\nAl ejecutar la línea anterior, se obtendrá un mensaje de error en la Consola.\n\nSolo letras o puntos al inicio: Los nombres de las variables solo pueden empezar con una letra o un punto. Si se utiliza un punto al inicio, no debe ser seguido de un número:\n\n\nvariable_tercera &lt;- 'seguimos avanzando'\n.variable_tercera &lt;- 'la variable_tercera es distinta a la .variable_tercera, son dos nombres distintos'\n\nEl siguiente ejemplo es incorrecto porque el punto no puede estar seguido de un número:\n\n# .5variable &lt;- 'INCORRECTO'\n\n\n\nCaracteres especiales no permitidos\nAdemás del punto . y la rayita abajo _, no se permite el uso de otros caracteres especiales en los nombres de las variables.\nAquí tienes un listado de los caracteres especiales que no puedes usar:\n\nlistado_caracteres_especiales &lt;- c(\"~\", \"`\", \"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"&\", \n                                   \"*\", \"(\", \")\", \"-\", \"_\", \"+\", \"=\", \"{\", \"}\", \n                                   \"[\", \"]\", \"|\", \"\\\\\", \"/\", \":\", \";\", \"\\\"\", \n                                   \"'\", \"&lt;\", \"&gt;\", \".\", \"?\")\nlistado_caracteres_especiales\n\n [1] \"~\"  \"`\"  \"!\"  \"@\"  \"#\"  \"$\"  \"%\"  \"^\"  \"&\"  \"*\"  \"(\"  \")\"  \"-\"  \"_\"  \"+\" \n[16] \"=\"  \"{\"  \"}\"  \"[\"  \"]\"  \"|\"  \"\\\\\" \"/\"  \":\"  \";\"  \"\\\"\" \"'\"  \"&lt;\"  \"&gt;\"  \".\" \n[31] \"?\" \n\n\nEl siguiente ejemplo es incorrecto debido al uso de un carácter especial en el nombre de la variable:\n\n# variable.inasig@nabl_e &lt;- 'INCORRECTO'"
  },
  {
    "objectID": "apoyo/clase_03_complemento_variables.html",
    "href": "apoyo/clase_03_complemento_variables.html",
    "title": "Clase 03: complemento- nombres variables",
    "section": "",
    "text": "En esta clase veremos algunas recomendaciones sobre cómo deben nombrarse las variables en el lenguaje de programación R. Recuerde que el nombre de las variables es fundamental para mantener un código claro y comprensible.\n# Algún día haremos justicia los que tenemos la ñ en nuestro nombre\nprof_avendaño &lt;- 'se ejecutará pero no es recomendable'\nLos nombres de las variables no deben contener acentos, diéresis ni caracteres especiales. Aunque es posible utilizar algunos caracteres como la “ñ”, no es recomendable."
  },
  {
    "objectID": "apoyo/clase_03_complemento_variables.html#buenas-prácticas-para-nombrar-variables",
    "href": "apoyo/clase_03_complemento_variables.html#buenas-prácticas-para-nombrar-variables",
    "title": "Clase 03: complemento- nombres variables",
    "section": "Buenas prácticas para nombrar variables",
    "text": "Buenas prácticas para nombrar variables\nEs importante que el nombre de la variable describa el valor que está guardando. Por ejemplo, no use nombres ambiguos como:\n\nprincesa &lt;- 10000\n\nEn lugar de eso, use nombres descriptivos como:\n\nmeta_ventas_enero &lt;- 10000\n\nEsto le ayudará a entender el propósito de la variable más adelante en el código, especialmente cuando tiene múltiples variables en su programa."
  },
  {
    "objectID": "apoyo/clase_03_complemento_variables.html#declaración-de-variables",
    "href": "apoyo/clase_03_complemento_variables.html#declaración-de-variables",
    "title": "Clase 03: complemento- nombres variables",
    "section": "Declaración de variables",
    "text": "Declaración de variables\nDespués de elegir el nombre de la variable, es necesario usar el operador de asignación. En R, esto se hace con &lt;-. También puede usar atajos de teclado como Alt + - en Windows para escribir el operador más rápido.\n\nvariable_texto &lt;- \"contiene un texto\"\n\nTenga en cuenta que los textos deben ir entre comillas simples (') o dobles (\").\nSi el valor que desea asignar es numérico, no use comillas:\n\nvariable_numero &lt;- 1000\n\nCompare este ejemplo con una asignación incorrecta:\n\nvariable_numero_2 &lt;- '1000'\nvariable_numero + variable_numero  # Correcto\n\n[1] 2000\n\n# variable_numero + variable_numero_2  # Genera error"
  },
  {
    "objectID": "apoyo/clase_03_complemento_variables.html#ejecutar-código-en-r",
    "href": "apoyo/clase_03_complemento_variables.html#ejecutar-código-en-r",
    "title": "Clase 03: complemento- nombres variables",
    "section": "Ejecutar código en R",
    "text": "Ejecutar código en R\nAl declarar una variable y ejecutar la línea, R creará una variable en el entorno. Puede ver el nuevo objeto creado en la ventana de “Environment”.\n\nmeta_ventas_enero &lt;- 1000"
  },
  {
    "objectID": "apoyo/clase_03_complemento_variables.html#ejemplos-prácticos",
    "href": "apoyo/clase_03_complemento_variables.html#ejemplos-prácticos",
    "title": "Clase 03: complemento- nombres variables",
    "section": "Ejemplos prácticos",
    "text": "Ejemplos prácticos\nEjecute los siguientes ejemplos y asegúrese de que las variables aparezcan en el “Environment”.\n\nvar_nombre &lt;- 'primera asignacion'\n\nRecuerde siempre seguir las mejores prácticas de nombramiento para facilitar la lectura y el mantenimiento de su código."
  },
  {
    "objectID": "apoyo/clase_03_complemento_variables.html#reglas-para-la-creación-de-variables",
    "href": "apoyo/clase_03_complemento_variables.html#reglas-para-la-creación-de-variables",
    "title": "Clase 03: complemento- nombres variables",
    "section": "Reglas para la creación de variables",
    "text": "Reglas para la creación de variables\n\nEstilo y convención\n\nMinúsculas: Las variables deben escribirse en minúsculas como una recomendación de estilo. Aunque no es una limitación del lenguaje, es una buena práctica:\n\nprimeravariable &lt;- 'iniciamos un script'\n\nRayita abajo para juntar palabras: Puede usar el guion bajo _ para juntar dos o más palabras en el nombre de una variable:\n\n\nvariable_creada &lt;- 'este texto es el contenido de la variable'\n\n\n\nRestricciones\n\nNo espacios en los nombres: Las variables no pueden contener espacios en su nombre. El siguiente ejemplo no es válido y dará error:\n\n\n# variable con espacio &lt;- 'esta línea no se podrá ejecutar'\n\n\nNo comenzar con números: Las variables no pueden comenzar con un número. El siguiente ejemplo también genera un error:\n\n\n# 1variable &lt;- 'tampoco se ejecutará este código'\n\nAl ejecutar la línea anterior, se obtendrá un mensaje de error en la Consola.\n\nSolo letras o puntos al inicio: Los nombres de las variables solo pueden empezar con una letra o un punto. Si se utiliza un punto al inicio, no debe ser seguido de un número:\n\n\nvariable_tercera &lt;- 'seguimos avanzando'\n.variable_tercera &lt;- 'la variable_tercera es distinta a la .variable_tercera, son dos nombres distintos'\n\nEl siguiente ejemplo es incorrecto porque el punto no puede estar seguido de un número:\n\n# .5variable &lt;- 'INCORRECTO'\n\n\n\nCaracteres especiales no permitidos\nAdemás del punto . y la rayita abajo _, no se permite el uso de otros caracteres especiales en los nombres de las variables.\nAquí tienes un listado de los caracteres especiales que no puedes usar:\n\nlistado_caracteres_especiales &lt;- c(\"~\", \"`\", \"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"&\", \n                                   \"*\", \"(\", \")\", \"-\", \"_\", \"+\", \"=\", \"{\", \"}\", \n                                   \"[\", \"]\", \"|\", \"\\\\\", \"/\", \":\", \";\", \"\\\"\", \n                                   \"'\", \"&lt;\", \"&gt;\", \".\", \"?\")\nlistado_caracteres_especiales\n\n [1] \"~\"  \"`\"  \"!\"  \"@\"  \"#\"  \"$\"  \"%\"  \"^\"  \"&\"  \"*\"  \"(\"  \")\"  \"-\"  \"_\"  \"+\" \n[16] \"=\"  \"{\"  \"}\"  \"[\"  \"]\"  \"|\"  \"\\\\\" \"/\"  \":\"  \";\"  \"\\\"\" \"'\"  \"&lt;\"  \"&gt;\"  \".\" \n[31] \"?\" \n\n\nEl siguiente ejemplo es incorrecto debido al uso de un carácter especial en el nombre de la variable:\n\n# variable.inasig@nabl_e &lt;- 'INCORRECTO'"
  },
  {
    "objectID": "curso-equipo.html",
    "href": "curso-equipo.html",
    "title": "Equipo de Profesores",
    "section": "",
    "text": "Prof. Juan Pablo Goncalves:\nProfesor Escuela de Economía…….\n\n\nProf. Jesús Sánchez:\nProfesor Escuela de Economía…….\n\n\nProf. José Miguel Avendaño:\nMagister en Ciencias de la Computación (U.C.V.) y Economista (U.C.V.). Trabaja con datos desde hace más de dos décadas. Sus investigaciónes se centran en el uso del procesamiento del lenguaje natural (NLP), incluyendo los Largos Modelos de Lenguaje (LLM´s), el cual es un campo de estudio del machine learning. Su interés por la Ciencia de Datos lo ha acercado al desarrollo de aplicaciones web donde los datos, su manipulación y representación, son los pilares en que sustentan.\nActualmente participa en las investigaciones que desarrolla el Laboratorio de Gestión de la Innovación y el Centro de Microscopía Electrónica «Dr. Mitsuo Ogura», ambos de la UCV, en la incorporación de largos modelos de lenguaje en procesos de enseñanza inteligenciada.\n\n\n\n\n\n\n\nHoras de Consulta\nSitio\n\n\n\n\nLunes 2:30 - 3:00 pm\nLaboratorio piso 2 Escuela de Economía, FaCES\n\n\nMiércoles 3:00 pm - 4:30 pm\nCentro de Microscopía Electrónica, planta baja, Facultad de Ciencias"
  },
  {
    "objectID": "project/proyecto-1.html",
    "href": "project/proyecto-1.html",
    "title": "Proyecto Mitad del Curso",
    "section": "",
    "text": "Introducción\nEn esta etapa de l curso, pondrás en práctica los conocimientos adquiridos hasta ahora en R para abordar un problema real. El trabajo será desarrollado en equipos de 3 a 5 estudiantes. La idea es que desarrolles un proyecto completo, desde la definición del problema hasta la presentación de los resultados. Este proyecto tiene un peso asignado de 20% sobre el total de la calificación del curso.\nLa calificación será con un tope de 20 puntos, desagregados de esta manera:\n\n5 puntos: originalidad y claridad del proyecto (identificación problema, plantear una pregunta de investigación).\n5 puntos: calidad del código (limpieza datos, procesamiento, análisis exploratorio)\n5 puntos: comunicación de los resultados (gráficos, reporte quarto)\n5 puntos resto: (documentar proceso, compartir proyecto)\n\n\n\nObjetivos del Proyecto\n\nIdentificar un problema: Seleccionar un problema relevante y actual, preferiblemente relacionado con Venezuela, que pueda ser analizado con los datos disponibles.\nPlantear una pregunta de investigación: Formular una pregunta clara y concisa que el proyecto buscará responder.\nObteneción y limpiar los datos: Recolectar los datos necesarios y realizar las tareas de limpieza y transformación requeridas.\nRealizar el análisis exploratorio de datos: Explorar los datos para identificar patrones, tendencias y relaciones entre las variables.\nModelar los datos: Aplicar técnicas de modelado adecuadas para responder a la pregunta de investigación (opcional, es un valor agregado, no es necesario).\nVisualizar los resultados: Crear visualizaciones claras y efectivas para comunicar los hallazgos.\nDocumentar el proceso: Elaborar un informe que describa cada una de las etapas del proyecto, incluyendo el código utilizado.\nCompartir el proyecto: Crear un repositorio en una plataforma de control de versiones (GitHub) para compartir el código y los resultados con otros. (opcional, es un valor agregado)\n\n\n\nEspecificaciones del Proyecto\n\nContenido: El proyecto debe abordar distintas herramientas de R aprendidas hasta el momento.\nCalidad del código: Se evaluará la claridad, eficiencia y organización del código.\nEstructura: El proyecto debe seguir las buenas prácticas de desarrollo en RStudio, incluyendo la organización de archivos, el uso de funciones y la documentación del código.\nReproducibilidad: El proyecto debe ser reproducible, es decir, cualquier persona con los mismos datos y el código fuente debería obtener los mismos resultados (opcional, es un valor agregado).\nComunicación: Los resultados deben ser presentados de manera clara y concisa, utilizando gráficos, tablas y texto explicativo.\n\n\n\nSugerencias de Temas\n\nSe abordará en clase al momento de asignar el proyecto y los grupos.\n\n\n\nEntrega\nEl proyecto final deberá entregarse en un formato reproducible (por ejemplo, un archivo Quarto), incluyendo:\n\nInforme: Un documento que describa el problema, la metodología utilizada, los resultados y las conclusiones (opcional).\nCódigo Carpeta Proyecto: El código R utilizado para realizar el análisis.\nPresentación: Una presentación breve que resuma los principales hallazgos del proyecto.\nRepositorio (opcional): Un enlace al repositorio en GitHub o una plataforma similar.\nFecha Entrega:\nSemana intermedia del Curso (fecha precisa por definir).",
    "crumbs": [
      "Proyectos",
      "Proyectos mitad de curso"
    ]
  },
  {
    "objectID": "curso-programa.html",
    "href": "curso-programa.html",
    "title": "Contenido (sujeto a modificaciones)",
    "section": "",
    "text": "Se detallan la mayoría de los contenidos de programación que serán abordados. Es necesario destacar que en cada actividad serán abordados transversalmente contenidos asociados a problemas que son estudiados por la ciencia de datos. Se espera en cada clase incorporar ejercicios prácticos que desarrollen las habilidades de programación en computadoras.\n\nClase 1:\n\nObjetivo: sesión inicial del curso donde se presentan los temas a abordar y la instalación de R y RStudio.\nContenido:\n\nPor qué R\nCiclo de un proyecto de ciencia de datos\nEntornos de Programación\nInstalar R según sistema operativo\nRStudio: proyecto, estructura, ventanas, directorios de trabajo, RStudio en línea.\nR Vs. RStudio\nProyectos de Trabajo: crear proyecto, ambiente, directorio de trabajo, estructura de proyectos, ventanas. Consumo de memoria\nArchivos: Scripts R y Rmd.\n\nEjercicio práctico: Crear un proyecto y dentro del proyecto un script “hello word.R”\n\n\n\nClase 2:\n\nObjetivo: Comprender el entorno de programación. Aprender a instalar paquetes, cargarlos.\nContenido:\n\nCrear objetos, variables, nombres variables\nFundamentos básicos de programación en R. Funciones precargadas\nConsola / Script\nCrear scripts.\nArchivos: R, Quarto, RData y RMD.\nRbase\n\nEjercicio práctico:\n\nCrear scripts\nCrear variables de distintos tipos\nCorregir variables\n\n\n\n\nClase 3:\n\nObjetivo: Conocer la estructura de datos denominada “vector”\nContenido:\n\nPaquetes: instalación y carga de paquetes\nRepositorios de paquetes\nVectores: logical, character, integer, numeric, date. Función mode\nCómo pedir ayuda\n\nEjercicio práctico:\n\nCrear vectores de distintos tipo “mode”\n\n\n\n\nClase 4:\n\nObjetivo: Seguir conociendo las principales estructuras de datos que se manejan dentro de R\nContenido:\n\n“Coerce” dentro de los vectores. Función class\nTrabajando Factores\nMatrices\nListas\nAcceder a elementos de vectores, listas: índices y atributos. Función print\n\nEjercicio práctico:\n\nPracticar elementos de coerce, accesos a elementos de listas.\n\n\n\n\nClase 5:\n\nPresentación: Conocer la estructura de datos Data Frame y sus atributos\nObjetivo:\n\nData Frames\nImportar datos 1- Función read_csv\nAcceso elementos Data Frame\nVisualizar parcial o totalmente, función view\nFunciones str, summary y tabulaciones cruzadas\n\nEjercicio práctico:\n\nCrear una Data Frame\n\n\n\n\nClase 6:\n\nObjetivo: Comprender cómo obtener subconjuntos condicionados sobre vectores o Data Frames y tibbles\nContenido:\n\nOperadores lógicos, tabla de la verdad\nProgramación funcional\nSubsets\nPresentación dplyr\nAplicación de filtros via dplyr filter\n\nEjercicio práctico:\n\nSubsets y Filter de Data Frames precargadas\n\n\n\n\nClase 7:\n\nObjetivo: Procesamientos de datos encadenados e introducción a la generación de reportes\nContenido:\n\nEncadenamiento en los procesamientos: operador pipe %&gt;%\nCarga de datos desde excel\nGráfico de frecuencia de una variable, Análisis Exploratorio de datos\nAplicación filtros en data frames por funciones máx, min, mean\nPreparar un reporte estático e interactivo\n\nEjercicio práctico:\n\nCrear un reporte con un subset de datos\n\n\n\n\nClase 8:\n\nObjetivo: Creando datos derivados- mutate aplicado a datos de tipo fechas\nContenido:\n\nData Frames aplicar mutate -1\nTrabajando con fechas: month, day, year, convertir formatos POSIX\n\nEjercicio práctico:\n\ncrear columnas con día, mes y año en una Data Frame\n\n\n\n\nClase 9:\n\nObjetivo: Creando datos derivados- mutate aplicado a datos de tipo “string”\nContenido:\n\nData Frames aplicar mutate -2\nTrabajando con strings: str_detect, str_split, str_squish, entre otras.\nExpresiones regulares\nSeparate\n\nEjercicio práctico:\n\nUsar separate dentro de una data frame vs mutate\n\n\n\n\nClase 10:\n\nObjetivo: Comprender funciones condicionales vectorizadas\nContenido:\n\nBinds por columa o por fila.\nFunción ifelse\nFunción case_when\nArrange\n\nEjercicio práctico:\n\nLectura de datos, juntar Data Frames y aplicar condicional.\n\n\n\n\nClase 11:\n\nObjetivo: Comprender un flujo completo de importar y transformar los datos con el pipe operator\nContenido:\n\nFunción select\nAplicación de un pipeline compuesto\n\nEjercicio práctico:\n\nAplicar lo aprendido en bloques del 7 al 11.\n\n\n\n\nClase 12:\n\nObjetivo: agrupación de datos dentro de una Data Frame y obtención de valores sumarios\nContenido:\n\nAgrupación de datos: group-by\nPresentación estructura tibble\nSumarizar datos: summarise\nDesagrupar\n\nEjercicio práctico:\n\nAgrupar una Data Frame por variable categórica y obtener valores sumarios\n\n\n\n\nClase 13:\n\nObjetivo: comprender los datos representados en formatos wide o longer\nContenido:\n\nPivoteo de datos\nFormatos de datos long\nFormatos de datos wide\n\nEjercicio práctico:\n\nTranformar de formato wide a long una Data Frame\n\n\n\n\nClase 14:\n\nObjetivo: comprender las familia de las funciones vectorizadas apply\nContenido:\n\nProgramación funcional:\n\nsapply\nlapply\napply\ntapply\n\n\nEjercicio práctico:\n\nAplicar lapply sobre subset de columnas de una Data Frame\n\n\n\n\nClase 15:\n\nObjetivo: Introducción al análisis exploratorio de datos e imputación de datos faltantes.\nContenido:\n\nLectura de datos JSON\nInspección de datos\nIntroducción Análisis Exploratorio de Datos\nImputación de datos faltantes\n\nEjercicio práctico:\n\nRealizar un reporte y análisis exploratorio sobre un conjunto de datos no mayor 5 variables\n\n\n\n\nClase 16:\n\nObjetivo: Abordar las estructuras de control y los ciclos\nContenido:\n\nEstructuras de control if, else\nLoops, whiles\nGráficos en Plotly\n\nEjercicio práctico:\n\nMediante un loop generar distintos gráficos y guardarlos.\n\n\n\n\nClase 17:\n\nObjetivo: comprender la lógica de las funciones\nContenido:\n\nCrear funciones: argumentos, default, return\nVectorizados Vs. Ciclos\n\nEjercicio práctico:\n\nCrear dos funciones que contengan una estructura de control\n\n\n\n\nClase 18:\n\nObjetivo: Comprender los tipos de gráficos y sus usos. Introducción al sistema ggplot2.\nContenido:\n\nSistema gráfico ggplot2: grammar of graphics 1\n\nTipos de gráficos\nLeyendas\n\n\nEjercicio práctico:\n\nCrear 2 gráficos: 1 de barra, 1 de líneas\n\n\n\n\nClase 19:\n\nObjetivo: Comprender los tipos de gráficos y sus usos. Introducción al sistema ggplot2.\nContenido:\n\nSistema gráfico ggplot2: grammar of graphics 2\n\nFacets\nAdaptación colores\n\n\nEjercicio práctico:\n\nCrear facets con paleta de colores personalizada.\n\n\n\n\nClase 20:\n\nObjetivo: familia de funciones vectorizadas 2\nContenido:\n\nFunciones vectorizadas purrr\nBind_rows, bind_cols\nLecturas en bucle\n\nEjercicio práctico:\n\nLectura de datos en bucle y conformación de una estructura de datos unificada.\n\n\n\n\nClase 21:\n\nObjetivo: Comprender la lógica de joins (unión) de Data Frames.\nContenido:\n\njoins de datos\nRegresión lineal\n\nEjercicio práctico:\n\nAplicar un join de datos y obtener una regresión lineal por grupo de datos\n\n\n\n\nClase 22:\n\nObjetivo: Aspectos generales de recursos en línea. Uso de R en paralelo con python.\nContenido:\n\nTrabajando con repositorios de códigos\nControl de Versiones\nCómo pedir ayuda\nDónde pedir ayuda\n\nEjercicio práctico:\n\nsegún dinámica de las sesiones previas\n\n\n\n\nClase 23:\n\nObjetivo: Introducción al machine learning supervisado y no supervisado\nContenido:\n\nIntroducción al machine learning con paquete caret.\n\nAprendizaje supervisado: Arboles de decisión\nAprendizaje no supervisado: clustering\n\n\nEjercicio práctico:\n\nCrear clusters sobre un conjunto de datos\n\n\n\n\nClase 24:\n\nObjetivo: crear aplicaciones web interactivas con Shiny 1\nContenido:\n\nIntroducción a Shiny 1: Aplicaciones web interactivas\n\nestructura UI - Server\nPrincipios de programación reactiva\n\n\nEjercicio práctico:\n\ncrear una aplicación web interactiva mínima.\n\n\n\n\nClase 25:\n\nObjetivo: crear aplicaciones web interactivas con Shiny 2\nContenido:\n\nIntroducción a Shiny 2: Aplicaciones web interactivas\n\nSliders, inputs de texto, inputs numéricos, render de tablas y gráficos\n\n\nEjercicio práctico:\n\ncontinúa de sesión anterior: crear una aplicación web interactiva mínima 2\n\n\n\n\nClase 26 a la 32:\n\nObjetivo: trabajar en proyecto final de la materia donde se aplican todos los contenidos revisados con la finalidad de crear un producto basado en el uso de datos.",
    "crumbs": [
      "Sobre el Curso",
      "Contenido"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Actividades",
    "section": "",
    "text": "SEMANA\nFECHA\nTEMA\nMATERIALES\n\n\n\n\n1\nmié, 16 oct.\nPresentación Curso\n🖥️ láminas clase 01\n\n\n2\nlun, 21 oct.\nConociendo R y RStudio\n🖥️ láminas clase 02 🎥video crear proyecto\n\n\n\n\nmié, 23 oct.\n\n\n🖥️ láminas clase 03  💻/scripts clase 3\n\n\n3\nlun, 28 oct.\nR Base: funciones precargadas / Cónsola\n💻 clase 4: tarea  💻 clase 4: script  💻 clase 4: 2 da parte  💻 clase 4: ejemplo reporte interactivo\n\n\n\n\nmié, 30 oct.\nEstructuras de Datos / Vectores\n🖥️ láminas clase 05 🖥️ láminas clase 05: Parte Variables 💻clase 05 versión qmd: Parte Variables 💻 clase 5: tarea  💻 clase 5: conceptos complementarios versión qmd\n\n\n3\nlun, 4 nov.\nConstruir Funciones y Data Frames\n🖥️ láminas clase 06  💻 clase 6 versión qmd  💻 clase 6: práctica 1- versión qmd  💻 clase 6: práctica 1- versión site  🎥video render Quarto 💻 clase 6: práctica 2- versión qmd  💻 clase 6: práctica 2- versión site \n\n\n\n\nmié, 6 nov.\nDF subsetting; Ayudas\n🖥️ láminas clase 07 💻 clase 7: tarea \n\n\n4\nlun, 11 nov.\nInspección DF´s / Seleccionar Valores, Subsettings-cont\n🖥️ láminas clase 08 💻 clase 8 versión qmd  💻 clase 8: tarea \n\n\n\n\nmié, 13 nov.\nPaths o Rutas de trabajo\n🖥️ láminas clase 09\n\n\n5\nlun, 18 nov.\nTrabajando con Data Frames por filas\n🖥️ láminas clase 10\n\n\n\n\nmié, 20 nov.\nTrabajando con Data Frames por columnas\n🖥️ láminas clase 11\n\n\n6\nlun, 25 nov.\n\n\n\n\n\n\n\n\nmié, 27 nov.\n\n\n\n\n\n\n7\nlun, 2 dic.\n\n\n\n\n\n\n\n\nmié, 4 dic.\n\n\n\n\n\n\n8\nlun, 9 dic.\n\n\n\n\n\n\n\n\nmié, 11 dic.\n\n\n\n\n\n\n9\nlun, 16 dic.\n\n\n\n\n\n\n\n\nmié, 18 dic.\n\n\n\n\n\n\n10\nlun, 13 ene.\n\n\n\n\n\n\n\n\nmié, 15 ene.\n\n\n\n\n\n\n11\nlun, 20 ene.\n\n\n\n\n\n\n\n\nmié, 22 ene.\n\n\n\n\n\n\n12\nlun, 27 ene.\n\n\n\n\n\n\n\n\nmié, 29 ene.\n\n\n\n\n\n\n13\nlun, 3 feb.\n\n\n\n\n\n\n\n\nmié, 5 feb.\n\n\n\n\n\n\n14\nlun, 10 feb.\n\n\n\n\n\n\n\n\nmié, 12 feb.\n\n\n\n\n\n\n15\nsáb, 15 feb.\n\n\n\n\n\n\n\n\nlun, 17 feb.",
    "crumbs": [
      "Sobre el Curso",
      "Actividades"
    ]
  },
  {
    "objectID": "project/proyecto-2.html",
    "href": "project/proyecto-2.html",
    "title": "Proyecto Final del Curso",
    "section": "",
    "text": "Introducción\nEn este proyecto, tendrás la oportunidad de aplicar todos los conocimientos adquiridos a lo largo del curso para resolver un problema real y relevante. El trabajo será desarrollado en equipos de 3 a 5 estudiantes. Además, diseñarás un póster atractivo que resuma tu investigación y crearás una presentación para compartir tus resultados con tus compañeros y la comunidad en general. Los resultados de las investigaciones se mostrarán en la página del Curso para promocionar el talento de los estudiantes de la Escuela de Economía de la UCV.\nEste proyecto tiene un peso asignado de 30% sobre el total de la calificación del curso.\nLa calificación será con un tope de 30 puntos, desagregados de esta manera:\n\n5 puntos: originalidad y claridad del proyecto (identificación problema, plantear una pregunta de investigación).\n5 puntos: calidad del código (limpieza datos, procesamiento, análisis exploratorio)\n5 puntos: comunicación de los resultados (gráficos, reporte quarto)\n5 puntos: presentación en público del proyecto\n5 puntos póster (afiche)\n5 puntos resto: (documentar proceso, compartir proyecto)\n\n\n\nObjetivos del Proyecto\n\nInvestigación: Realiza un análisis de datos exhaustivo, utilizando las técnicas aprendidas en clase.\nObteneción y limpiar los datos: Recolectar los datos necesarios y realizar las tareas de limpieza y transformación requeridas.\nRealizar el análisis exploratorio de datos: Explorar los datos para identificar patrones, tendencias y relaciones entre las variables.\nModelar los datos: Aplicar técnicas de modelado adecuadas para responder a la pregunta de investigación (opcional, es un valor agregado, no es necesario).\nVisualizar los resultados: Crear visualizaciones claras y efectivas para comunicar los hallazgos.\nComunicación efectiva: Diseña un póster visualmente atractivo que comunique de manera clara y concisa los objetivos, metodología, resultados y conclusiones de tu investigación.\nDocumentar el proceso: Elaborar un informe que describa cada una de las etapas del proyecto, incluyendo el código utilizado.\nPresentación en público: Prepara una presentación breve para exponer tu proyecto ante tus compañeros y recibir retroalimentación.\nColaboración: Comparte tu trabajo con la comunidad del curso, contribuyendo a un repositorio de proyectos.\nCompartir el proyecto: Crear un repositorio en una plataforma de control de versiones ( GitHub) para compartir el código y los resultados con otros.\n\n\n\nEspecificaciones del Proyecto\n\nContenido: El proyecto debe abordar distintas herramientas de R aprendidas hasta el momento.\nTema: Elige un tema de tu interés relacionado con Venezuela que pueda ser abordado con los datos disponibles (obligatorio).\nCalidad del código: Se evaluará la claridad, eficiencia y organización del código.\nEstructura: El proyecto debe seguir las buenas prácticas de desarrollo en RStudio, incluyendo la organización de archivos, el uso de funciones y la documentación del código.\nPóster: Diseña un póster que incluya los siguientes elementos: título, introducción, objetivos, metodología, resultados (visualizaciones), conclusiones y referencias.\nPresentación: Prepara una presentación de 5-7 minutos para exponer tu proyecto.\nInforme: Entrega un informe escrito que detalle el proceso de investigación, los resultados y las conclusiones (opcional).\nReproducibilidad: El proyecto debe ser reproducible, es decir, cualquier persona con los mismos datos y el código fuente debería obtener los mismos resultados (opcional, es un valor agregado).\nComunicación: Los resultados deben ser presentados de manera clara y concisa, utilizando gráficos, tablas y texto explicativo.\nRepositorio: Comparte tu código y los datos en un repositorio en línea (por ejemplo, GitHub).\n\n\n\nSugerencias de Temas\n\nSe abordará en clase al momento de asignar el proyecto y los grupos.\n\n\n\nEntrega:\n\nInforme: Un documento que describa el problema, la metodología utilizada, los resultados y las conclusiones (opcional).\nCódigo Carpeta Proyecto: El código R utilizado para realizar el análisis.\nPresentación: Una presentación breve que resuma los principales hallazgos del proyecto.\nRepositorio: Un enlace al repositorio en GitHub o una plataforma similar.\nPóster- Afiche: lámina (dimensiones por definir) con lo indicado anteriormente\n\n\n\nFecha Entrega:\nSemana final del Curso (fecha precisa por definir).",
    "crumbs": [
      "Proyectos",
      "Proyecto Final de Curso"
    ]
  },
  {
    "objectID": "apoyo/clase_03_apoyo.html",
    "href": "apoyo/clase_03_apoyo.html",
    "title": "Clase 3- Apoyo",
    "section": "",
    "text": "Este material fue compilado y adaptado por José M. Avendaño teniendo parcialmente códigos y conceptos desarrollados por Diego Kozlowski y Juan Barriola para un curso de R."
  },
  {
    "objectID": "apoyo/clase_03_apoyo.html#r-base",
    "href": "apoyo/clase_03_apoyo.html#r-base",
    "title": "Clase 3- Apoyo",
    "section": "R base",
    "text": "R base\nCon R base nos referimos a los comandos básicos que vienen incorporados en el R, sin necesidad de cargar librerías."
  },
  {
    "objectID": "apoyo/clase_03_apoyo.html#uso-de-la-consola-como-una-calculadora--operaciones-aritméticas",
    "href": "apoyo/clase_03_apoyo.html#uso-de-la-consola-como-una-calculadora--operaciones-aritméticas",
    "title": "Clase 3- Apoyo",
    "section": "Uso de la consola como una calculadora- operaciones aritméticas",
    "text": "Uso de la consola como una calculadora- operaciones aritméticas\n\nEn la consola podemos hacer calculos tal cual si estuviesemos usando una calculadora\n\n\n5*3+6\n\n[1] 21\n\n5*(3+6)\n\n[1] 45\n\n\ntener presente el uso de los paréntesis y el orden en que serán ejecutadas las operaciones matemáticas"
  },
  {
    "objectID": "apoyo/clase_03_apoyo.html#definición-de-objetos",
    "href": "apoyo/clase_03_apoyo.html#definición-de-objetos",
    "title": "Clase 3- Apoyo",
    "section": "Definición de objetos",
    "text": "Definición de objetos\nLos Objetos/Elementos constituyen la categoría esencial del R. De hecho, todo en R es un objeto, y se almacena con un nombre específico que no debe poseer espacios. Un número, un vector, una función, la progresión de letras del abecedario, una base de datos, un gráfico, constituyen para R objetos de distinto tipo. Los objetos que vamos creando a medida que trabajamos pueden visualizarse en el panel derecho superior de la pantalla (el Environment).\nEl operador &lt;- (Alt + Guión) sirve para definir un objeto. A la izquierda del &lt;- debe ubicarse el nombre que tomará el elemento a crear. Del lado derecho debe ir la definición del mismo.\n\nA &lt;- 1\n\nPor ejemplo, podemos crear el elemento A, cuyo valor será 1. Para esto, debemos correr el código presionando Ctrl + Enter, con el cursor ubicado en cualquier parte de la línea. Al definir un elemento, el mismo queda guardado en el ambiente del programa, y podrá ser utilizado posteriormente para observar su contenido o para realizar una operación con el mismo.\n\nA \n\n[1] 1\n\nA+6\n\n[1] 7\n\n\nAl correr una linea con el nombre del objeto, la consola del programa nos muestra su contenido. Entre corchetes observamos el número de orden del elemento en cuestión. Si corremos una operación, la consola nos muestra el resultado de la misma.\nEl operador = es equivalente a &lt;-, pero en la práctica no se utiliza para la definición de objetos.\n\nB = 2\nB\n\n[1] 2\n\n\n&lt;- es un operador Unidireccional, es decir que:\nA &lt;- B implica que A va tomar como valor el contenido del objeto B, y no al revés.\n\nA &lt;- B\nA      # Ahora A toma el valor de B, y B continúa conservando el mismo valor\n\n[1] 2\n\nB\n\n[1] 2"
  },
  {
    "objectID": "apoyo/clase_03_apoyo.html#variables",
    "href": "apoyo/clase_03_apoyo.html#variables",
    "title": "Clase 3- Apoyo",
    "section": "Variables",
    "text": "Variables\nPueden contener cualquier estructura de datos como una matriz, un valor numérico, un texto, un vector y otras que se verán más adelante. Son creadas mediante el uso del operador de asignación."
  },
  {
    "objectID": "apoyo/clase_03_apoyo.html#funciones-precargadas",
    "href": "apoyo/clase_03_apoyo.html#funciones-precargadas",
    "title": "Clase 3- Apoyo",
    "section": "Funciones Precargadas:",
    "text": "Funciones Precargadas:\nRBase cuenta con diversas funciones que ya vienen definidas con el lenguaje de programación. Muchas de ellas son comandos básicos para realizar rutinas de programación. Otro lote de funciones, distinto a otros lenguajes, son funciones para aplicar métodos inherentes a la estadística. Cuando se vea un texto en un script que está asociado a un verbo, o proceso, y posterior al nombre, viene acompañado de un signo de inicio de paréntesis y finaliza con otro signo de cierre de paréntesis, se está en presencia de una función. En algunos casos entre ambos signos de paréntesis aparecerá un texto que puede estar entre comillas, sin comillas y en otros casos varios textos separados por comas. Cuando se da este último caso se refiere a que la función necesita distintos argumentos para poder ejecutarse.\nEjemplos:\n\nFunción sin argumento\n\nSys.Date()\n\n[1] \"2024-10-23\"\n\n\nFunción con un argumento\n\nhead(mtcars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n\nFunción con múltiples argumentos\n\n# asignación variables\nvelocidad &lt;- cars$speed\ndistancia &lt;- cars$dist\n\n# crear un gráfico de tipo scatter plot (diagrama de dispersión )\nplot(velocidad, distancia)"
  },
  {
    "objectID": "apoyo/clase_03_apoyo.html#tipos-de-datos",
    "href": "apoyo/clase_03_apoyo.html#tipos-de-datos",
    "title": "Clase 3- Apoyo",
    "section": "Tipos de datos",
    "text": "Tipos de datos\nCuando queremos saber con cuál tipo de datos estamos trabajando necesitamos usar la función class()\n```{r data_types, include=TRUE, echo=TRUE\nLas funciones son series de procedimientos estandarizados, que toman como imput determinados argumentos a fijar por el usuario, y devuelven un resultado acorde a la aplicación de dichos procedimientos. Su lógica de funcionamiento es:\nfuncion(argumento1 = arg1, argumento2 = arg2)\n\nOtros ejemplos de funciones:\n\npaste() : concatena una serie de caracteres, pudiendo indicarse cómo separar a cada uno de ellos\n\npaste0(): concatena una serie de caracteres sin separar\nsum(): suma de todos los elementos de un vector\n\nmean() promedio aritmético de todos los elementos de un vector\n\n\npaste(\"Pega\", \"estas\", 4, \"palabras\", sep = \" \")\n\n[1] \"Pega estas 4 palabras\"\n\n#Puedo concatenar caracteres almacenados en objetos\nA= 'nombre'\nB= 'apellido'\nC= 'ciudad'\npaste(A, B, C, sep = \"**\")\n\n[1] \"nombre**apellido**ciudad\"\n\n# Paste0 pega los caracteres sin separador\npaste0(A, B, C)\n\n[1] \"nombreapellidociudad\"\n\n1:5\n\n[1] 1 2 3 4 5\n\nsum(1:5)\n\n[1] 15\n\nmean(1:5, na.rm = TRUE)\n\n[1] 3"
  },
  {
    "objectID": "apoyo/clase_03_apoyo.html#vectores",
    "href": "apoyo/clase_03_apoyo.html#vectores",
    "title": "Clase 3- Apoyo",
    "section": "Vectores",
    "text": "Vectores\nSon colecciones de elementos que tienen que ser exclusivamente del mismo tipo, de la misma clase. Se usa la c () para declarar un vector. Los elementos que conforman el vector van separados por comas. Los vectores pueden, y es lo más común, les asignamos nombre como lo vimos con las variables. Incluso podemos tener vectores con una solo elemento (que de por si son las variables que ya estudiamos)."
  },
  {
    "objectID": "apoyo/clase_03_apoyo.html#tipos-de-vectores",
    "href": "apoyo/clase_03_apoyo.html#tipos-de-vectores",
    "title": "Clase 3- Apoyo",
    "section": "Tipos de vectores",
    "text": "Tipos de vectores\n\nvectores - numeric\nSi queremos preguntar lo hacemos con la función is.numeric()\n\nx=10\nis.numeric(x)\n\n[1] TRUE\n\n\nEn la lámina anterior vimos que el valor que retornó class(x) fue “numeric”.\n\nNúmericos: son aquellos que incluyen números enteros y decimales. En otros lenguajes se les conocen como números de tipo “float” y “double”.\n\n\nx &lt;- 2\n\nclass(x)\n\n[1] \"numeric\"\n\n\n\n\nvectores - integer\n\nEnteros: hay casos en los que es necesario trabajar con números enteros sin que contenga ningún decimal. Estos números se declaran con el uso de una L posterior al número.\n\n\ny &lt;- 2L\ny\n\n[1] 2\n\nclass(y)\n\n[1] \"integer\"\n\n\nEjemplo de una operación:\n\nx &lt;- 2.7\nclass(x)\n\n[1] \"numeric\"\n\ny &lt;- 3L\nclass(y)\n\n[1] \"integer\"\n\n\n\n\nvectores - lógicos\n\nLógicos: Sirven para representar datos que solo pueden tener uno de estos dos valores\n\nverdadero - TRUE\nfalso - FALSE\n\n\n\n\nOperadores lógicos:\n\n\\(&gt;\\) (mayor a)\n\\(&gt;=\\) (mayor o igual a)\n\\(&lt;\\) (menor a)\n\\(&lt;=\\) (menor o igual a)\n\\(==\\) (igual a)\n\\(!=\\) (distinto a)\n\n\n# Redefinimos los valores A y B\nA &lt;- 10\nB &lt;- 20\n\n# Realizamos comparaciones lógicas\nA &gt;  B\n\n[1] FALSE\n\nA &gt;= B\n\n[1] FALSE\n\nA &lt;  B\n\n[1] TRUE\n\nA &lt;= B\n\n[1] TRUE\n\nA == B\n\n[1] FALSE\n\nA != B\n\n[1] TRUE\n\nC &lt;- A != B\nC\n\n[1] TRUE\n\n\nComo muestra el último ejemplo, el resultado de una operación lógica puede almacenarse como el valor de un objeto.\n\nx &lt;- 2.7\ny &lt;-3L\nz &lt;- x==y\nz\n\n[1] FALSE\n\nclass(z)\n\n[1] \"logical\"\n\n\nacabamos de usar el operador ‘==’ que nos sirve para hacer una comparación de igualdad entre dos objetos. Lo que estamos es preguntando si son iguales el uno al otro y la respuesta que obtenemos es de tipo lógica booleana TRUE o FALSE\n\nTRUE*4\n\n[1] 4\n\nFALSE*2\n\n[1] 0\n\n\nacabamos de ver coerción. Forzar a un cambio de un tipo de dato en otro tipo de dato. Los TRUE pueden ser interpretados mediante la coerción como 1 y los FALSE como 0\n\n# dos es igual a 3?\n2==3\n\n[1] FALSE\n\n# dos es distinto de tres? (tener presente que el ! \n# precediendo al igual quiere decir que es lo inverso \n# al igual, es decir, distinto)\n2!=3\n\n[1] TRUE\n\n#dos es menor que tres?\n2&lt;3\n\n[1] TRUE\n\n\n\n#juan es igual a pedro? (hablamos del texto)\n'juan'=='pedro'\n\n[1] FALSE\n\n# el texto jose es igual a jose?\n'jose'=='jose'\n\n[1] TRUE\n\n#dos es igual a dos?\n2==2\n\n[1] TRUE\n\n\n\n# a es menor que b?\n'a'&lt;'b'\n\n[1] TRUE\n\n# a es mayor que 8?\n'a'&gt;8\n\n[1] TRUE\n\n# a es igual a 1?\n'a'==1\n\n[1] FALSE\n\n\n\n\nvectores - character\n\nDatos de caracteres: se usan para almacenar cadenas de caracteres como por ejemplo un nombre, una oración, o cualquier valor que el computador no deba entender como un objeto lógico, número entero, númerico, matriz, etc. El valor debe estar declarado entre comillas simples ” o comilla sencilla ’. Prestar atención a no usar la tipo tilde ´ o cualquiera diferente a las mencionadas\n\n\nnombre &lt;- 'jose miguel'\nno_es_numero &lt;- '2'\nno_es_numero\n\n[1] \"2\"\n\nclass(no_es_numero)\n\n[1] \"character\"\n\nnchar(x)\n\n[1] 3\n\n\n\nnchar('hola')\n\n[1] 4\n\nnchar(5)\n\n[1] 1\n\nnchar(1532)\n\n[1] 4\n\n\n\n\nvectores - Date\n\nFechas El trabajo con las fechas puede llegar a ser un tanto complejo y será abordado de forma más intensiva adelante. Revisando algunas de las formas de trabajar con fechas tenemos el uso de las funciones Date y POSIXct\n\nLa función Date solo almacena la fecha calendario\nLa función POSIXct puede almacenar en conjunto hora y fecha\n\n\nLas fechas se representan, en cualquiera de los casos como la cantidad de días (date) o segundos (POSIXct) que han transcurrido desde el 1 ero de enero de 1970.\n\nfecha1 &lt;- as.Date('2020-01-31')\nfecha1\n\n[1] \"2020-01-31\"\n\nclass(fecha1)\n\n[1] \"Date\"\n\nas.numeric(fecha1)\n\n[1] 18292\n\n\n\nfecha2 &lt;- as.POSIXct('2020-01-31 11:15')\nfecha2\n\n[1] \"2020-01-31 11:15:00 -04\"\n\nas.numeric(fecha2)\n\n[1] 1580483700\n\nclass(fecha2)\n\n[1] \"POSIXct\" \"POSIXt\""
  },
  {
    "objectID": "apoyo/clase_03_apoyo.html#vectores-repaso",
    "href": "apoyo/clase_03_apoyo.html#vectores-repaso",
    "title": "Clase 3- Apoyo",
    "section": "Vectores repaso:",
    "text": "Vectores repaso:\n\nnumeros &lt;- c(1,2,5,7)\nnumeros\n\n[1] 1 2 5 7\n\nclass(numeros)\n\n[1] \"numeric\"\n\ntextos &lt;- c('juan','eliana','maria')\nclass(textos)\n\n[1] \"character\"\n\ntextos\n\n[1] \"juan\"   \"eliana\" \"maria\" \n\nlogicos &lt;- c(TRUE, FALSE, TRUE)\nclass(logicos)\n\n[1] \"logical\"\n\nis.numeric(numeros)\n\n[1] TRUE\n\nis.logical(textos)\n\n[1] FALSE\n\nis.character(textos)\n\n[1] TRUE\n\n\n\nunico &lt;- c('aula')\nunico\n\n[1] \"aula\"\n\nclass(unico)\n\n[1] \"character\"\n\nerrado &lt;- c('texto', 1)\nerrado\n\n[1] \"texto\" \"1\"    \n\nclass(errado)\n\n[1] \"character\"\n\n\n\nerrado &lt;- c('texto', 1)\nerrado\n\n[1] \"texto\" \"1\"    \n\nclass(errado)\n\n[1] \"character\"\n\n#aplicó la coercion"
  },
  {
    "objectID": "apoyo/clase_03_apoyo.html#estructuras-de-datos-objetos",
    "href": "apoyo/clase_03_apoyo.html#estructuras-de-datos-objetos",
    "title": "Clase 3- Apoyo",
    "section": "Estructuras de Datos/ Objetos:",
    "text": "Estructuras de Datos/ Objetos:\nTodo lo que existe dentro de R es un objeto: funciones, vectores, etc. En R se puede trabajar con una gran cantidad de objetos distintos tanto en su tipo como tenerlos dentro de una sesión de trabajo.\nEstas son algunos de los objetos que contienen datos con los cuales trabajaremos a lo largo del curso.\n\nValores\nVectores\nListas\nData Frames\nTibbles\n\nNo obstante, existen estructuras más complejas que no son de tipo tabular que no serán abordadas como la raster layers."
  },
  {
    "objectID": "apoyo/clase_03_apoyo.html#caracteres-especiales",
    "href": "apoyo/clase_03_apoyo.html#caracteres-especiales",
    "title": "Clase 3- Apoyo",
    "section": "Caracteres especiales",
    "text": "Caracteres especiales\n\nR es sensible a mayúsculas y minúsculas, tanto para los nombres de las variables, como para las funciones y parámetros.\nEl numeral # se utiliza para hacer comentarios. Todo lo que se escribe después del # no es interpretado por R. Se debe utilizar un # por cada línea de código que se desea anular\nLos corchetes [] se utilizan para acceder a un objeto:\n\nen un vector[n° orden]\nen una tabla[fila, columna]\nen una lista[n° elemento]\n\nel signo $ también es un método de acceso. Particularmente, en los dataframes, nos permitira acceder a una determinada columna de una tabla\nLos paréntesis() se utilizan en las funciones para definir los parámetros.\nLas comas , se utilizan para separar los parametros al interior de una función."
  },
  {
    "objectID": "apoyo/clase_03_apoyo.html#nombres-variables",
    "href": "apoyo/clase_03_apoyo.html#nombres-variables",
    "title": "Clase 3- Apoyo",
    "section": "Nombres Variables",
    "text": "Nombres Variables"
  },
  {
    "objectID": "apoyo/clase_03_apoyo.html#ambientes-de-trabajo",
    "href": "apoyo/clase_03_apoyo.html#ambientes-de-trabajo",
    "title": "Clase 3- Apoyo",
    "section": "Ambientes de trabajo",
    "text": "Ambientes de trabajo\nHay algunas cosas que tenemos que tener en cuenta respecto del orden del ambiente en el que trabajamos:\n\nWorking Directory: Es el directorio de trabajo. Pueden ver el suyo con getwd(), es hacia donde apunta el código, por ejemplo, si quieren leer un archivo, la ruta del archivo tiene que estar explicitada como el recorrido desde el Working Directory.\nEnvironment: Esto engloba tanto la información que tenemos cargada en Data y Values, como las librerías que tenemos cargadas mientras trabajamos.\n\nEs importante que mantengamos bien delimitadas estas cosas entre diferentes trabajos, sino:\n\nEl directorio queda referido a un lugar específico en nuestra computadora.\n\n\nSi se lo compartimos a otro se rompe\nSi cambiamos de computadora se rompe\nSi lo cambiamos de lugar se rompe\nSi primero abrimos otro script se rompe\n\n\nTenemos mezclados resultados de diferentes trabajos:\n\n\nNunca sabemos si esa variable/tabla/lista se creo en ese script y no otro\nPerdemos espacio de la memoria\nNo estamos seguros de que el script cargue todas las librerías que necesita\n\nRstudio tiene una herramienta muy útil de trabajo que son los proyectos. Estos permiten mantener un ambiente de trabajo delimitado por cada uno de nuestros trabajos. Es decir:\n\nEl directorio de trabajo se refiere a donde esta ubicado el archivo .Rproj\nEl Environment es específico de nuestro proyecto.\n\nUn proyecto no es un sólo script, sino toda una carpeta de trabajo.\nPara crearlo, vamos al logo de nuevo projecto (Arriba a la derecha de la panatalla), y elegimos la carpeta de trabajo."
  },
  {
    "objectID": "apoyo/clase_03_apoyo.html#tipos-de-archivos-de-r",
    "href": "apoyo/clase_03_apoyo.html#tipos-de-archivos-de-r",
    "title": "Clase 3- Apoyo",
    "section": "Tipos de archivos de R",
    "text": "Tipos de archivos de R\n\nScript: Es un archivo de texto plano, donde podemos poner el código que utilizamos para preservarlo\nRmd: También sirve para guardar el código, pero a diferencia de los scripts, se puede compilar, e intercalar código con resultados (este archivo es un rmarkdown)\nRproject: Es un archivo que define la metadata del proyecto\nRDS y Rdata: Dos formatos de archivos propios de R para guardar datos.\nqmd: archivo de Quarto, el cual es un sistema de publicaciones (página web, blogs, que puede contener códigos y otros objetos resultados de una rutina de programación acompañados por texto legible."
  },
  {
    "objectID": "apoyo/clase_03_apoyo.html#remover-objetos-del-global-environment",
    "href": "apoyo/clase_03_apoyo.html#remover-objetos-del-global-environment",
    "title": "Clase 3- Apoyo",
    "section": "Remover objetos del Global Environment",
    "text": "Remover objetos del Global Environment\nEn caso de querer remover un objeto (todo lo que existe dentro del programa que estamos ejecutando) del “global environment” podemos usar la función rm() teniendo como argumento el nombre del objeto que queremos remover\nrm(“nombre”)"
  },
  {
    "objectID": "scripts/clase_03/clase_03_apoyo.html",
    "href": "scripts/clase_03/clase_03_apoyo.html",
    "title": "Clase 3- Apoyo",
    "section": "",
    "text": "Este material fue compilado y adaptado por José M. Avendaño teniendo parcialmente códigos y conceptos desarrollados por Diego Kozlowski y Juan Barriola para un curso de R."
  },
  {
    "objectID": "scripts/clase_03/clase_03_apoyo.html#r-base",
    "href": "scripts/clase_03/clase_03_apoyo.html#r-base",
    "title": "Clase 3- Apoyo",
    "section": "R base",
    "text": "R base\nCon R base nos referimos a los comandos básicos que vienen incorporados en el R, sin necesidad de cargar librerías."
  },
  {
    "objectID": "scripts/clase_03/clase_03_apoyo.html#uso-de-la-consola-como-una-calculadora--operaciones-aritméticas",
    "href": "scripts/clase_03/clase_03_apoyo.html#uso-de-la-consola-como-una-calculadora--operaciones-aritméticas",
    "title": "Clase 3- Apoyo",
    "section": "Uso de la consola como una calculadora- operaciones aritméticas",
    "text": "Uso de la consola como una calculadora- operaciones aritméticas\n\nEn la consola podemos hacer calculos tal cual si estuviesemos usando una calculadora\n\n\n5*3+6\n\n[1] 21\n\n5*(3+6)\n\n[1] 45\n\n\ntener presente el uso de los paréntesis y el orden en que serán ejecutadas las operaciones matemáticas"
  },
  {
    "objectID": "scripts/clase_03/clase_03_apoyo.html#definición-de-objetos",
    "href": "scripts/clase_03/clase_03_apoyo.html#definición-de-objetos",
    "title": "Clase 3- Apoyo",
    "section": "Definición de objetos",
    "text": "Definición de objetos\nLos Objetos/Elementos constituyen la categoría esencial del R. De hecho, todo en R es un objeto, y se almacena con un nombre específico que no debe poseer espacios. Un número, un vector, una función, la progresión de letras del abecedario, una base de datos, un gráfico, constituyen para R objetos de distinto tipo. Los objetos que vamos creando a medida que trabajamos pueden visualizarse en el panel derecho superior de la pantalla (el Environment).\nEl operador &lt;- (Alt + Guión) sirve para definir un objeto. A la izquierda del &lt;- debe ubicarse el nombre que tomará el elemento a crear. Del lado derecho debe ir la definición del mismo.\n\nA &lt;- 1\n\nPor ejemplo, podemos crear el elemento A, cuyo valor será 1. Para esto, debemos correr el código presionando Ctrl + Enter, con el cursor ubicado en cualquier parte de la línea. Al definir un elemento, el mismo queda guardado en el ambiente del programa, y podrá ser utilizado posteriormente para observar su contenido o para realizar una operación con el mismo.\n\nA \n\n[1] 1\n\nA+6\n\n[1] 7\n\n\nAl correr una linea con el nombre del objeto, la consola del programa nos muestra su contenido. Entre corchetes observamos el número de orden del elemento en cuestión. Si corremos una operación, la consola nos muestra el resultado de la misma.\nEl operador = es equivalente a &lt;-, pero en la práctica no se utiliza para la definición de objetos.\n\nB = 2\nB\n\n[1] 2\n\n\n&lt;- es un operador Unidireccional, es decir que:\nA &lt;- B implica que A va tomar como valor el contenido del objeto B, y no al revés.\n\nA &lt;- B\nA      # Ahora A toma el valor de B, y B continúa conservando el mismo valor\n\n[1] 2\n\nB\n\n[1] 2"
  },
  {
    "objectID": "scripts/clase_03/clase_03_apoyo.html#variables",
    "href": "scripts/clase_03/clase_03_apoyo.html#variables",
    "title": "Clase 3- Apoyo",
    "section": "Variables",
    "text": "Variables\nPueden contener cualquier estructura de datos como una matriz, un valor numérico, un texto, un vector y otras que se verán más adelante. Son creadas mediante el uso del operador de asignación."
  },
  {
    "objectID": "scripts/clase_03/clase_03_apoyo.html#funciones-precargadas",
    "href": "scripts/clase_03/clase_03_apoyo.html#funciones-precargadas",
    "title": "Clase 3- Apoyo",
    "section": "Funciones Precargadas:",
    "text": "Funciones Precargadas:\nRBase cuenta con diversas funciones que ya vienen definidas con el lenguaje de programación. Muchas de ellas son comandos básicos para realizar rutinas de programación. Otro lote de funciones, distinto a otros lenguajes, son funciones para aplicar métodos inherentes a la estadística. Cuando se vea un texto en un script que está asociado a un verbo, o proceso, y posterior al nombre, viene acompañado de un signo de inicio de paréntesis y finaliza con otro signo de cierre de paréntesis, se está en presencia de una función. En algunos casos entre ambos signos de paréntesis aparecerá un texto que puede estar entre comillas, sin comillas y en otros casos varios textos separados por comas. Cuando se da este último caso se refiere a que la función necesita distintos argumentos para poder ejecutarse.\nEjemplos:\n\nFunción sin argumento\n\nSys.Date()\n\n[1] \"2024-10-23\"\n\n\nFunción con un argumento\n\nhead(mtcars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n\nFunción con múltiples argumentos\n\n# asignación variables\nvelocidad &lt;- cars$speed\ndistancia &lt;- cars$dist\n\n# crear un gráfico de tipo scatter plot (diagrama de dispersión )\nplot(velocidad, distancia)"
  },
  {
    "objectID": "scripts/clase_03/clase_03_apoyo.html#tipos-de-datos",
    "href": "scripts/clase_03/clase_03_apoyo.html#tipos-de-datos",
    "title": "Clase 3- Apoyo",
    "section": "Tipos de datos",
    "text": "Tipos de datos\nCuando queremos saber con cuál tipo de datos estamos trabajando necesitamos usar la función class()\n```{r data_types, include=TRUE, echo=TRUE\nLas funciones son series de procedimientos estandarizados, que toman como imput determinados argumentos a fijar por el usuario, y devuelven un resultado acorde a la aplicación de dichos procedimientos. Su lógica de funcionamiento es:\nfuncion(argumento1 = arg1, argumento2 = arg2)\n\nOtros ejemplos de funciones:\n\npaste() : concatena una serie de caracteres, pudiendo indicarse cómo separar a cada uno de ellos\n\npaste0(): concatena una serie de caracteres sin separar\nsum(): suma de todos los elementos de un vector\n\nmean() promedio aritmético de todos los elementos de un vector\n\n\npaste(\"Pega\", \"estas\", 4, \"palabras\", sep = \" \")\n\n[1] \"Pega estas 4 palabras\"\n\n#Puedo concatenar caracteres almacenados en objetos\nA= 'nombre'\nB= 'apellido'\nC= 'ciudad'\npaste(A, B, C, sep = \"**\")\n\n[1] \"nombre**apellido**ciudad\"\n\n# Paste0 pega los caracteres sin separador\npaste0(A, B, C)\n\n[1] \"nombreapellidociudad\"\n\n1:5\n\n[1] 1 2 3 4 5\n\nsum(1:5)\n\n[1] 15\n\nmean(1:5, na.rm = TRUE)\n\n[1] 3"
  },
  {
    "objectID": "scripts/clase_03/clase_03_apoyo.html#vectores",
    "href": "scripts/clase_03/clase_03_apoyo.html#vectores",
    "title": "Clase 3- Apoyo",
    "section": "Vectores",
    "text": "Vectores\nSon colecciones de elementos que tienen que ser exclusivamente del mismo tipo, de la misma clase. Se usa la c () para declarar un vector. Los elementos que conforman el vector van separados por comas. Los vectores pueden, y es lo más común, les asignamos nombre como lo vimos con las variables. Incluso podemos tener vectores con una solo elemento (que de por si son las variables que ya estudiamos)."
  },
  {
    "objectID": "scripts/clase_03/clase_03_apoyo.html#tipos-de-vectores",
    "href": "scripts/clase_03/clase_03_apoyo.html#tipos-de-vectores",
    "title": "Clase 3- Apoyo",
    "section": "Tipos de vectores",
    "text": "Tipos de vectores\n\nvectores - numeric\nSi queremos preguntar lo hacemos con la función is.numeric()\n\nx=10\nis.numeric(x)\n\n[1] TRUE\n\n\nEn la lámina anterior vimos que el valor que retornó class(x) fue “numeric”.\n\nNúmericos: son aquellos que incluyen números enteros y decimales. En otros lenguajes se les conocen como números de tipo “float” y “double”.\n\n\nx &lt;- 2\n\nclass(x)\n\n[1] \"numeric\"\n\n\n\n\nvectores - integer\n\nEnteros: hay casos en los que es necesario trabajar con números enteros sin que contenga ningún decimal. Estos números se declaran con el uso de una L posterior al número.\n\n\ny &lt;- 2L\ny\n\n[1] 2\n\nclass(y)\n\n[1] \"integer\"\n\n\nEjemplo de una operación:\n\nx &lt;- 2.7\nclass(x)\n\n[1] \"numeric\"\n\ny &lt;- 3L\nclass(y)\n\n[1] \"integer\"\n\n\n\n\nvectores - lógicos\n\nLógicos: Sirven para representar datos que solo pueden tener uno de estos dos valores\n\nverdadero - TRUE\nfalso - FALSE\n\n\n\n\nOperadores lógicos:\n\n\\(&gt;\\) (mayor a)\n\\(&gt;=\\) (mayor o igual a)\n\\(&lt;\\) (menor a)\n\\(&lt;=\\) (menor o igual a)\n\\(==\\) (igual a)\n\\(!=\\) (distinto a)\n\n\n# Redefinimos los valores A y B\nA &lt;- 10\nB &lt;- 20\n\n# Realizamos comparaciones lógicas\nA &gt;  B\n\n[1] FALSE\n\nA &gt;= B\n\n[1] FALSE\n\nA &lt;  B\n\n[1] TRUE\n\nA &lt;= B\n\n[1] TRUE\n\nA == B\n\n[1] FALSE\n\nA != B\n\n[1] TRUE\n\nC &lt;- A != B\nC\n\n[1] TRUE\n\n\nComo muestra el último ejemplo, el resultado de una operación lógica puede almacenarse como el valor de un objeto.\n\nx &lt;- 2.7\ny &lt;-3L\nz &lt;- x==y\nz\n\n[1] FALSE\n\nclass(z)\n\n[1] \"logical\"\n\n\nacabamos de usar el operador ‘==’ que nos sirve para hacer una comparación de igualdad entre dos objetos. Lo que estamos es preguntando si son iguales el uno al otro y la respuesta que obtenemos es de tipo lógica booleana TRUE o FALSE\n\nTRUE*4\n\n[1] 4\n\nFALSE*2\n\n[1] 0\n\n\nacabamos de ver coerción. Forzar a un cambio de un tipo de dato en otro tipo de dato. Los TRUE pueden ser interpretados mediante la coerción como 1 y los FALSE como 0\n\n# dos es igual a 3?\n2==3\n\n[1] FALSE\n\n# dos es distinto de tres? (tener presente que el ! \n# precediendo al igual quiere decir que es lo inverso \n# al igual, es decir, distinto)\n2!=3\n\n[1] TRUE\n\n#dos es menor que tres?\n2&lt;3\n\n[1] TRUE\n\n\n\n#juan es igual a pedro? (hablamos del texto)\n'juan'=='pedro'\n\n[1] FALSE\n\n# el texto jose es igual a jose?\n'jose'=='jose'\n\n[1] TRUE\n\n#dos es igual a dos?\n2==2\n\n[1] TRUE\n\n\n\n# a es menor que b?\n'a'&lt;'b'\n\n[1] TRUE\n\n# a es mayor que 8?\n'a'&gt;8\n\n[1] TRUE\n\n# a es igual a 1?\n'a'==1\n\n[1] FALSE\n\n\n\n\nvectores - character\n\nDatos de caracteres: se usan para almacenar cadenas de caracteres como por ejemplo un nombre, una oración, o cualquier valor que el computador no deba entender como un objeto lógico, número entero, númerico, matriz, etc. El valor debe estar declarado entre comillas simples ” o comilla sencilla ’. Prestar atención a no usar la tipo tilde ´ o cualquiera diferente a las mencionadas\n\n\nnombre &lt;- 'jose miguel'\nno_es_numero &lt;- '2'\nno_es_numero\n\n[1] \"2\"\n\nclass(no_es_numero)\n\n[1] \"character\"\n\nnchar(x)\n\n[1] 3\n\n\n\nnchar('hola')\n\n[1] 4\n\nnchar(5)\n\n[1] 1\n\nnchar(1532)\n\n[1] 4\n\n\n\n\nvectores - Date\n\nFechas El trabajo con las fechas puede llegar a ser un tanto complejo y será abordado de forma más intensiva adelante. Revisando algunas de las formas de trabajar con fechas tenemos el uso de las funciones Date y POSIXct\n\nLa función Date solo almacena la fecha calendario\nLa función POSIXct puede almacenar en conjunto hora y fecha\n\n\nLas fechas se representan, en cualquiera de los casos como la cantidad de días (date) o segundos (POSIXct) que han transcurrido desde el 1 ero de enero de 1970.\n\nfecha1 &lt;- as.Date('2020-01-31')\nfecha1\n\n[1] \"2020-01-31\"\n\nclass(fecha1)\n\n[1] \"Date\"\n\nas.numeric(fecha1)\n\n[1] 18292\n\n\n\nfecha2 &lt;- as.POSIXct('2020-01-31 11:15')\nfecha2\n\n[1] \"2020-01-31 11:15:00 -04\"\n\nas.numeric(fecha2)\n\n[1] 1580483700\n\nclass(fecha2)\n\n[1] \"POSIXct\" \"POSIXt\""
  },
  {
    "objectID": "scripts/clase_03/clase_03_apoyo.html#vectores-repaso",
    "href": "scripts/clase_03/clase_03_apoyo.html#vectores-repaso",
    "title": "Clase 3- Apoyo",
    "section": "Vectores repaso:",
    "text": "Vectores repaso:\n\nnumeros &lt;- c(1,2,5,7)\nnumeros\n\n[1] 1 2 5 7\n\nclass(numeros)\n\n[1] \"numeric\"\n\ntextos &lt;- c('juan','eliana','maria')\nclass(textos)\n\n[1] \"character\"\n\ntextos\n\n[1] \"juan\"   \"eliana\" \"maria\" \n\nlogicos &lt;- c(TRUE, FALSE, TRUE)\nclass(logicos)\n\n[1] \"logical\"\n\nis.numeric(numeros)\n\n[1] TRUE\n\nis.logical(textos)\n\n[1] FALSE\n\nis.character(textos)\n\n[1] TRUE\n\n\n\nunico &lt;- c('aula')\nunico\n\n[1] \"aula\"\n\nclass(unico)\n\n[1] \"character\"\n\nerrado &lt;- c('texto', 1)\nerrado\n\n[1] \"texto\" \"1\"    \n\nclass(errado)\n\n[1] \"character\"\n\n\n\nerrado &lt;- c('texto', 1)\nerrado\n\n[1] \"texto\" \"1\"    \n\nclass(errado)\n\n[1] \"character\"\n\n#aplicó la coercion"
  },
  {
    "objectID": "scripts/clase_03/clase_03_apoyo.html#estructuras-de-datos-objetos",
    "href": "scripts/clase_03/clase_03_apoyo.html#estructuras-de-datos-objetos",
    "title": "Clase 3- Apoyo",
    "section": "Estructuras de Datos/ Objetos:",
    "text": "Estructuras de Datos/ Objetos:\nTodo lo que existe dentro de R es un objeto: funciones, vectores, etc. En R se puede trabajar con una gran cantidad de objetos distintos tanto en su tipo como tenerlos dentro de una sesión de trabajo.\nEstas son algunos de los objetos que contienen datos con los cuales trabajaremos a lo largo del curso.\n\nValores\nVectores\nListas\nData Frames\nTibbles\n\nNo obstante, existen estructuras más complejas que no son de tipo tabular que no serán abordadas como la raster layers."
  },
  {
    "objectID": "scripts/clase_03/clase_03_apoyo.html#caracteres-especiales",
    "href": "scripts/clase_03/clase_03_apoyo.html#caracteres-especiales",
    "title": "Clase 3- Apoyo",
    "section": "Caracteres especiales",
    "text": "Caracteres especiales\n\nR es sensible a mayúsculas y minúsculas, tanto para los nombres de las variables, como para las funciones y parámetros.\nEl numeral # se utiliza para hacer comentarios. Todo lo que se escribe después del # no es interpretado por R. Se debe utilizar un # por cada línea de código que se desea anular\nLos corchetes [] se utilizan para acceder a un objeto:\n\nen un vector[n° orden]\nen una tabla[fila, columna]\nen una lista[n° elemento]\n\nel signo $ también es un método de acceso. Particularmente, en los dataframes, nos permitira acceder a una determinada columna de una tabla\nLos paréntesis() se utilizan en las funciones para definir los parámetros.\nLas comas , se utilizan para separar los parametros al interior de una función."
  },
  {
    "objectID": "scripts/clase_03/clase_03_apoyo.html#nombres-variables",
    "href": "scripts/clase_03/clase_03_apoyo.html#nombres-variables",
    "title": "Clase 3- Apoyo",
    "section": "Nombres Variables",
    "text": "Nombres Variables"
  },
  {
    "objectID": "scripts/clase_03/clase_03_apoyo.html#ambientes-de-trabajo",
    "href": "scripts/clase_03/clase_03_apoyo.html#ambientes-de-trabajo",
    "title": "Clase 3- Apoyo",
    "section": "Ambientes de trabajo",
    "text": "Ambientes de trabajo\nHay algunas cosas que tenemos que tener en cuenta respecto del orden del ambiente en el que trabajamos:\n\nWorking Directory: Es el directorio de trabajo. Pueden ver el suyo con getwd(), es hacia donde apunta el código, por ejemplo, si quieren leer un archivo, la ruta del archivo tiene que estar explicitada como el recorrido desde el Working Directory.\nEnvironment: Esto engloba tanto la información que tenemos cargada en Data y Values, como las librerías que tenemos cargadas mientras trabajamos.\n\nEs importante que mantengamos bien delimitadas estas cosas entre diferentes trabajos, sino:\n\nEl directorio queda referido a un lugar específico en nuestra computadora.\n\n\nSi se lo compartimos a otro se rompe\nSi cambiamos de computadora se rompe\nSi lo cambiamos de lugar se rompe\nSi primero abrimos otro script se rompe\n\n\nTenemos mezclados resultados de diferentes trabajos:\n\n\nNunca sabemos si esa variable/tabla/lista se creo en ese script y no otro\nPerdemos espacio de la memoria\nNo estamos seguros de que el script cargue todas las librerías que necesita\n\nRstudio tiene una herramienta muy útil de trabajo que son los proyectos. Estos permiten mantener un ambiente de trabajo delimitado por cada uno de nuestros trabajos. Es decir:\n\nEl directorio de trabajo se refiere a donde esta ubicado el archivo .Rproj\nEl Environment es específico de nuestro proyecto.\n\nUn proyecto no es un sólo script, sino toda una carpeta de trabajo.\nPara crearlo, vamos al logo de nuevo projecto (Arriba a la derecha de la panatalla), y elegimos la carpeta de trabajo."
  },
  {
    "objectID": "scripts/clase_03/clase_03_apoyo.html#tipos-de-archivos-de-r",
    "href": "scripts/clase_03/clase_03_apoyo.html#tipos-de-archivos-de-r",
    "title": "Clase 3- Apoyo",
    "section": "Tipos de archivos de R",
    "text": "Tipos de archivos de R\n\nScript: Es un archivo de texto plano, donde podemos poner el código que utilizamos para preservarlo\nRmd: También sirve para guardar el código, pero a diferencia de los scripts, se puede compilar, e intercalar código con resultados (este archivo es un rmarkdown)\nRproject: Es un archivo que define la metadata del proyecto\nRDS y Rdata: Dos formatos de archivos propios de R para guardar datos.\nqmd: archivo de Quarto, el cual es un sistema de publicaciones (página web, blogs, que puede contener códigos y otros objetos resultados de una rutina de programación acompañados por texto legible."
  },
  {
    "objectID": "scripts/clase_03/clase_03_apoyo.html#remover-objetos-del-global-environment",
    "href": "scripts/clase_03/clase_03_apoyo.html#remover-objetos-del-global-environment",
    "title": "Clase 3- Apoyo",
    "section": "Remover objetos del Global Environment",
    "text": "Remover objetos del Global Environment\nEn caso de querer remover un objeto (todo lo que existe dentro del programa que estamos ejecutando) del “global environment” podemos usar la función rm() teniendo como argumento el nombre del objeto que queremos remover\nrm(“nombre”)"
  },
  {
    "objectID": "clases/clase_01.html#equipo-de-enseñanza",
    "href": "clases/clase_01.html#equipo-de-enseñanza",
    "title": "Ciencia de Datos para Economistas",
    "section": "Equipo de Enseñanza",
    "text": "Equipo de Enseñanza\n\nProf. Juan P. Goncalves\nProf. Jesús Sánches\nMSc. José M. Avendaño"
  },
  {
    "objectID": "clases/clase_01.html#participantes-curso",
    "href": "clases/clase_01.html#participantes-curso",
    "title": "Ciencia de Datos para Economistas",
    "section": "Participantes Curso",
    "text": "Participantes Curso\n\nExpectativas?\nPrevio:\n\nProgramación?\nInvestigaciones?\nTrabajan en el área?\n\n\n\n\n\n−+\n07:00"
  },
  {
    "objectID": "clases/clase_01.html#ciencia-de-datos-por-ejemplo",
    "href": "clases/clase_01.html#ciencia-de-datos-por-ejemplo",
    "title": "Ciencia de Datos para Economistas",
    "section": "Ciencia de Datos, por ejemplo",
    "text": "Ciencia de Datos, por ejemplo\nExtraer conocimiento desde un conjunto de datos"
  },
  {
    "objectID": "clases/clase_01.html#excel---no",
    "href": "clases/clase_01.html#excel---no",
    "title": "Ciencia de Datos para Economistas",
    "section": "Excel - no …",
    "text": "Excel - no …"
  },
  {
    "objectID": "clases/clase_01.html#por-qué-r",
    "href": "clases/clase_01.html#por-qué-r",
    "title": "Ciencia de Datos para Economistas",
    "section": "¡por qué R?",
    "text": "¡por qué R?"
  },
  {
    "objectID": "clases/clase_01.html#rstudio",
    "href": "clases/clase_01.html#rstudio",
    "title": "Ciencia de Datos para Economistas",
    "section": "RStudio",
    "text": "RStudio"
  },
  {
    "objectID": "clases/clase_01.html#vista-integral",
    "href": "clases/clase_01.html#vista-integral",
    "title": "Ciencia de Datos para Economistas",
    "section": "Vista Integral",
    "text": "Vista Integral"
  },
  {
    "objectID": "clases/clase_01.html#importar",
    "href": "clases/clase_01.html#importar",
    "title": "Ciencia de Datos para Economistas",
    "section": "Importar",
    "text": "Importar"
  },
  {
    "objectID": "clases/clase_01.html#ordenar-transformar",
    "href": "clases/clase_01.html#ordenar-transformar",
    "title": "Ciencia de Datos para Economistas",
    "section": "Ordenar + transformar",
    "text": "Ordenar + transformar"
  },
  {
    "objectID": "clases/clase_01.html#visualizar",
    "href": "clases/clase_01.html#visualizar",
    "title": "Ciencia de Datos para Economistas",
    "section": "Visualizar",
    "text": "Visualizar"
  },
  {
    "objectID": "clases/clase_01.html#modelar",
    "href": "clases/clase_01.html#modelar",
    "title": "Ciencia de Datos para Economistas",
    "section": "Modelar",
    "text": "Modelar"
  },
  {
    "objectID": "clases/clase_01.html#comprender",
    "href": "clases/clase_01.html#comprender",
    "title": "Ciencia de Datos para Economistas",
    "section": "Comprender",
    "text": "Comprender"
  },
  {
    "objectID": "clases/clase_01.html#comunicar",
    "href": "clases/clase_01.html#comunicar",
    "title": "Ciencia de Datos para Economistas",
    "section": "Comunicar",
    "text": "Comunicar"
  },
  {
    "objectID": "clases/clase_01.html#generar-conjunto-de-datos",
    "href": "clases/clase_01.html#generar-conjunto-de-datos",
    "title": "Ciencia de Datos para Economistas",
    "section": "Generar Conjunto de Datos",
    "text": "Generar Conjunto de Datos"
  },
  {
    "objectID": "clases/clase_01.html#programar",
    "href": "clases/clase_01.html#programar",
    "title": "Ciencia de Datos para Economistas",
    "section": "Programar",
    "text": "Programar"
  },
  {
    "objectID": "clases/clase_01.html#intención",
    "href": "clases/clase_01.html#intención",
    "title": "Ciencia de Datos para Economistas",
    "section": "Intención",
    "text": "Intención\n\nPensar como un Científico de Datos:\n\nInvestigador\nCrítico\nInnovador\n\nDónde ubicar recursos técnicos y ayuda"
  },
  {
    "objectID": "clases/clase_01.html#promesa",
    "href": "clases/clase_01.html#promesa",
    "title": "Ciencia de Datos para Economistas",
    "section": "Promesa",
    "text": "Promesa\n\nNociones de programación\nObtener y crear conjunto de datos\nPresentar investigaciones"
  },
  {
    "objectID": "clases/clase_01.html#página-web",
    "href": "clases/clase_01.html#página-web",
    "title": "Ciencia de Datos para Economistas",
    "section": "Página Web",
    "text": "Página Web\nhttps://ucveconomiar4ds.netlify.app\n\n\nTodos los materiales\nEnlaces a recursos"
  },
  {
    "objectID": "clases/clase_01.html#salones",
    "href": "clases/clase_01.html#salones",
    "title": "Ciencia de Datos para Economistas",
    "section": "Salones",
    "text": "Salones\n\nLaboratorio piso 2\nCentro Microscopía Electrónica FC"
  },
  {
    "objectID": "clases/clase_01.html#herramientas-del-curso",
    "href": "clases/clase_01.html#herramientas-del-curso",
    "title": "Ciencia de Datos para Economistas",
    "section": "Herramientas del Curso",
    "text": "Herramientas del Curso\n\nUso Discord: comunicación, recomendaciones, soporte\nRepositorio GitHub: optimizar flujos de trabajo\nAsistente chat para codificación\nPágina web con recursos\nRStudio Cloud-Server: computación en la nube"
  },
  {
    "objectID": "clases/clase_01.html#bibliografía",
    "href": "clases/clase_01.html#bibliografía",
    "title": "Ciencia de Datos para Economistas",
    "section": "Bibliografía",
    "text": "Bibliografía\n\nr4ds en español\nHands-On Programming with R\nCiencia de Datos para Gente Sociable\nMuchos otros"
  },
  {
    "objectID": "clases/clase_01.html#tareas",
    "href": "clases/clase_01.html#tareas",
    "title": "Ciencia de Datos para Economistas",
    "section": "Tareas",
    "text": "Tareas\n\nSemanales (cantidad exacta por definir)\nSe entregan los códigos mediante GitHub"
  },
  {
    "objectID": "clases/clase_01.html#proyecto",
    "href": "clases/clase_01.html#proyecto",
    "title": "Ciencia de Datos para Economistas",
    "section": "Proyecto",
    "text": "Proyecto\n\nElección del conjunto de datos de su preferencia\nTrabajo en equipo\nPresentación avances tercer mes del curso\nPresentación final del Proyecto en laboratorio (20 minutos)\nCreación de un póster (afiche) para comunicar (⛔️ bachillerato)\nSe publicará en la página el proyecto"
  },
  {
    "objectID": "clases/clase_01.html#evaluación",
    "href": "clases/clase_01.html#evaluación",
    "title": "Ciencia de Datos para Economistas",
    "section": "Evaluación",
    "text": "Evaluación\n\n\n\nCategoría\nPercentage\n\n\n\n\nLaboratorios-tareas\n40%\n\n\nProyecto Intermedio Curso\n20%\n\n\nProyecto Final Curso\n30%\n\n\nEnsayo (inicios diciembre)\n10%\n\n\n\nEn la página del curso están las especificaciones sobre los proyectos a realizar"
  },
  {
    "objectID": "clases/clase_01.html#equipos-proyecto",
    "href": "clases/clase_01.html#equipos-proyecto",
    "title": "Ciencia de Datos para Economistas",
    "section": "Equipos Proyecto",
    "text": "Equipos Proyecto\n\n4 a 5 personas\nEvaluación Equipo de Profesores:\n\ncalidad código, originalidad, aporte"
  },
  {
    "objectID": "clases/clase_01.html#soporte-curso",
    "href": "clases/clase_01.html#soporte-curso",
    "title": "Ciencia de Datos para Economistas",
    "section": "Soporte Curso",
    "text": "Soporte Curso\n\nEn la página del curso se publicarán las horas de atención\nRealizar preguntas en el canal foro en el Discord\nEvitar uso de correo\nRevisar distintos canales en Discord, p. ejem: errores-de-códigos"
  },
  {
    "objectID": "clases/clase_01.html#anuncios-del-curso",
    "href": "clases/clase_01.html#anuncios-del-curso",
    "title": "Ciencia de Datos para Economistas",
    "section": "Anuncios del Curso",
    "text": "Anuncios del Curso\n\nSe publicacarán en el canal anuncios-clases del Discord\nRevisar día anterior a cada una de las clases"
  },
  {
    "objectID": "clases/clase_01.html#retos-que-representa-el-curso",
    "href": "clases/clase_01.html#retos-que-representa-el-curso",
    "title": "Ciencia de Datos para Economistas",
    "section": "Retos que Representa el Curso",
    "text": "Retos que Representa el Curso"
  },
  {
    "objectID": "clases/clase_01.html#tareas-asignadas",
    "href": "clases/clase_01.html#tareas-asignadas",
    "title": "Ciencia de Datos para Economistas",
    "section": "Tareas Asignadas",
    "text": "Tareas Asignadas\n\nRevisar canales en Discord\n\nReglas\nRecursos disponibles\nTareas\n\nRealizar la primera tarea\n\n\n\n\n\n🔗 ucveconomiar4ds"
  },
  {
    "objectID": "clases/clase_03.html#r-base",
    "href": "clases/clase_03.html#r-base",
    "title": "Ciencia de Datos para Economistas",
    "section": "",
    "text": "Con R base nos referimos a los comandos básicos que vienen incorporados en el R, sin necesidad de cargar librerías."
  },
  {
    "objectID": "clases/clase_03.html#uso-de-la-console",
    "href": "clases/clase_03.html#uso-de-la-console",
    "title": "Ciencia de Datos para Economistas",
    "section": "Uso de la Console",
    "text": "Uso de la Console"
  },
  {
    "objectID": "clases/clase_03.html#objetos",
    "href": "clases/clase_03.html#objetos",
    "title": "Ciencia de Datos para Economistas",
    "section": "Objetos",
    "text": "Objetos"
  },
  {
    "objectID": "clases/clase_03.html#variables",
    "href": "clases/clase_03.html#variables",
    "title": "Ciencia de Datos para Economistas",
    "section": "Variables",
    "text": "Variables"
  },
  {
    "objectID": "clases/clase_03.html#funciones-precargadas",
    "href": "clases/clase_03.html#funciones-precargadas",
    "title": "Ciencia de Datos para Economistas",
    "section": "Funciones Precargadas",
    "text": "Funciones Precargadas"
  },
  {
    "objectID": "clases/clase_03.html#vectores",
    "href": "clases/clase_03.html#vectores",
    "title": "Ciencia de Datos para Economistas",
    "section": "Vectores",
    "text": "Vectores"
  },
  {
    "objectID": "clases/clase_03.html#tipos-de-vectores",
    "href": "clases/clase_03.html#tipos-de-vectores",
    "title": "Ciencia de Datos para Economistas",
    "section": "Tipos de Vectores",
    "text": "Tipos de Vectores"
  },
  {
    "objectID": "clases/clase_03.html#operadores-lógicos",
    "href": "clases/clase_03.html#operadores-lógicos",
    "title": "Ciencia de Datos para Economistas",
    "section": "Operadores Lógicos",
    "text": "Operadores Lógicos\n\n\\(&gt;\\) (mayor a)\n\\(&gt;=\\) (mayor o igual a)\n\\(&lt;\\) (menor a)\n\\(&lt;=\\) (menor o igual a)\n\\(==\\) (igual a)\n\\(!=\\) (distinto a)"
  },
  {
    "objectID": "clases/clase_03.html#estructuras-de-datos-1",
    "href": "clases/clase_03.html#estructuras-de-datos-1",
    "title": "Ciencia de Datos para Economistas",
    "section": "Estructuras de Datos 1",
    "text": "Estructuras de Datos 1\n\n\n\n\n\n\n\n\nObjeto\nR\nEjemplo\n\n\n\n\n\nvector atómico\nc(1)\n\n\n ️\nvector\nc(‘a’, ‘x’, ‘d’)\n\n\n\nmátriz\nmatrix(1:8,2,4)"
  },
  {
    "objectID": "clases/clase_03.html#estructuras-de-datos-2",
    "href": "clases/clase_03.html#estructuras-de-datos-2",
    "title": "Ciencia de Datos para Economistas",
    "section": "Estructuras de Datos 2",
    "text": "Estructuras de Datos 2\n\n\n\n\n\n\n\n\nObjeto\nR\nEjemplo\n\n\n\n\n\nlista\nlista_test &lt;- list(primer=c(‘a’, ‘x’), segun=c(1))\n\n\n\ndata frame\nmtcars\n\n\n\ntibble\nas_tibble(mtcars)"
  },
  {
    "objectID": "clases/clase_03.html#caracteres-especiales",
    "href": "clases/clase_03.html#caracteres-especiales",
    "title": "Ciencia de Datos para Economistas",
    "section": "Caracteres Especiales",
    "text": "Caracteres Especiales"
  },
  {
    "objectID": "clases/clase_03.html#nombres-variables",
    "href": "clases/clase_03.html#nombres-variables",
    "title": "Ciencia de Datos para Economistas",
    "section": "Nombres Variables",
    "text": "Nombres Variables"
  },
  {
    "objectID": "clases/clase_03.html#ambientes-de-trabajo",
    "href": "clases/clase_03.html#ambientes-de-trabajo",
    "title": "Ciencia de Datos para Economistas",
    "section": "Ambientes de Trabajo",
    "text": "Ambientes de Trabajo\nTipos de Archivos"
  },
  {
    "objectID": "clases/clase_03.html#tipos-de-de-archivos-en-r",
    "href": "clases/clase_03.html#tipos-de-de-archivos-en-r",
    "title": "Ciencia de Datos para Economistas",
    "section": "Tipos de de Archivos en R",
    "text": "Tipos de de Archivos en R"
  },
  {
    "objectID": "clases/clase_03.html#remover-objetos",
    "href": "clases/clase_03.html#remover-objetos",
    "title": "Ciencia de Datos para Economistas",
    "section": "Remover Objetos",
    "text": "Remover Objetos\n\nrm(nombre_objeto)\nrm(list=ls())"
  },
  {
    "objectID": "clases/clase_03_complemento_variables.html#buenas-prácticas-para-nombrar-variables",
    "href": "clases/clase_03_complemento_variables.html#buenas-prácticas-para-nombrar-variables",
    "title": "Clase 03: complemento- nombres variables",
    "section": "Buenas prácticas para nombrar variables",
    "text": "Buenas prácticas para nombrar variables\nEs importante que el nombre de la variable describa el valor que está guardando. Por ejemplo, no use nombres ambiguos como:\n\nprincesa &lt;- 10000\n\nEn lugar de eso, use nombres descriptivos como:\n\nmeta_ventas_enero &lt;- 10000\n\nEsto le ayudará a entender el propósito de la variable más adelante en el código, especialmente cuando tiene múltiples variables en su programa."
  },
  {
    "objectID": "clases/clase_03_complemento_variables.html#declaración-de-variables",
    "href": "clases/clase_03_complemento_variables.html#declaración-de-variables",
    "title": "Clase 03: complemento- nombres variables",
    "section": "Declaración de variables",
    "text": "Declaración de variables\nDespués de elegir el nombre de la variable, es necesario usar el operador de asignación. En R, esto se hace con &lt;-. También puede usar atajos de teclado como Alt + - en Windows para escribir el operador más rápido.\n\nvariable_texto &lt;- \"contiene un texto\""
  },
  {
    "objectID": "clases/clase_03_complemento_variables.html#ejecutar-código-en-r",
    "href": "clases/clase_03_complemento_variables.html#ejecutar-código-en-r",
    "title": "Clase 03: complemento- nombres variables",
    "section": "Ejecutar código en R",
    "text": "Ejecutar código en R\nAl declarar una variable y ejecutar la línea, R creará una variable en el entorno. Puede ver el nuevo objeto creado en la ventana de “Environment”.\n\nmeta_ventas_enero &lt;- 1000"
  },
  {
    "objectID": "clases/clase_03_complemento_variables.html#ejemplos-prácticos",
    "href": "clases/clase_03_complemento_variables.html#ejemplos-prácticos",
    "title": "Clase 03: complemento- nombres variables",
    "section": "Ejemplos prácticos",
    "text": "Ejemplos prácticos\nEjecute los siguientes ejemplos y asegúrese de que las variables aparezcan en el “Environment”.\n\nvariable_nombre &lt;- 'primera asignacion'\n\nRecuerde siempre seguir las mejores prácticas de nombramiento para facilitar la lectura y el mantenimiento de su código."
  },
  {
    "objectID": "clases/clase_03_complemento_variables.html#reglas-para-la-creación-de-variables",
    "href": "clases/clase_03_complemento_variables.html#reglas-para-la-creación-de-variables",
    "title": "Clase 03: complemento- nombres variables",
    "section": "Reglas para la creación de variables",
    "text": "Reglas para la creación de variables\n\nEstilo y convención\nMinúsculas: Las variables deben escribirse en minúsculas como una recomendación de estilo. Aunque no es una limitación del lenguaje, es una buena práctica:\n\nprimera_variable &lt;- 'iniciamos un script'"
  },
  {
    "objectID": "curso-infogeneral.html",
    "href": "curso-infogeneral.html",
    "title": "Información General",
    "section": "",
    "text": "Los seres humanos han adoptado masivamente el uso de dispositivos electrónicos en sus actividades diarias, teniendo de ejemplos los teléfonos móviles, los sensores para mediciones de salud, entre otros. En particular, resulta necesario resaltar que estos aparatos almacenan registros digitales de los valores que en ellos se levantan, quedando reflejadas las actividades que hace su portador. Igualmente, la sociedad ha llevado al plano digital una serie de procesos y actividades que antes se hacían en el mundo físico, quedando también los registros de los contenidos generados y de las distintas interacciones que ocurren. Como consecuencia de ambos factores, se encuentran disponibles grandes volúmenes de datos que pueden ser procesados parcial o totalmente por medio de computadores, posteriormente ser transformados en información y con esta se puede hacer el modelado que permite representar conductas, comportamientos sociales, así como la determinación de tendencias, patrones o análisis predictivos.\nDentro de este contexto se tiene que han surgido nuevas áreas de estudio, que desde distintos ángulos, fundamentan la generación de conocimiento en el uso de los datos. Algunas de estas son:\n\nCiencia de Datos: es un campo interdisciplinario que utiliza métodos científicos, estadísticos y computacionales para extraer conocimientos y tomar decisiones informadas a partir de grandes conjuntos de datos, donde se recopilan, limpian, analizan y visualizan datos para identificar patrones, tendencias y relaciones que no serían evidentes a simple vista.\nCiencias Sociales Computacionales: es un campo de estudio donde las computadoras se utilizan para modelar, simular y analizar fenómenos sociales, por ejemplo, estudiando los comportamientos de los individuos en las redes sociales, la influencia de estas redes en la toma de decisiones, la búsqueda de correlaciones o relaciones causales entre distintos fenómenos socio-económicos.\n\nSaber que existen estas nuevas áreas de conocimiento, algunas ya formalizadas como carreras de estudio en universidades del mundo, e incluso en latinoamérica, hacen ver claramente que la manipulación o el modelado de los datos no sólo debe quedar en manos de los computistas, sino se hace necesario que los científicos sociales conozcan y dominen distintos métodos para interactuar con tales cantidades de información, yendo más allá del uso de softwares tradicionales como lo son las hojas de cálculo tipo Excel.\nPor tal motivo, en este documento se expone la propuesta de la materia de estudio “Ciencia de Datos basada en programación en R para economistas” dirigido a los estudiantes de pregrado de la Escuela de Economía.\nEl contenido de la materia, que será detallado más adelante, está diseñado para que el aprendiz pase por un proceso de aprendizaje y de práctica continua, que le permitan dominar diversos métodos de programación que sirvan como herramientas para sustentar y validar las hipótesis que tengan al realizar las investigaciones inherentes al eje central de la carrera Economía, así como también para coadyuvar a que puedan comunicar de manera efectiva los resultados de las investigaciones.\nIgualmente, es necesario resaltar que a lo largo de todas las clases y actividades, se hace énfasis en el desarrollo de las capacidades analíticas del participante, mediante la interpretación de los resultados obtenidos al procesar los datos. De esta forma, se introducen conceptos y métodos de la ciencia de datos y de las ciencias sociales computacionales.\n\n\n\nPara programar en informática se cuenta con distintos lenguajes, los cuales se clasifican principalmente según dos características. La primera viene dada en el propósito o el uso, que tendrá el programa informático que se esté codificando, ya que por ejemplo, son distintos los objetivos que se persiguen al programar las rutinas de un software que da soporte a un horno microondas a los que se tendrán, como es en este caso, al hacer la manipulación y el procesamiento de los datos. Es así, que dentro de la taxonomía de los lenguajes de programación, uno de los criterios de clasificación que se aplica, es determinar si son de “propósito general”, equivalente a indicar que pueden ser usados para distintos fines y por otro lado están aquellos lenguajes que son de “propósito específico”, en los que se delimita de forma taxativa, a qué están destinados los programas que se pueden codificar con tal lenguaje.\nAdicionalmente, la otra característica que diferencia a los lenguajes, es lo que se denomina el “nivel” en el que se considera que están cuando se hace el enunciado y la ejecución de las instrucciones que el computador ejecutará. Para esto existe una escala entre los extremos “bajo nivel” y “alto nivel”, catalogando como lenguajes de “bajo nivel”, aquellos en los que se programa en instrucciones que son mucho más abstractas y cercanas al lenguaje intrínseco del computador, el cual tiende a ser bastante complejo. Por otra lado, están los lenguajes que se consideran de “alto nivel”, en los que se programa con enunciados que son de más fácil comprensión para el ser humano, ya que las instrucciones que se codifican son más cercanas en sintaxis al lenguaje natural con que habitualmente nos expresamos.\nDe esta manera, dentro de los lenguajes de programación se encuentra R, el cual es un lenguaje de propósito específico, orientado a la estadística que ha sido adoptado ampliamente para realizar la manipulación y al procesamiento de datos, que inicialmente a principios del año 2000, estuvo destinado a correr modelos estadísticos como una opción de código abierto alternativa a programas como Stata o EViews.\nAdicionalmente, el lenguaje R también se asume que es de “alto nivel”, facilitando al usuario la comprensión del lenguaje y de cómo hacer uso de las instrucciones que en él se pueden ejecutar, teniendo una curva de aprendizaje con una pendiente más suave a la de otros lenguajes de programación, lo que lo hace ideal para ser aprendido por aquellos que no tienen formación en ciencias de la computación sino que provienen de otras áreas del conocimiento como lo son las ciencias sociales.\nNo obstante, como en todo proceso en que se hace la selección de un recurso sobre otro, existen beneficios y sacrificios, no siendo la selección de R ajena a estos contrapesos. Las opciones de lenguajes disponibles para los investigadores cercanos a las ciencias que basan sus estudios en el uso de los datos, tienen como otras opciones los lenguajes Python y Julia.\nPython es un lenguaje de programación de propósito general, que ha sido adoptado por la comunidad científica por su facilidad de uso y por la cantidad de librerías que se han desarrollado para el procesamiento de datos, mientras que Julia es un lenguaje de programación de alto rendimiento, que ha sido adoptado por la comunidad científica por su velocidad de ejecución y por la facilidad de escribir código que se asemeja a las matemáticas.\nSin embargo, dentro de estas opciones el lenguaje que se ha seleccionado para la propuesta de esta materia es R, ya que es un lenguaje que ha sido adoptado ampliamente por la comunidad de científicos sociales por su facilidad de uso, la integración con el entorno de desarrollo RStudio que facilita la configuración inicial del ambiente de trabajo dentro del computador, así como también por la gran cantidad de librerías que se han desarrollado para el procesamiento de datos asociados a dominios de las ciencias sociales.\nEn líneas generales, a continuación se mencionan algunos de los beneficios que se obtienen al programar en R:\n\nAnálisis de datos: R es una herramienta poderosa para el análisis de datos, lo que permite a los economistas manejar grandes conjuntos de datos de manera eficiente. Esto es crucial en economía, donde los datos pueden ser complejos y abundantes.\nVisualización de datos: R ofrece una amplia gama de paquetes para visualización de datos, lo que permite a los economistas crear gráficos y visualizaciones claras, interactivas y efectivas, lo cual es útil para comunicar los resultados de las investigaciones de manera más impactante y comprensible.\nModelado estadístico: R cuenta con una gran variedad de librerías para realizar análisis estadísticos avanzados y modelado, lo que permite a los economistas desarrollar modelos complejos para comprender mejor los fenómenos sociales y económicos.\nReproducibilidad, comunicar resultados y transparencia: Programar en R permite a los economistas documentar y reproducir fácilmente sus análisis, lo que aumenta la transparencia y la credibilidad de la investigación. Igualmente los investigadores puedan comunicar de manera efectiva los resultados de sus investigaciones, generando reportes, gráficos, tablas, mapas, aplicaciones web interactivas, entre otros, que pueden ser publicadas con cadenas de trabajo automatizadas que minimizan los esfuerzos y el tiempo que se requiere para la generación y actualización de estos productos.\n\nSin embargo, la propuesta acá detallada, no aborda en profundidad los aspectos mencionados en el punto 3 sobre el modelado estadístico, ya que al existir materias especializadas dentro de la carrera de Economía para abordar estos tópicos, se considera que la materia propuesta se enfoca en la enseñanza del resto de los beneficios enumerados.\nIgualmente resulta de interés hacer las siguientes consideraciones al usar un lenguaje de programación como R, también extrapolable a python:\n\nLenguaje de código abierto: R es un lenguaje open source (código abierto) y su uso no implica ningún pago de licencia y los recursos computacionales que se necesitan para ejecutarlo están optimizados, siendo un elemento muy beneficioso, por ejemplo para estudiantes e instituciones que pueden contar con equipos informáticos que no son de última generación, haciendo que los procesos que en él se corran puedan hacerse de una manera más eficiente en comparación a si se usarán softwares privativos.\nComunidad de Usuarios: la existencia de una comunidad de usuarios muy activa, donde en múltiples investigaciones el componente de programación se hace en este lenguaje, llegando algunas de estas investigaciones a formar parte del estado del arte en su dominio y en muchos casos los modelos implementados o aplicados, son publicados mediantes “librerías” o “paquetes”, haciendo que los usuarios de R puedan acceder de forma libre a los más recientes y novedosos modelos, siendo nuevamente importante resaltar que esto lo pueden hacer de forma legal, sin realizar el desembolso de alguna suma de dinero.\nAcceso a Cómputos en la Nube: los programadores de R pueden acceder a recursos de cómputo que se encuentran disponibles en la nube, donde mediante un navegador web se pueden ingresa a sitios de internet que permiten programar y ejecutar los códigos, disipando barreras que generalmente vienen dadas en que el investigador cuenta con computadoras obsoletas o de muy limitados recursos de procesamiento informático. Al usar la nube, el computador del programador pasa a ser un terminal y la contraparte de los cálculos ocurre en un servidor remoto, con robustos recursos que empresas tecnológicas ponen a disposicición de la comunidad científica de forma gratuita.\n\n\n\n\nTrabajar por proyectos grupales donde tengan que resolver un un problema real y aprendan haciendo las codificaciones, asociado a algún tema de interés de la realidad económica venezolana y abarcando las distintas fases de un proyecto de investigación, desde la obtención de los datos, su manipulación y procesamiento, hasta la presentación de los resultados, garantizando que las investigaciones pueda ser reproducibles por la comunidad científica.\nEjemplos de esto puede ser la obtención de datos de forma periódica y automatizada para la generación de una canasta de precios de la cual se puedan hacer las mediciones de las variaciones de precios detectadas y así construir un indicador de inflación.\n\n\n\nA los fines de indicar algunas de las fuentes de datos a las cuales se puede acceder para realizar las investigaciones a desarrollar, se mencionan las siguientes:\n\nPáginas web o bases de datos de instituciones públicas y privadas.\nPáginas web de comercio electrónico como supermercados donde se publican precios.\nInformación georreferenciada disponible en las API´s de Google Maps y de Open Street Maps.\nConexiones a API´s de distintos sistemas de información.\nDatos de redes sociales.\n\n\n\n\nSesiones de clases y prácticas presenciales, ya que se considera que el aprendizaje de la programación se facilita cuando se cuenta con la presencia del instructor y se puede interactuar con los compañeros de clase y más aún, teniendo presente los problemas de conectividad a internet.\n\n\n\nLas clases deben ser impartidas en un laboratorio que por participante debe contar con un equipo (computador) con al menos 4 GB de RAM; navegador web actualizado (Firefox o Google Chrome); 10 Gb de disco duro disponible; sistema operativo: windows 8 (o superior) , MacOS o Ubuntu 18 o superior (en caso de usar Ubuntu la memoria RAM puede ser mínima de 2 Gb ); arquitectura 64 bits.\n\n\n\nEl curso contará con un repositorio de acceso público mediante la web, con los códigos, datos, guías y demás materiales que sean usados y generados a lo largo de las sesiones de trabajo. Igualmente se adoptará el uso un grupo de mensajería como Discord para almacenar todas las preguntas y respuestas que vayan surgiendo a lo largo del curso, las cuales podrán servir como material de consulta para futuros asistentes al curso.\nLos proyectos de programación que se generen a lo largo del curso por parte de los alumnos, deberán ser compartidos mediante el repositorio, garantizando el acceso por parte de todos los interesados. Igualmente se fomentará la creación de conjuntos de datos de libre acceso que sirvan para toda la comunidad de investigadores.\n\n\n\nEn resumen, aprender a programar en R y familiarizarse con la ciencia de datos y las ciencias sociales computacionales, puede permitir a los economistas realizar análisis más sofisticados y rigurosos, así como abordar preguntas de investigación más complejas en el ámbito de las ciencias sociales, abriendo la posibilidad de que se obtengan y generen datos estructurados, en medio de una situación país donde no existe la cultura gubernamental ni privada de compartir y/o publicar conjuntos de datos.\nLos participantes del curso podrán hacer investigaciones que resulten reproducibles y mediante procesamientos encadenados y se les facilitará comunicar los resultados mediante blogs, página web o reportes técnicos de fácil acceso mediante la web.\nIgualmente, podrán hacer prototipos de aplicaciones web interactivas para el análisis exploratorio de los datos, su modelado mediante modelos econométricos o estadísticos y dispondrán de nociones de elementos introductorios a la ciencia de datos y sus métodos de trabajo.",
    "crumbs": [
      "Sobre el Curso",
      "Información General"
    ]
  },
  {
    "objectID": "curso-infogeneral.html#ciencia-de-datos-basada-en-programación-en-r-para-economistas",
    "href": "curso-infogeneral.html#ciencia-de-datos-basada-en-programación-en-r-para-economistas",
    "title": "Información General",
    "section": "",
    "text": "Los seres humanos han adoptado masivamente el uso de dispositivos electrónicos en sus actividades diarias, teniendo de ejemplos los teléfonos móviles, los sensores para mediciones de salud, entre otros. En particular, resulta necesario resaltar que estos aparatos almacenan registros digitales de los valores que en ellos se levantan, quedando reflejadas las actividades que hace su portador. Igualmente, la sociedad ha llevado al plano digital una serie de procesos y actividades que antes se hacían en el mundo físico, quedando también los registros de los contenidos generados y de las distintas interacciones que ocurren. Como consecuencia de ambos factores, se encuentran disponibles grandes volúmenes de datos que pueden ser procesados parcial o totalmente por medio de computadores, posteriormente ser transformados en información y con esta se puede hacer el modelado que permite representar conductas, comportamientos sociales, así como la determinación de tendencias, patrones o análisis predictivos.\nDentro de este contexto se tiene que han surgido nuevas áreas de estudio, que desde distintos ángulos, fundamentan la generación de conocimiento en el uso de los datos. Algunas de estas son:\n\nCiencia de Datos: es un campo interdisciplinario que utiliza métodos científicos, estadísticos y computacionales para extraer conocimientos y tomar decisiones informadas a partir de grandes conjuntos de datos, donde se recopilan, limpian, analizan y visualizan datos para identificar patrones, tendencias y relaciones que no serían evidentes a simple vista.\nCiencias Sociales Computacionales: es un campo de estudio donde las computadoras se utilizan para modelar, simular y analizar fenómenos sociales, por ejemplo, estudiando los comportamientos de los individuos en las redes sociales, la influencia de estas redes en la toma de decisiones, la búsqueda de correlaciones o relaciones causales entre distintos fenómenos socio-económicos.\n\nSaber que existen estas nuevas áreas de conocimiento, algunas ya formalizadas como carreras de estudio en universidades del mundo, e incluso en latinoamérica, hacen ver claramente que la manipulación o el modelado de los datos no sólo debe quedar en manos de los computistas, sino se hace necesario que los científicos sociales conozcan y dominen distintos métodos para interactuar con tales cantidades de información, yendo más allá del uso de softwares tradicionales como lo son las hojas de cálculo tipo Excel.\nPor tal motivo, en este documento se expone la propuesta de la materia de estudio “Ciencia de Datos basada en programación en R para economistas” dirigido a los estudiantes de pregrado de la Escuela de Economía.\nEl contenido de la materia, que será detallado más adelante, está diseñado para que el aprendiz pase por un proceso de aprendizaje y de práctica continua, que le permitan dominar diversos métodos de programación que sirvan como herramientas para sustentar y validar las hipótesis que tengan al realizar las investigaciones inherentes al eje central de la carrera Economía, así como también para coadyuvar a que puedan comunicar de manera efectiva los resultados de las investigaciones.\nIgualmente, es necesario resaltar que a lo largo de todas las clases y actividades, se hace énfasis en el desarrollo de las capacidades analíticas del participante, mediante la interpretación de los resultados obtenidos al procesar los datos. De esta forma, se introducen conceptos y métodos de la ciencia de datos y de las ciencias sociales computacionales.\n\n\n\nPara programar en informática se cuenta con distintos lenguajes, los cuales se clasifican principalmente según dos características. La primera viene dada en el propósito o el uso, que tendrá el programa informático que se esté codificando, ya que por ejemplo, son distintos los objetivos que se persiguen al programar las rutinas de un software que da soporte a un horno microondas a los que se tendrán, como es en este caso, al hacer la manipulación y el procesamiento de los datos. Es así, que dentro de la taxonomía de los lenguajes de programación, uno de los criterios de clasificación que se aplica, es determinar si son de “propósito general”, equivalente a indicar que pueden ser usados para distintos fines y por otro lado están aquellos lenguajes que son de “propósito específico”, en los que se delimita de forma taxativa, a qué están destinados los programas que se pueden codificar con tal lenguaje.\nAdicionalmente, la otra característica que diferencia a los lenguajes, es lo que se denomina el “nivel” en el que se considera que están cuando se hace el enunciado y la ejecución de las instrucciones que el computador ejecutará. Para esto existe una escala entre los extremos “bajo nivel” y “alto nivel”, catalogando como lenguajes de “bajo nivel”, aquellos en los que se programa en instrucciones que son mucho más abstractas y cercanas al lenguaje intrínseco del computador, el cual tiende a ser bastante complejo. Por otra lado, están los lenguajes que se consideran de “alto nivel”, en los que se programa con enunciados que son de más fácil comprensión para el ser humano, ya que las instrucciones que se codifican son más cercanas en sintaxis al lenguaje natural con que habitualmente nos expresamos.\nDe esta manera, dentro de los lenguajes de programación se encuentra R, el cual es un lenguaje de propósito específico, orientado a la estadística que ha sido adoptado ampliamente para realizar la manipulación y al procesamiento de datos, que inicialmente a principios del año 2000, estuvo destinado a correr modelos estadísticos como una opción de código abierto alternativa a programas como Stata o EViews.\nAdicionalmente, el lenguaje R también se asume que es de “alto nivel”, facilitando al usuario la comprensión del lenguaje y de cómo hacer uso de las instrucciones que en él se pueden ejecutar, teniendo una curva de aprendizaje con una pendiente más suave a la de otros lenguajes de programación, lo que lo hace ideal para ser aprendido por aquellos que no tienen formación en ciencias de la computación sino que provienen de otras áreas del conocimiento como lo son las ciencias sociales.\nNo obstante, como en todo proceso en que se hace la selección de un recurso sobre otro, existen beneficios y sacrificios, no siendo la selección de R ajena a estos contrapesos. Las opciones de lenguajes disponibles para los investigadores cercanos a las ciencias que basan sus estudios en el uso de los datos, tienen como otras opciones los lenguajes Python y Julia.\nPython es un lenguaje de programación de propósito general, que ha sido adoptado por la comunidad científica por su facilidad de uso y por la cantidad de librerías que se han desarrollado para el procesamiento de datos, mientras que Julia es un lenguaje de programación de alto rendimiento, que ha sido adoptado por la comunidad científica por su velocidad de ejecución y por la facilidad de escribir código que se asemeja a las matemáticas.\nSin embargo, dentro de estas opciones el lenguaje que se ha seleccionado para la propuesta de esta materia es R, ya que es un lenguaje que ha sido adoptado ampliamente por la comunidad de científicos sociales por su facilidad de uso, la integración con el entorno de desarrollo RStudio que facilita la configuración inicial del ambiente de trabajo dentro del computador, así como también por la gran cantidad de librerías que se han desarrollado para el procesamiento de datos asociados a dominios de las ciencias sociales.\nEn líneas generales, a continuación se mencionan algunos de los beneficios que se obtienen al programar en R:\n\nAnálisis de datos: R es una herramienta poderosa para el análisis de datos, lo que permite a los economistas manejar grandes conjuntos de datos de manera eficiente. Esto es crucial en economía, donde los datos pueden ser complejos y abundantes.\nVisualización de datos: R ofrece una amplia gama de paquetes para visualización de datos, lo que permite a los economistas crear gráficos y visualizaciones claras, interactivas y efectivas, lo cual es útil para comunicar los resultados de las investigaciones de manera más impactante y comprensible.\nModelado estadístico: R cuenta con una gran variedad de librerías para realizar análisis estadísticos avanzados y modelado, lo que permite a los economistas desarrollar modelos complejos para comprender mejor los fenómenos sociales y económicos.\nReproducibilidad, comunicar resultados y transparencia: Programar en R permite a los economistas documentar y reproducir fácilmente sus análisis, lo que aumenta la transparencia y la credibilidad de la investigación. Igualmente los investigadores puedan comunicar de manera efectiva los resultados de sus investigaciones, generando reportes, gráficos, tablas, mapas, aplicaciones web interactivas, entre otros, que pueden ser publicadas con cadenas de trabajo automatizadas que minimizan los esfuerzos y el tiempo que se requiere para la generación y actualización de estos productos.\n\nSin embargo, la propuesta acá detallada, no aborda en profundidad los aspectos mencionados en el punto 3 sobre el modelado estadístico, ya que al existir materias especializadas dentro de la carrera de Economía para abordar estos tópicos, se considera que la materia propuesta se enfoca en la enseñanza del resto de los beneficios enumerados.\nIgualmente resulta de interés hacer las siguientes consideraciones al usar un lenguaje de programación como R, también extrapolable a python:\n\nLenguaje de código abierto: R es un lenguaje open source (código abierto) y su uso no implica ningún pago de licencia y los recursos computacionales que se necesitan para ejecutarlo están optimizados, siendo un elemento muy beneficioso, por ejemplo para estudiantes e instituciones que pueden contar con equipos informáticos que no son de última generación, haciendo que los procesos que en él se corran puedan hacerse de una manera más eficiente en comparación a si se usarán softwares privativos.\nComunidad de Usuarios: la existencia de una comunidad de usuarios muy activa, donde en múltiples investigaciones el componente de programación se hace en este lenguaje, llegando algunas de estas investigaciones a formar parte del estado del arte en su dominio y en muchos casos los modelos implementados o aplicados, son publicados mediantes “librerías” o “paquetes”, haciendo que los usuarios de R puedan acceder de forma libre a los más recientes y novedosos modelos, siendo nuevamente importante resaltar que esto lo pueden hacer de forma legal, sin realizar el desembolso de alguna suma de dinero.\nAcceso a Cómputos en la Nube: los programadores de R pueden acceder a recursos de cómputo que se encuentran disponibles en la nube, donde mediante un navegador web se pueden ingresa a sitios de internet que permiten programar y ejecutar los códigos, disipando barreras que generalmente vienen dadas en que el investigador cuenta con computadoras obsoletas o de muy limitados recursos de procesamiento informático. Al usar la nube, el computador del programador pasa a ser un terminal y la contraparte de los cálculos ocurre en un servidor remoto, con robustos recursos que empresas tecnológicas ponen a disposicición de la comunidad científica de forma gratuita.\n\n\n\n\nTrabajar por proyectos grupales donde tengan que resolver un un problema real y aprendan haciendo las codificaciones, asociado a algún tema de interés de la realidad económica venezolana y abarcando las distintas fases de un proyecto de investigación, desde la obtención de los datos, su manipulación y procesamiento, hasta la presentación de los resultados, garantizando que las investigaciones pueda ser reproducibles por la comunidad científica.\nEjemplos de esto puede ser la obtención de datos de forma periódica y automatizada para la generación de una canasta de precios de la cual se puedan hacer las mediciones de las variaciones de precios detectadas y así construir un indicador de inflación.\n\n\n\nA los fines de indicar algunas de las fuentes de datos a las cuales se puede acceder para realizar las investigaciones a desarrollar, se mencionan las siguientes:\n\nPáginas web o bases de datos de instituciones públicas y privadas.\nPáginas web de comercio electrónico como supermercados donde se publican precios.\nInformación georreferenciada disponible en las API´s de Google Maps y de Open Street Maps.\nConexiones a API´s de distintos sistemas de información.\nDatos de redes sociales.\n\n\n\n\nSesiones de clases y prácticas presenciales, ya que se considera que el aprendizaje de la programación se facilita cuando se cuenta con la presencia del instructor y se puede interactuar con los compañeros de clase y más aún, teniendo presente los problemas de conectividad a internet.\n\n\n\nLas clases deben ser impartidas en un laboratorio que por participante debe contar con un equipo (computador) con al menos 4 GB de RAM; navegador web actualizado (Firefox o Google Chrome); 10 Gb de disco duro disponible; sistema operativo: windows 8 (o superior) , MacOS o Ubuntu 18 o superior (en caso de usar Ubuntu la memoria RAM puede ser mínima de 2 Gb ); arquitectura 64 bits.\n\n\n\nEl curso contará con un repositorio de acceso público mediante la web, con los códigos, datos, guías y demás materiales que sean usados y generados a lo largo de las sesiones de trabajo. Igualmente se adoptará el uso un grupo de mensajería como Discord para almacenar todas las preguntas y respuestas que vayan surgiendo a lo largo del curso, las cuales podrán servir como material de consulta para futuros asistentes al curso.\nLos proyectos de programación que se generen a lo largo del curso por parte de los alumnos, deberán ser compartidos mediante el repositorio, garantizando el acceso por parte de todos los interesados. Igualmente se fomentará la creación de conjuntos de datos de libre acceso que sirvan para toda la comunidad de investigadores.\n\n\n\nEn resumen, aprender a programar en R y familiarizarse con la ciencia de datos y las ciencias sociales computacionales, puede permitir a los economistas realizar análisis más sofisticados y rigurosos, así como abordar preguntas de investigación más complejas en el ámbito de las ciencias sociales, abriendo la posibilidad de que se obtengan y generen datos estructurados, en medio de una situación país donde no existe la cultura gubernamental ni privada de compartir y/o publicar conjuntos de datos.\nLos participantes del curso podrán hacer investigaciones que resulten reproducibles y mediante procesamientos encadenados y se les facilitará comunicar los resultados mediante blogs, página web o reportes técnicos de fácil acceso mediante la web.\nIgualmente, podrán hacer prototipos de aplicaciones web interactivas para el análisis exploratorio de los datos, su modelado mediante modelos econométricos o estadísticos y dispondrán de nociones de elementos introductorios a la ciencia de datos y sus métodos de trabajo.",
    "crumbs": [
      "Sobre el Curso",
      "Información General"
    ]
  },
  {
    "objectID": "curso-infogeneral.html#ciencia-de-datos-basada-en-programación-en-r-para-economistass",
    "href": "curso-infogeneral.html#ciencia-de-datos-basada-en-programación-en-r-para-economistass",
    "title": "Información General",
    "section": "",
    "text": "Los seres humanos han adoptado masivamente el uso de dispositivos electrónicos en sus actividades diarias, teniendo de ejemplos los teléfonos móviles, los sensores para mediciones de salud, entre otros. En particular, resulta necesario resaltar que estos aparatos almacenan registros digitales de los valores que en ellos se levantan, quedando reflejadas las actividades que hace su portador. Igualmente, la sociedad ha llevado al plano digital una serie de procesos y actividades que antes se hacían en el mundo físico, quedando también los registros de los contenidos generados y de las distintas interacciones que ocurren. Como consecuencia de ambos factores, se encuentran disponibles grandes volúmenes de datos que pueden ser procesados parcial o totalmente por medio de computadores, posteriormente ser transformados en información y con esta se puede hacer el modelado que permite representar conductas, comportamientos sociales, así como la determinación de tendencias, patrones o análisis predictivos.\nDentro de este contexto se tiene que han surgido nuevas áreas de estudio, que desde distintos ángulos, fundamentan la generación de conocimiento en el uso de los datos. Algunas de estas son:\n\nCiencia de Datos: es un campo interdisciplinario que utiliza métodos científicos, estadísticos y computacionales para extraer conocimientos y tomar decisiones informadas a partir de grandes conjuntos de datos, donde se recopilan, limpian, analizan y visualizan datos para identificar patrones, tendencias y relaciones que no serían evidentes a simple vista.\nCiencias Sociales Computacionales: es un campo de estudio donde las computadoras se utilizan para modelar, simular y analizar fenómenos sociales, por ejemplo, estudiando los comportamientos de los individuos en las redes sociales, la influencia de estas redes en la toma de decisiones, la búsqueda de correlaciones o relaciones causales entre distintos fenómenos socio-económicos.\n\nSaber que existen estas nuevas áreas de conocimiento, algunas ya formalizadas como carreras de estudio en universidades del mundo, e incluso en latinoamérica, hacen ver claramente que la manipulación o el modelado de los datos no sólo debe quedar en manos de los computistas, sino se hace necesario que los científicos sociales conozcan y dominen distintos métodos para interactuar con tales cantidades de información, yendo más allá del uso de softwares tradicionales como lo son las hojas de cálculo tipo Excel.\nPor tal motivo, en este documento se expone la propuesta de la materia de estudio “Ciencia de Datos basada en programación en R para economistas” dirigido a los estudiantes de pregrado de la Escuela de Economía.\nEl contenido de la materia, que será detallado más adelante, está diseñado para que el aprendiz pase por un proceso de aprendizaje y de práctica continua, que le permitan dominar diversos métodos de programación que sirvan como herramientas para sustentar y validar las hipótesis que tengan al realizar las investigaciones inherentes al eje central de la carrera Economía, así como también para coadyuvar a que puedan comunicar de manera efectiva los resultados de las investigaciones.\nIgualmente, es necesario resaltar que a lo largo de todas las clases y actividades, se hace énfasis en el desarrollo de las capacidades analíticas del participante, mediante la interpretación de los resultados obtenidos al procesar los datos. De esta forma, se introducen conceptos y métodos de la ciencia de datos y de las ciencias sociales computacionales.\n\n\n\nPara programar en informática se cuenta con distintos lenguajes, los cuales se clasifican principalmente según dos características. La primera viene dada en el propósito o el uso, que tendrá el programa informático que se esté codificando, ya que por ejemplo, son distintos los objetivos que se persiguen al programar las rutinas de un software que da soporte a un horno microondas a los que se tendrán, como es en este caso, al hacer la manipulación y el procesamiento de los datos. Es así, que dentro de la taxonomía de los lenguajes de programación, uno de los criterios de clasificación que se aplica, es determinar si son de “propósito general”, equivalente a indicar que pueden ser usados para distintos fines y por otro lado están aquellos lenguajes que son de “propósito específico”, en los que se delimita de forma taxativa, a qué están destinados los programas que se pueden codificar con tal lenguaje.\nAdicionalmente, la otra característica que diferencia a los lenguajes, es lo que se denomina el “nivel” en el que se considera que están cuando se hace el enunciado y la ejecución de las instrucciones que el computador ejecutará. Para esto existe una escala entre los extremos “bajo nivel” y “alto nivel”, catalogando como lenguajes de “bajo nivel”, aquellos en los que se programa en instrucciones que son mucho más abstractas y cercanas al lenguaje intrínseco del computador, el cual tiende a ser bastante complejo. Por otra lado, están los lenguajes que se consideran de “alto nivel”, en los que se programa con enunciados que son de más fácil comprensión para el ser humano, ya que las instrucciones que se codifican son más cercanas en sintaxis al lenguaje natural con que habitualmente nos expresamos.\nDe esta manera, dentro de los lenguajes de programación se encuentra R, el cual es un lenguaje de propósito específico, orientado a la estadística que ha sido adoptado ampliamente para realizar la manipulación y al procesamiento de datos, que inicialmente a principios del año 2000, estuvo destinado a correr modelos estadísticos como una opción de código abierto alternativa a programas como Stata o EViews.\nAdicionalmente, el lenguaje R también se asume que es de “alto nivel”, facilitando al usuario la comprensión del lenguaje y de cómo hacer uso de las instrucciones que en él se pueden ejecutar, teniendo una curva de aprendizaje con una pendiente más suave a la de otros lenguajes de programación, lo que lo hace ideal para ser aprendido por aquellos que no tienen formación en ciencias de la computación sino que provienen de otras áreas del conocimiento como lo son las ciencias sociales.\nNo obstante, como en todo proceso en que se hace la selección de un recurso sobre otro, existen beneficios y sacrificios, no siendo la selección de R ajena a estos contrapesos. Las opciones de lenguajes disponibles para los investigadores cercanos a las ciencias que basan sus estudios en el uso de los datos, tienen como otras opciones los lenguajes Python y Julia.\nPython es un lenguaje de programación de propósito general, que ha sido adoptado por la comunidad científica por su facilidad de uso y por la cantidad de librerías que se han desarrollado para el procesamiento de datos, mientras que Julia es un lenguaje de programación de alto rendimiento, que ha sido adoptado por la comunidad científica por su velocidad de ejecución y por la facilidad de escribir código que se asemeja a las matemáticas.\nSin embargo, dentro de estas opciones el lenguaje que se ha seleccionado para la propuesta de esta materia es R, ya que es un lenguaje que ha sido adoptado ampliamente por la comunidad de científicos sociales por su facilidad de uso, la integración con el entorno de desarrollo RStudio que facilita la configuración inicial del ambiente de trabajo dentro del computador, así como también por la gran cantidad de librerías que se han desarrollado para el procesamiento de datos asociados a dominios de las ciencias sociales.\nEn líneas generales, a continuación se mencionan algunos de los beneficios que se obtienen al programar en R:\n\nAnálisis de datos: R es una herramienta poderosa para el análisis de datos, lo que permite a los economistas manejar grandes conjuntos de datos de manera eficiente. Esto es crucial en economía, donde los datos pueden ser complejos y abundantes.\nVisualización de datos: R ofrece una amplia gama de paquetes para visualización de datos, lo que permite a los economistas crear gráficos y visualizaciones claras, interactivas y efectivas, lo cual es útil para comunicar los resultados de las investigaciones de manera más impactante y comprensible.\nModelado estadístico: R cuenta con una gran variedad de librerías para realizar análisis estadísticos avanzados y modelado, lo que permite a los economistas desarrollar modelos complejos para comprender mejor los fenómenos sociales y económicos.\nReproducibilidad, comunicar resultados y transparencia: Programar en R permite a los economistas documentar y reproducir fácilmente sus análisis, lo que aumenta la transparencia y la credibilidad de la investigación. Igualmente los investigadores puedan comunicar de manera efectiva los resultados de sus investigaciones, generando reportes, gráficos, tablas, mapas, aplicaciones web interactivas, entre otros, que pueden ser publicadas con cadenas de trabajo automatizadas que minimizan los esfuerzos y el tiempo que se requiere para la generación y actualización de estos productos.\n\nSin embargo, la propuesta acá detallada, no aborda en profundidad los aspectos mencionados en el punto 3 sobre el modelado estadístico, ya que al existir materias especializadas dentro de la carrera de Economía para abordar estos tópicos, se considera que la materia propuesta se enfoca en la enseñanza del resto de los beneficios enumerados.\nIgualmente resulta de interés hacer las siguientes consideraciones al usar un lenguaje de programación como R, también extrapolable a python:\n\nLenguaje de código abierto: R es un lenguaje open source (código abierto) y su uso no implica ningún pago de licencia y los recursos computacionales que se necesitan para ejecutarlo están optimizados, siendo un elemento muy beneficioso, por ejemplo para estudiantes e instituciones que pueden contar con equipos informáticos que no son de última generación, haciendo que los procesos que en él se corran puedan hacerse de una manera más eficiente en comparación a si se usarán softwares privativos.\nComunidad de Usuarios: la existencia de una comunidad de usuarios muy activa, donde en múltiples investigaciones el componente de programación se hace en este lenguaje, llegando algunas de estas investigaciones a formar parte del estado del arte en su dominio y en muchos casos los modelos implementados o aplicados, son publicados mediantes “librerías” o “paquetes”, haciendo que los usuarios de R puedan acceder de forma libre a los más recientes y novedosos modelos, siendo nuevamente importante resaltar que esto lo pueden hacer de forma legal, sin realizar el desembolso de alguna suma de dinero.\nAcceso a Cómputos en la Nube: los programadores de R pueden acceder a recursos de cómputo que se encuentran disponibles en la nube, donde mediante un navegador web se pueden ingresa a sitios de internet que permiten programar y ejecutar los códigos, disipando barreras que generalmente vienen dadas en que el investigador cuenta con computadoras obsoletas o de muy limitados recursos de procesamiento informático. Al usar la nube, el computador del programador pasa a ser un terminal y la contraparte de los cálculos ocurre en un servidor remoto, con robustos recursos que empresas tecnológicas ponen a disposicición de la comunidad científica de forma gratuita.\n\n\n\n\nTrabajar por proyectos grupales donde tengan que resolver un un problema real y aprendan haciendo las codificaciones, asociado a algún tema de interés de la realidad económica venezolana y abarcando las distintas fases de un proyecto de investigación, desde la obtención de los datos, su manipulación y procesamiento, hasta la presentación de los resultados, garantizando que las investigaciones pueda ser reproducibles por la comunidad científica.\nEjemplos de esto puede ser la obtención de datos de forma periódica y automatizada para la generación de una canasta de precios de la cual se puedan hacer las mediciones de las variaciones de precios detectadas y así construir un indicador de inflación.\n\n\n\nA los fines de indicar algunas de las fuentes de datos a las cuales se puede acceder para realizar las investigaciones a desarrollar, se mencionan las siguientes:\n\nPáginas web o bases de datos de instituciones públicas y privadas.\nPáginas web de comercio electrónico como supermercados donde se publican precios.\nInformación georreferenciada disponible en las API´s de Google Maps y de Open Street Maps.\nConexiones a API´s de distintos sistemas de información.\nDatos de redes sociales.\n\n\n\n\nSesiones de clases y prácticas presenciales, ya que se considera que el aprendizaje de la programación se facilita cuando se cuenta con la presencia del instructor y se puede interactuar con los compañeros de clase y más aún, teniendo presente los problemas de conectividad a internet.\n\n\n\nLas clases deben ser impartidas en un laboratorio que por participante debe contar con un equipo (computador) con al menos 4 GB de RAM; navegador web actualizado (Firefox o Google Chrome); 10 Gb de disco duro disponible; sistema operativo: windows 8 (o superior) , MacOS o Ubuntu 18 o superior (en caso de usar Ubuntu la memoria RAM puede ser mínima de 2 Gb ); arquitectura 64 bits.\n\n\n\nEl curso contará con un repositorio de acceso público mediante la web, con los códigos, datos, guías y demás materiales que sean usados y generados a lo largo de las sesiones de trabajo. Igualmente se adoptará el uso un grupo de mensajería como Discord para almacenar todas las preguntas y respuestas que vayan surgiendo a lo largo del curso, las cuales podrán servir como material de consulta para futuros asistentes al curso.\nLos proyectos de programación que se generen a lo largo del curso por parte de los alumnos, deberán ser compartidos mediante el repositorio, garantizando el acceso por parte de todos los interesados. Igualmente se fomentará la creación de conjuntos de datos de libre acceso que sirvan para toda la comunidad de investigadores.\n\n\n\nEn resumen, aprender a programar en R y familiarizarse con la ciencia de datos y las ciencias sociales computacionales, puede permitir a los economistas realizar análisis más sofisticados y rigurosos, así como abordar preguntas de investigación más complejas en el ámbito de las ciencias sociales, abriendo la posibilidad de que se obtengan y generen datos estructurados, en medio de una situación país donde no existe la cultura gubernamental ni privada de compartir y/o publicar conjuntos de datos.\nLos participantes del curso podrán hacer investigaciones que resulten reproducibles y mediante procesamientos encadenados y se les facilitará comunicar los resultados mediante blogs, página web o reportes técnicos de fácil acceso mediante la web.\nIgualmente, podrán hacer prototipos de aplicaciones web interactivas para el análisis exploratorio de los datos, su modelado mediante modelos econométricos o estadísticos y dispondrán de nociones de elementos introductorios a la ciencia de datos y sus métodos de trabajo.",
    "crumbs": [
      "Sobre el Curso",
      "Información General"
    ]
  },
  {
    "objectID": "Untitled-1.html",
    "href": "Untitled-1.html",
    "title": "UCV EconomíaR4DS",
    "section": "",
    "text": "library(rvest)"
  },
  {
    "objectID": "clases/clase_03_complemento_variables.html",
    "href": "clases/clase_03_complemento_variables.html",
    "title": "Clase 03: complemento- nombres variables",
    "section": "",
    "text": "En esta clase veremos algunas recomendaciones sobre cómo deben nombrarse las variables en el lenguaje de programación R. Recuerde que el nombre de las variables es fundamental para mantener un código claro y comprensible.\n# Algún día haremos justicia los que tenemos \n# la ñ en nuestro nombre\napellido_avendaño &lt;- 'se ejecutará pero no es recomendable'"
  },
  {
    "objectID": "clases/clase_03_complemento_variables.html#nombres",
    "href": "clases/clase_03_complemento_variables.html#nombres",
    "title": "Clase 03: complemento- nombres variables",
    "section": "Nombres",
    "text": "Nombres\nLos nombres de las variables no deben contener acentos, diéresis ni caracteres especiales. Aunque es posible utilizar algunos caracteres como la “ñ”, no es recomendable."
  },
  {
    "objectID": "clases/clase_03_complemento_variables.html#buenas-prácticas",
    "href": "clases/clase_03_complemento_variables.html#buenas-prácticas",
    "title": "Clase 03: complemento- nombres variables",
    "section": "Buenas Prácticas",
    "text": "Buenas Prácticas\nPara nombrar variables Es importante que el nombre de la variable describa el valor que está guardando. Por ejemplo, no use nombres ambiguos o no descriptivos como:\n\npupitre &lt;- 10000\n\nEn lugar de eso, use nombres descriptivos como:\n\nmeta_ventas_enero &lt;- 10000"
  },
  {
    "objectID": "clases/clase_03_complemento_variables.html#nombres-descriptivos",
    "href": "clases/clase_03_complemento_variables.html#nombres-descriptivos",
    "title": "Clase 03: complemento- nombres variables",
    "section": "Nombres Descriptivos",
    "text": "Nombres Descriptivos\nEsto le ayudará a entender el propósito de la variable más adelante en el código, especialmente cuando tiene múltiples variables en su programa."
  },
  {
    "objectID": "clases/clase_03_complemento_variables.html#declaración-de-variables-cont.",
    "href": "clases/clase_03_complemento_variables.html#declaración-de-variables-cont.",
    "title": "Clase 03: complemento- nombres variables",
    "section": "Declaración de variables (cont.)",
    "text": "Declaración de variables (cont.)\nTenga en cuenta que los textos deben ir entre comillas simples (') o dobles (\").\nSi el valor que desea asignar es numérico, no use comillas:\n\nvariable_numero &lt;- 1000"
  },
  {
    "objectID": "clases/clase_03_complemento_variables.html#ejemplo",
    "href": "clases/clase_03_complemento_variables.html#ejemplo",
    "title": "Clase 03: complemento- nombres variables",
    "section": "Ejemplo",
    "text": "Ejemplo\nCompare este ejemplo con una asignación incorrecta:\n\nvariable_numero_2 &lt;- '1000'\nvariable_numero + variable_numero  # Correcto\n\n[1] 2000\n\n# variable_numero + variable_numero_2  # Genera error"
  },
  {
    "objectID": "clases/clase_03_complemento_variables.html#reglas-cont.",
    "href": "clases/clase_03_complemento_variables.html#reglas-cont.",
    "title": "Clase 03: complemento- nombres variables",
    "section": "Reglas (cont.)",
    "text": "Reglas (cont.)\n\nRayita abajo para juntar palabras: Puede usar el guion bajo _ para juntar dos o más palabras en el nombre de una variable:\n\n\nvariable_creada &lt;- 'este texto es el contenido de la variable'"
  },
  {
    "objectID": "clases/clase_03_complemento_variables.html#restricciones",
    "href": "clases/clase_03_complemento_variables.html#restricciones",
    "title": "Clase 03: complemento- nombres variables",
    "section": "Restricciones",
    "text": "Restricciones\n\nNo se pueden colocar espacios en los nombres: El siguiente ejemplo no es válido y dará error:\n\n\n# variable con espacio &lt;- 'esta línea no se podrá ejecutar'\n\n\nNo comenzar con números: Las variables no pueden comenzar con un número. El siguiente ejemplo también genera un error:\n\n\n# 1variable &lt;- 'tampoco se ejecutará este código'\n\nAl ejecutar la línea anterior, se obtendrá un mensaje de error en la Consola."
  },
  {
    "objectID": "clases/clase_03_complemento_variables.html#restricciones-cont.",
    "href": "clases/clase_03_complemento_variables.html#restricciones-cont.",
    "title": "Clase 03: complemento- nombres variables",
    "section": "Restricciones (cont.)",
    "text": "Restricciones (cont.)\n\nSolo letras o puntos al inicio: Los nombres de las variables solo pueden empezar con una letra o un punto. Si se utiliza un punto al inicio, no debe ser seguido de un número:\n\n\nvariable_tercera &lt;- 'seguimos avanzando'\n.variable_tercera &lt;- 'la variable_tercera es distinta a la .variable_tercera, son dos nombres distintos'"
  },
  {
    "objectID": "clases/clase_03_complemento_variables.html#restricciones-cont.-1",
    "href": "clases/clase_03_complemento_variables.html#restricciones-cont.-1",
    "title": "Clase 03: complemento- nombres variables",
    "section": "Restricciones (cont.)",
    "text": "Restricciones (cont.)\nEl siguiente ejemplo es incorrecto porque el punto no puede estar seguido de un número:\n\n# .5variable &lt;- 'INCORRECTO'"
  },
  {
    "objectID": "clases/clase_03_complemento_variables.html#caracteres-especiales-no-permitidos",
    "href": "clases/clase_03_complemento_variables.html#caracteres-especiales-no-permitidos",
    "title": "Clase 03: complemento- nombres variables",
    "section": "Caracteres Especiales no Permitidos",
    "text": "Caracteres Especiales no Permitidos\nAdemás del punto . y la rayita abajo _, no se permite el uso de otros caracteres especiales en los nombres de las variables.\nAquí tienes un listado de los caracteres especiales que no puedes usar:\n\nlistado_caracteres_especiales &lt;- c(\"~\", \"`\", \"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"&\", \n                                   \"*\", \"(\", \")\", \"-\", \"_\", \"+\", \"=\", \"{\", \"}\", \n                                   \"[\", \"]\", \"|\", \"\\\\\", \"/\", \":\", \";\", \"\\\"\", \n                                   \"'\", \"&lt;\", \"&gt;\", \".\", \"?\")"
  },
  {
    "objectID": "clases/clase_03_complemento_variables.html#ejemplo-caracteres-especiales-no-permitidos",
    "href": "clases/clase_03_complemento_variables.html#ejemplo-caracteres-especiales-no-permitidos",
    "title": "Clase 03: complemento- nombres variables",
    "section": "Ejemplo Caracteres Especiales no Permitidos",
    "text": "Ejemplo Caracteres Especiales no Permitidos\nEl siguiente ejemplo es incorrecto debido al uso de un carácter especial en el nombre de la variable:\n\n# variable.inasig@nabl_e &lt;- 'INCORRECTO'\n\n\n\n\n\n🔗 ucveconomiar4ds"
  },
  {
    "objectID": "clases/clase_05.html",
    "href": "clases/clase_05.html",
    "title": "Ciencia de Datos para Economistas",
    "section": "",
    "text": "Sesgo del Superviviente"
  },
  {
    "objectID": "clases/clase_05.html#científicos-de-datos",
    "href": "clases/clase_05.html#científicos-de-datos",
    "title": "Ciencia de Datos para Economistas",
    "section": "Científicos de Datos 👨‍🔬 👩‍🔬",
    "text": "Científicos de Datos 👨‍🔬 👩‍🔬\n\n\n\nSesgo del Superviviente"
  },
  {
    "objectID": "clases/clase_05.html#puntos-varios",
    "href": "clases/clase_05.html#puntos-varios",
    "title": "Ciencia de Datos para Economistas",
    "section": "Puntos Varios:",
    "text": "Puntos Varios:\n\nTareas: pendiente y actual\nElección día clase virtual 1 (configuración GitHib)\nClase miércoles 6/nov en Facultad de Ciencias?\nMateriales: videos apoyo, scripts, qmd´s, videos recomendados, Discord, vignettes\nPromesa inicial\nInstalación paquetes\n\n\n\nClase virtual: 2da pantalla, uso discord\nClase miércoles: abordar primera tarea y proyecto\nPromesa inicial: Fundamentos de CD Realizar un proyecto de inicio a fin Herramientas para la solución de problemas (Venezuela) Defenderse solos paso a paso, soporte, incremental, primero ubicarnos. Cuento hoja primera clase\nMateriales: preguntas en discord, videos proximamente, orden de lectura, caso clase 3, canal Discord errores,"
  },
  {
    "objectID": "clases/clase_05.html#archivos",
    "href": "clases/clase_05.html#archivos",
    "title": "Ciencia de Datos para Economistas",
    "section": "Archivos:",
    "text": "Archivos:\n\n.R: script de R\n.qmd perteneciente al sistema de publicación quarto\n.rmd : información comprimida de datos de ambiente de trabajo"
  },
  {
    "objectID": "clases/clase_05.html#ambiente-de-trabajo",
    "href": "clases/clase_05.html#ambiente-de-trabajo",
    "title": "Ciencia de Datos para Economistas",
    "section": "Ambiente de Trabajo",
    "text": "Ambiente de Trabajo\nEnvironment\n\n\narchivo Vs environment"
  },
  {
    "objectID": "clases/clase_05.html#section",
    "href": "clases/clase_05.html#section",
    "title": "Ciencia de Datos para Economistas",
    "section": "",
    "text": "Nombres Variables\nMaterial complementario disponible en variables"
  },
  {
    "objectID": "clases/clase_05.html#vectores",
    "href": "clases/clase_05.html#vectores",
    "title": "Ciencia de Datos para Economistas",
    "section": "Vectores",
    "text": "Vectores\n\nSe declaran con la función c () que permite combinar elementos\nElementos de la misma mode\n\nmode (3)\nmode ('palabras declaradas')\n\nElementos ordenados\n\nVector c (1,3,4,7)\n!= a vector c (1,4,3,7)"
  },
  {
    "objectID": "clases/clase_05.html#tipos-de-vectores",
    "href": "clases/clase_05.html#tipos-de-vectores",
    "title": "Ciencia de Datos para Economistas",
    "section": "Tipos de Vectores",
    "text": "Tipos de Vectores"
  },
  {
    "objectID": "clases/clase_05.html#operadores-lógicos",
    "href": "clases/clase_05.html#operadores-lógicos",
    "title": "Ciencia de Datos para Economistas",
    "section": "Operadores Lógicos",
    "text": "Operadores Lógicos\n\n\\(&gt;\\) (mayor a)\n\\(&gt;=\\) (mayor o igual a)\n\\(&lt;\\) (menor a)\n\\(&lt;=\\) (menor o igual a)\n\\(==\\) (igual a)\n\\(!=\\) (distinto a)"
  },
  {
    "objectID": "clases/clase_05.html#estructuras-de-datos",
    "href": "clases/clase_05.html#estructuras-de-datos",
    "title": "Ciencia de Datos para Economistas",
    "section": "Estructuras de Datos",
    "text": "Estructuras de Datos\n\n\n\n\n\n\n\n\nObjeto\nR\nEjemplo\n\n\n\n\n\nvector atómico\nc(1)\n\n\n ️\nvector\nc(‘a’, ‘x’, ‘d’)\n\n\n\nmátriz\nmatrix(1:8,2,4)"
  },
  {
    "objectID": "clases/clase_05.html#estructuras-de-datos-2",
    "href": "clases/clase_05.html#estructuras-de-datos-2",
    "title": "Ciencia de Datos para Economistas",
    "section": "Estructuras de Datos 2",
    "text": "Estructuras de Datos 2\n\n\n\n\n\n\n\n\nObjeto\nR\nEjemplo\n\n\n\n\n\nlista\nlista_test &lt;- list(primer=c(‘a’, ‘x’), segun=c(1))\n\n\n\ndata frame\nmtcars\n\n\n\ntibble\nas_tibble(mtcars)\n\n\n\nTipos de de Objetos en R\nmode\nclass"
  },
  {
    "objectID": "clases/clase_05.html#caracteres-especiales",
    "href": "clases/clase_05.html#caracteres-especiales",
    "title": "Ciencia de Datos para Economistas",
    "section": "Caracteres Especiales",
    "text": "Caracteres Especiales"
  },
  {
    "objectID": "clases/clase_05.html#section-2",
    "href": "clases/clase_05.html#section-2",
    "title": "Ciencia de Datos para Economistas",
    "section": "",
    "text": "Tipos de de Objetos en R\nmode\nclass"
  },
  {
    "objectID": "clases/clase_05.html#variables-objetos",
    "href": "clases/clase_05.html#variables-objetos",
    "title": "Ciencia de Datos para Economistas",
    "section": "Variables / Objetos",
    "text": "Variables / Objetos\n\nDefinición\nCreación\nEnvironment\n\n\n\nlimpiar ambiente de trabajo"
  },
  {
    "objectID": "clases/clase_05.html#recursos",
    "href": "clases/clase_05.html#recursos",
    "title": "Ciencia de Datos para Economistas",
    "section": "Recursos:",
    "text": "Recursos:\n\nVignettes\nCheat Sheets"
  },
  {
    "objectID": "clases/clase_05.html#ejemplo-de-obtención-y-procesamiento",
    "href": "clases/clase_05.html#ejemplo-de-obtención-y-procesamiento",
    "title": "Ciencia de Datos para Economistas",
    "section": "Ejemplo de obtención y procesamiento",
    "text": "Ejemplo de obtención y procesamiento\n\n\n\n\n🔗 ucveconomiar4ds"
  },
  {
    "objectID": "clases/clase_03.html",
    "href": "clases/clase_03.html",
    "title": "Ciencia de Datos para Economistas",
    "section": "",
    "text": "Con R base nos referimos a los comandos básicos que vienen incorporados en el R, sin necesidad de cargar librerías."
  },
  {
    "objectID": "clases/clase_03.html#objetos--variables",
    "href": "clases/clase_03.html#objetos--variables",
    "title": "Ciencia de Datos para Economistas",
    "section": "Objetos- Variables",
    "text": "Objetos- Variables\nMaterial complementario disponible en"
  },
  {
    "objectID": "clases/clase_04.html",
    "href": "clases/clase_04.html",
    "title": "Ciencia de Datos para Economistas",
    "section": "",
    "text": "Interactuar con la cónsola indicando comandos-funciones y definir variables:\n\nSumas\nSecuencias\nNúmeros aleatorios\nRaíces cuadradas\nVisualizar una serie de x valores aleatórios generados con distribución normal\n\nver R script en GitHub"
  },
  {
    "objectID": "clases/clase_04.html#consola",
    "href": "clases/clase_04.html#consola",
    "title": "Ciencia de Datos para Economistas",
    "section": "Consola",
    "text": "Consola\nInteractuar con la cónsola indicando comandos-funciones y definir variables:\n\nSumas\nSecuencias\nNúmeros aleatorios\nRaíces cuadradas\nVisualizar una serie de x valores aleatórios generados con distribución normal\n\nver R script en GitHub"
  },
  {
    "objectID": "clases/clase_04.html#trabajar-script-r-en-editor-de-código",
    "href": "clases/clase_04.html#trabajar-script-r-en-editor-de-código",
    "title": "Ciencia de Datos para Economistas",
    "section": "Trabajar Script R en Editor de Código",
    "text": "Trabajar Script R en Editor de Código\n\nTrabajar con conjunto de datos cars\n\nExplorarlo\nVisualizar los datos con funciones\n\nscatter.plot\nggplot2\nplotly\n\n\n\nver R script y qmd en GitHub"
  },
  {
    "objectID": "clases/clase_04.html#reporte-interactivo",
    "href": "clases/clase_04.html#reporte-interactivo",
    "title": "Ciencia de Datos para Economistas",
    "section": "Reporte Interactivo",
    "text": "Reporte Interactivo\nMediante las librerías ggplot2, plotly y DT se genera un gráfico y una tabla interactiva\nver qmd en GitHub"
  },
  {
    "objectID": "clases/clase_04.html#tarea",
    "href": "clases/clase_04.html#tarea",
    "title": "Ciencia de Datos para Economistas",
    "section": "Tarea",
    "text": "Tarea\nFecha cumplimiento: 1/10/2024\nenlace GitHub\n\n\n\n\n🔗 ucveconomiar4ds"
  },
  {
    "objectID": "clases/clase_05.html#remover-objetos",
    "href": "clases/clase_05.html#remover-objetos",
    "title": "Ciencia de Datos para Economistas",
    "section": "Remover Objetos",
    "text": "Remover Objetos\n\nrm(nombre_objeto)\nrm(list=ls())"
  },
  {
    "objectID": "clases/clase_05.html#recursos-ayuda-paquetes",
    "href": "clases/clase_05.html#recursos-ayuda-paquetes",
    "title": "Ciencia de Datos para Economistas",
    "section": "Recursos Ayuda Paquetes:",
    "text": "Recursos Ayuda Paquetes:\n\nVignettes:\n\n?? nombre paquete\nCran\n\nCheat Sheets:\n\nDiscord, canal “Recursos disponibles”\nCheat Sheet RStudio"
  },
  {
    "objectID": "clases/clase_05.html#correlaciones-espureas",
    "href": "clases/clase_05.html#correlaciones-espureas",
    "title": "Ciencia de Datos para Economistas",
    "section": "Correlaciones Espureas",
    "text": "Correlaciones Espureas\n\n\n\nCorrelaciones Espúreas"
  },
  {
    "objectID": "clases/clase_05.html#correlaciones-espúreas",
    "href": "clases/clase_05.html#correlaciones-espúreas",
    "title": "Ciencia de Datos para Economistas",
    "section": "Correlaciones Espúreas",
    "text": "Correlaciones Espúreas\n\n\n\nCorrelaciones Espúreas"
  },
  {
    "objectID": "clases/clase_05.html#nombres-variables",
    "href": "clases/clase_05.html#nombres-variables",
    "title": "Ciencia de Datos para Economistas",
    "section": "Nombres Variables",
    "text": "Nombres Variables\nMaterial complementario disponible en variables"
  },
  {
    "objectID": "clases/clase_05_complemento_variables.html#nombres",
    "href": "clases/clase_05_complemento_variables.html#nombres",
    "title": "Clase 05: Complemento- Nombres Variables",
    "section": "Nombres",
    "text": "Nombres\nLos nombres de las variables no deben contener acentos, diéresis ni caracteres especiales. Aunque es posible utilizar algunos caracteres como la “ñ”, no es recomendable."
  },
  {
    "objectID": "clases/clase_05_complemento_variables.html#buenas-prácticas",
    "href": "clases/clase_05_complemento_variables.html#buenas-prácticas",
    "title": "Clase 05: Complemento- Nombres Variables",
    "section": "Buenas Prácticas",
    "text": "Buenas Prácticas\nPara nombrar variables Es importante que el nombre de la variable describa el valor que está guardando. Por ejemplo, no use nombres ambiguos o no descriptivos como:\n\npupitre &lt;- 10000\n\nEn lugar de eso, use nombres descriptivos como:\n\nmeta_ventas_enero &lt;- 10000"
  },
  {
    "objectID": "clases/clase_05_complemento_variables.html#nombres-descriptivos",
    "href": "clases/clase_05_complemento_variables.html#nombres-descriptivos",
    "title": "Clase 05: Complemento- Nombres Variables",
    "section": "Nombres Descriptivos",
    "text": "Nombres Descriptivos\nEsto le ayudará a entender el propósito de la variable más adelante en el código, especialmente cuando tiene múltiples variables en su programa."
  },
  {
    "objectID": "clases/clase_05_complemento_variables.html#declaración-de-variables",
    "href": "clases/clase_05_complemento_variables.html#declaración-de-variables",
    "title": "Clase 05: Complemento- Nombres Variables",
    "section": "Declaración de variables",
    "text": "Declaración de variables\nDespués de elegir el nombre de la variable, es necesario usar el operador de asignación. En R, esto se hace con &lt;-. También puede usar atajos de teclado como Alt + - en Windows para escribir el operador más rápido.\n\nvariable_texto &lt;- \"contiene un texto\""
  },
  {
    "objectID": "clases/clase_05_complemento_variables.html#declaración-de-variables-cont.-1",
    "href": "clases/clase_05_complemento_variables.html#declaración-de-variables-cont.-1",
    "title": "Clase 05: Complemento- Nombres Variables",
    "section": "Declaración de variables (cont. 1)",
    "text": "Declaración de variables (cont. 1)\nTenga en cuenta que los textos deben ir entre comillas simples (') o dobles (\").\n\nvariable_texto &lt;- \"contiene un texto\" # ✅\nvariable_texto &lt;- 'contiene un texto' # ✅\n\nSi el valor que desea asignar es numérico, no use comillas:\n\nvariable_numero &lt;- 1000"
  },
  {
    "objectID": "clases/clase_05_complemento_variables.html#declaración-de-variables-cont.-2",
    "href": "clases/clase_05_complemento_variables.html#declaración-de-variables-cont.-2",
    "title": "Clase 05: Complemento- Nombres Variables",
    "section": "Declaración de variables (cont. 2)",
    "text": "Declaración de variables (cont. 2)\nExisten vectores conformados por números enteros (ocupan menos memoria en espacio de trabajo) y se declaran\n\nvector_de_enteros &lt;- c(3L, 5L, 7L)\n\nCada número es seguido por la letra L"
  },
  {
    "objectID": "clases/clase_05_complemento_variables.html#declaración-de-variables-cont.-3",
    "href": "clases/clase_05_complemento_variables.html#declaración-de-variables-cont.-3",
    "title": "Clase 05: Complemento- Nombres Variables",
    "section": "Declaración de variables (cont. 3)",
    "text": "Declaración de variables (cont. 3)\nSi se va a declarar un vector de datos lógicos tampoco se usan comillas\n\nvector_logico_ejemplo &lt;- c(TRUE, TRUE, FALSE)"
  },
  {
    "objectID": "clases/clase_05_complemento_variables.html#variables-creadas--environment",
    "href": "clases/clase_05_complemento_variables.html#variables-creadas--environment",
    "title": "Clase 05: Complemento- Nombres Variables",
    "section": "Variables Creadas- Environment",
    "text": "Variables Creadas- Environment\nAl declarar una variable y ejecutar la línea, R creará una variable en el entorno. Puede ver el nuevo objeto creado en la ventana de “Environment”.\n\nmeta_ventas_enero &lt;- 1000"
  },
  {
    "objectID": "clases/clase_05_complemento_variables.html#ejemplos-prácticos",
    "href": "clases/clase_05_complemento_variables.html#ejemplos-prácticos",
    "title": "Clase 05: Complemento- Nombres Variables",
    "section": "Ejemplos prácticos",
    "text": "Ejemplos prácticos\nEjecute los siguientes ejemplos y asegúrese de que las variables aparezcan en el “Environment”.\n\nvariable_nombre &lt;- 'primera asignacion'\n\nRecuerde siempre seguir las mejores prácticas de nombramiento para facilitar la lectura y el mantenimiento de su código."
  },
  {
    "objectID": "clases/clase_05_complemento_variables.html#reglas-para-la-creación-de-variables",
    "href": "clases/clase_05_complemento_variables.html#reglas-para-la-creación-de-variables",
    "title": "Clase 05: Complemento- Nombres Variables",
    "section": "Reglas para la creación de variables",
    "text": "Reglas para la creación de variables\nEstilo y convención\nMinúsculas: Las variables deben escribirse en minúsculas como una recomendación de estilo. Aunque no es una limitación del lenguaje, es una buena práctica:\n\nprimera_variable &lt;- 'iniciamos un script'"
  },
  {
    "objectID": "clases/clase_05_complemento_variables.html#reglas-cont.",
    "href": "clases/clase_05_complemento_variables.html#reglas-cont.",
    "title": "Clase 05: Complemento- Nombres Variables",
    "section": "Reglas (cont.)",
    "text": "Reglas (cont.)\n\nRayita abajo para juntar palabras: Puede usar el guion bajo _ para juntar dos o más palabras en el nombre de una variable:\n\n\nvariable_creada &lt;- 'este texto es el contenido de la variable'"
  },
  {
    "objectID": "clases/clase_05_complemento_variables.html#restricciones",
    "href": "clases/clase_05_complemento_variables.html#restricciones",
    "title": "Clase 05: Complemento- Nombres Variables",
    "section": "Restricciones",
    "text": "Restricciones\n\nNo se pueden colocar espacios en los nombres: El siguiente ejemplo no es válido y dará error:\n\n\n# variable con espacio &lt;- 'esta línea no se podrá ejecutar'\n\n\nNo comenzar con números: Las variables no pueden comenzar con un número. El siguiente ejemplo también genera un error:\n\n\n# 1variable &lt;- 'tampoco se ejecutará este código'\n\nAl ejecutar la línea anterior, se obtendrá un mensaje de error en la Consola."
  },
  {
    "objectID": "clases/clase_05_complemento_variables.html#restricciones-cont.",
    "href": "clases/clase_05_complemento_variables.html#restricciones-cont.",
    "title": "Clase 05: Complemento- Nombres Variables",
    "section": "Restricciones (cont.)",
    "text": "Restricciones (cont.)\n\nSolo letras o puntos al inicio: Los nombres de las variables solo pueden empezar con una letra o un punto. Si se utiliza un punto al inicio, no debe ser seguido de un número:\n\n\nvariable_tercera &lt;- 'seguimos avanzando'\n.variable_tercera &lt;- 'la variable_tercera es distinta a la .variable_tercera, son dos nombres distintos'"
  },
  {
    "objectID": "clases/clase_05_complemento_variables.html#restricciones-cont.-1",
    "href": "clases/clase_05_complemento_variables.html#restricciones-cont.-1",
    "title": "Clase 05: Complemento- Nombres Variables",
    "section": "Restricciones (cont.)",
    "text": "Restricciones (cont.)\nEl siguiente ejemplo es incorrecto porque el punto no puede estar seguido de un número:\n\n# .5variable &lt;- 'INCORRECTO'"
  },
  {
    "objectID": "clases/clase_05_complemento_variables.html#caracteres-especiales-no-permitidos",
    "href": "clases/clase_05_complemento_variables.html#caracteres-especiales-no-permitidos",
    "title": "Clase 05: Complemento- Nombres Variables",
    "section": "Caracteres Especiales no Permitidos",
    "text": "Caracteres Especiales no Permitidos\nAdemás del punto . y la rayita abajo _, no se permite el uso de otros caracteres especiales en los nombres de las variables.\nAquí tienes un listado de los caracteres especiales que no puedes usar:\n\nlistado_caracteres_especiales &lt;- c(\"~\", \"`\", \"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"&\", \n                                   \"*\", \"(\", \")\", \"-\", \"_\", \"+\", \"=\", \"{\", \"}\", \n                                   \"[\", \"]\", \"|\", \"\\\\\", \"/\", \":\", \";\", \"\\\"\", \n                                   \"'\", \"&lt;\", \"&gt;\", \".\", \"?\")"
  },
  {
    "objectID": "clases/clase_05_complemento_variables.html#ejemplo-de-caracteres-especiales-no-permitidos",
    "href": "clases/clase_05_complemento_variables.html#ejemplo-de-caracteres-especiales-no-permitidos",
    "title": "Clase 05: Complemento- Nombres Variables",
    "section": "Ejemplo de Caracteres Especiales no Permitidos",
    "text": "Ejemplo de Caracteres Especiales no Permitidos\nEl siguiente ejemplo es incorrecto debido al uso de un carácter especial en el nombre de la variable:\n\n# variable.inasig@nabl_e &lt;- 'INCORRECTO'\n\n\n\n\n\n🔗 ucveconomiar4ds"
  },
  {
    "objectID": "clases/clase_05_complemento_variables.html",
    "href": "clases/clase_05_complemento_variables.html",
    "title": "Clase 05: Complemento- Nombres Variables",
    "section": "",
    "text": "En esta clase veremos algunas recomendaciones sobre cómo deben nombrarse las variables en el lenguaje de programación R. Recuerde que el nombre de las variables es fundamental para mantener un código claro y comprensible.\n# Algún día haremos justicia los que tenemos \n# la ñ en nuestro nombre\napellido_avendaño &lt;- 'se ejecutará pero no es recomendable'"
  },
  {
    "objectID": "clases/clase_03_complemento_variables.html#declaración-de-variables-cont.-1",
    "href": "clases/clase_03_complemento_variables.html#declaración-de-variables-cont.-1",
    "title": "Clase 03: complemento- nombres variables",
    "section": "Declaración de variables (cont. 1)",
    "text": "Declaración de variables (cont. 1)\nTenga en cuenta que los textos deben ir entre comillas simples (') o dobles (\").\n\nvariable_texto &lt;- \"contiene un texto\" # ✅\nvariable_texto &lt;- 'contiene un texto' # ✅\n\nSi el valor que desea asignar es numérico, no use comillas:\n\nvariable_numero &lt;- 1000"
  },
  {
    "objectID": "clases/clase_03_complemento_variables.html#declaración-de-variables-cont.-2",
    "href": "clases/clase_03_complemento_variables.html#declaración-de-variables-cont.-2",
    "title": "Clase 03: complemento- nombres variables",
    "section": "Declaración de variables (cont. 2)",
    "text": "Declaración de variables (cont. 2)\nExisten vectores conformados por números enteros (ocupan menos memoria en espacio de trabajo) y se declaran\n\nvector_de_enteros &lt;- c(3L, 5L, 7L)\n\nCada número es seguido por la letra L"
  },
  {
    "objectID": "clases/clase_03_complemento_variables.html#declaración-de-variables-cont.-3",
    "href": "clases/clase_03_complemento_variables.html#declaración-de-variables-cont.-3",
    "title": "Clase 03: complemento- nombres variables",
    "section": "Declaración de variables (cont. 3)",
    "text": "Declaración de variables (cont. 3)\nSi se va a declarar un vector de datos lógicos tampoco se usan comillas\n\nvector_logico_ejemplo &lt;- c(TRUE, TRUE, FALSE)"
  },
  {
    "objectID": "clases/clase_03_complemento_variables.html#variables-creadas--environment",
    "href": "clases/clase_03_complemento_variables.html#variables-creadas--environment",
    "title": "Clase 03: complemento- nombres variables",
    "section": "Variables Creadas- Environment",
    "text": "Variables Creadas- Environment\nAl declarar una variable y ejecutar la línea, R creará una variable en el entorno. Puede ver el nuevo objeto creado en la ventana de “Environment”.\n\nmeta_ventas_enero &lt;- 1000"
  },
  {
    "objectID": "clases/clase_03_complemento_variables.html#ejemplo-de-caracteres-especiales-no-permitidos",
    "href": "clases/clase_03_complemento_variables.html#ejemplo-de-caracteres-especiales-no-permitidos",
    "title": "Clase 03: complemento- nombres variables",
    "section": "Ejemplo de Caracteres Especiales no Permitidos",
    "text": "Ejemplo de Caracteres Especiales no Permitidos\nEl siguiente ejemplo es incorrecto debido al uso de un carácter especial en el nombre de la variable:\n\n# variable.inasig@nabl_e &lt;- 'INCORRECTO'"
  },
  {
    "objectID": "clases/Clase_virtual_1.html#orígenes-presentación",
    "href": "clases/Clase_virtual_1.html#orígenes-presentación",
    "title": "Clase Virtual 1: Configurando Git y GitHub",
    "section": "Orígenes Presentación",
    "text": "Orígenes Presentación\nEstas láminas están basadas en el contenido desarrollado por la Profª. Jennifer Bryan en el libro electrónico Happy Git and GitHub for the useR , así como en el taller .. desarrollado por la profª Mine Çetinkaya-Rundel, .Teaching computing with Git and GitHub disponible en el link https://mine-cetinkaya-rundel.github.io/teach-r-online/03-git/03-git.html#1\n\nVerificar que han instalado paquetes"
  },
  {
    "objectID": "clases/Clase_virtual_1.html#objetivos",
    "href": "clases/Clase_virtual_1.html#objetivos",
    "title": "Clase Virtual 1: Configurando Git y GitHub",
    "section": "Objetivos",
    "text": "Objetivos\n\nInstar Git\nSincronizar cuenta GitHub con RStudio\nClonar y sincronizar un repositorio"
  },
  {
    "objectID": "clases/Clase_virtual_1.html#qué-es-git",
    "href": "clases/Clase_virtual_1.html#qué-es-git",
    "title": "Clase Virtual 1: Configurando Git y GitHub",
    "section": "Qué es Git",
    "text": "Qué es Git\nUn sistema de control de versiones donde quedan registrados los cambios que se van haciendo a un archivo, que junto con otros archivos, conforman lo que se denomina un repositorio.\nPor ejemplo, el repositorio https://github.com/javendaXgh/r4dsucv2024 contiene todos los archivos de extensiones html, css, js, qmd, R, así como las carpetas que dan sustento al site del curso https://ucveconomiar4ds.netlify.app\n\npropósito original, dar soporte a grupos de desarrolladores de software\nEjemplo variables definidadas o sobreescritas en cónsola que luego no se pueden ejecutar y se interrumpe la ejecución del código\nAceptar o rechazar cambios\nValor de un código de desarrollo, por ejemplo, de un software"
  },
  {
    "objectID": "clases/Clase_virtual_1.html#qué-es-github",
    "href": "clases/Clase_virtual_1.html#qué-es-github",
    "title": "Clase Virtual 1: Configurando Git y GitHub",
    "section": "Qué es GitHub",
    "text": "Qué es GitHub\nEs un sistema de alojamiento para proyectos que están sustentados en Git. Adicional a una serie muy grande de funcionalidades, actúa como un repositorio público o privado, de códigos en distintos lenguajes.\nLos proyectos alojados en GitHub se sincronizan y pueden ser distribuidos automatizadamente.\n\nEjemplo de Google Drive\ncopilot\nactions\nteams\nrespaldo de los códigos-. valor del trabajo\nreproducibilidad\nEjemplo distribución: códigos de tareas\nEjemplo"
  },
  {
    "objectID": "clases/Clase_virtual_1.html#beneficios",
    "href": "clases/Clase_virtual_1.html#beneficios",
    "title": "Clase Virtual 1: Configurando Git y GitHub",
    "section": "Beneficios",
    "text": "Beneficios\n\nMaximizar la reproducibilidad de los códigos que soportan una investigación o un desarrollo\nIntegrar códigos cuando se trabaja en equipo\nFlujos de trabajo automatizados\n\nActualización automática de página web\nContar con GitHub actions para ejecutare"
  },
  {
    "objectID": "clases/Clase_virtual_1.html#flujo-de-trabajo",
    "href": "clases/Clase_virtual_1.html#flujo-de-trabajo",
    "title": "Clase Virtual 1: Configurando Git y GitHub",
    "section": "Flujo de Trabajo",
    "text": "Flujo de Trabajo\n\n↔︎️\n\n↔︎️"
  },
  {
    "objectID": "clases/Clase_virtual_1.html#pasos",
    "href": "clases/Clase_virtual_1.html#pasos",
    "title": "Clase Virtual 1: Configurando Git y GitHub",
    "section": "Pasos",
    "text": "Pasos"
  },
  {
    "objectID": "clases/Clase_virtual_1.html#verificar-configuraciones-e-instalaciones-previas-de-git",
    "href": "clases/Clase_virtual_1.html#verificar-configuraciones-e-instalaciones-previas-de-git",
    "title": "Clase Virtual 1: Configurando Git y GitHub",
    "section": "Verificar configuraciones e Instalaciones Previas de Git",
    "text": "Verificar configuraciones e Instalaciones Previas de Git\n\n#which git\n\n\n#git --version\n\nEn caso de no estar instalado no aparecerá nada o indicará que no está instalado\nEn caso de estar instalado ejecutar\n\n#git update-git-for-windows\n\n\nmacos\nInstalar Xcode command line tools\nhttps://forums.developer.apple.com/forums/thread/677124\nxcode-select –install\nHablar con Luis opción brew"
  },
  {
    "objectID": "clases/Clase_virtual_1.html#instalar-git",
    "href": "clases/Clase_virtual_1.html#instalar-git",
    "title": "Clase Virtual 1: Configurando Git y GitHub",
    "section": "Instalar Git",
    "text": "Instalar Git\nEnlace\n🔗 https://git-scm.com/downloads\nSeleccionar Sistema Operativo y versión Bits\nLinks Alternativos :\n\n🔗 https://gitforwindows.org\n🔗 https://github.com/git-for-windows/git/releases/download/v2.47.0.windows.2/Git-2.47.0.2-64-bit.exe\n\n\nhttps://happygitwithr.com/install-git"
  },
  {
    "objectID": "clases/Clase_virtual_1.html#presentarse-a-git--opción-1",
    "href": "clases/Clase_virtual_1.html#presentarse-a-git--opción-1",
    "title": "Clase Virtual 1: Configurando Git y GitHub",
    "section": "Presentarse a Git- Opción 1",
    "text": "Presentarse a Git- Opción 1\n\n#git config --global user.name \"Jane Doe\"\n#git config --global user.email \"jane@example.com\"\n\nConfirmar configuración\n\n#git config --global --list"
  },
  {
    "objectID": "clases/Clase_virtual_1.html#presentarse-a-git--opción-2",
    "href": "clases/Clase_virtual_1.html#presentarse-a-git--opción-2",
    "title": "Clase Virtual 1: Configurando Git y GitHub",
    "section": "Presentarse a Git- Opción 2",
    "text": "Presentarse a Git- Opción 2\nInstalar Paquete R\n\ninstall.packages(\"usethis\")\n\n\n#library(usethis) \n#use_git_config(user.name = \"Jane Doe\", user.email = \"jane@example.com\")\n\nVerificar instalación\n\nusethis::git_sitrep()"
  },
  {
    "objectID": "clases/Clase_virtual_1.html#crear-pat",
    "href": "clases/Clase_virtual_1.html#crear-pat",
    "title": "Clase Virtual 1: Configurando Git y GitHub",
    "section": "Crear PAT",
    "text": "Crear PAT\nPersonal Access Token para conexiones HTTPS que es uno de los dos protocolos habilitados por GitHub para comunicarnos\n\nOpción 1 Crear Token en https://github.com/settings/tokens\nOpción 2 (intentar)Ejecutar esta instrucción\n\n\nusethis::create_github_token()\n\nScopes: Seleccionar esto valores: “repo”, “user”, y “workflow”.\nTiempo de expiración, al menos 180 días \nCopiar token generado y guardar en lugar seguro\nEjecutar este comando para pegarlo y almacenarlo\n\ninstall.packages('gitcreds')\n#gitcreds::gitcreds_set()"
  },
  {
    "objectID": "clases/Clase_virtual_1.html#usar-protocolo-https",
    "href": "clases/Clase_virtual_1.html#usar-protocolo-https",
    "title": "Clase Virtual 1: Configurando Git y GitHub",
    "section": "Usar protocolo HTTPS",
    "text": "Usar protocolo HTTPS"
  },
  {
    "objectID": "clases/Clase_virtual_1.html#resto-de-configuraciones---continúa",
    "href": "clases/Clase_virtual_1.html#resto-de-configuraciones---continúa",
    "title": "Clase Virtual 1: Configurando Git y GitHub",
    "section": "Resto de Configuraciones - continúa",
    "text": "Resto de Configuraciones - continúa"
  },
  {
    "objectID": "clases/Clase_virtual_1.html#crear-repo-en-github",
    "href": "clases/Clase_virtual_1.html#crear-repo-en-github",
    "title": "Clase Virtual 1: Configurando Git y GitHub",
    "section": "Crear Repo en GitHub",
    "text": "Crear Repo en GitHub\n\nCrear RepoDescripciónDirección HTTPS"
  },
  {
    "objectID": "clases/Clase_virtual_1.html#clonar-repositorio",
    "href": "clases/Clase_virtual_1.html#clonar-repositorio",
    "title": "Clase Virtual 1: Configurando Git y GitHub",
    "section": "Clonar Repositorio",
    "text": "Clonar Repositorio\nEn la Shell o Terminal\n\n# git clone https://github.com/javendaXgh/github_test.git\n\nMensaje similar a\n\nir a carpeta mendiante shell\n\n#cd github_test"
  },
  {
    "objectID": "clases/Clase_virtual_1.html#clonar-repositorio--cont.",
    "href": "clases/Clase_virtual_1.html#clonar-repositorio--cont.",
    "title": "Clase Virtual 1: Configurando Git y GitHub",
    "section": "Clonar Repositorio -cont.",
    "text": "Clonar Repositorio -cont.\nEjecutar una a una\n\n#ls\n\n\n#head README.md\n\n\n#git remote show origin\n\n\n\n\n\n🔗 ucveconomiar4ds"
  },
  {
    "objectID": "clases/test-interactiva.html",
    "href": "clases/test-interactiva.html",
    "title": "webR in Quarto HTML Documents",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/Clase_virtual_1.html",
    "href": "clases/Clase_virtual_1.html",
    "title": "Clase Virtual 1: Configurando Git y GitHub",
    "section": "",
    "text": "Estas láminas están basadas en el contenido desarrollado por la Profª. Jennifer Bryan en el libro electrónico Happy Git and GitHub for the useR , así como en el taller .. desarrollado por la profª Mine Çetinkaya-Rundel, .Teaching computing with Git and GitHub disponible en el link https://mine-cetinkaya-rundel.github.io/teach-r-online/03-git/03-git.html#1\n\nVerificar que han instalado paquetes"
  },
  {
    "objectID": "clases/clase_06.html#construir-funciones",
    "href": "clases/clase_06.html#construir-funciones",
    "title": "Ciencia de Datos para Economistas",
    "section": "Construir Funciones:",
    "text": "Construir Funciones:\nRepresentación de un 🎲\n\n¿Cómo lo hacemos?\nAyuda LLM\n\nFunciones disponibles\nSintaxis"
  },
  {
    "objectID": "clases/clase_06.html#función",
    "href": "clases/clase_06.html#función",
    "title": "Ciencia de Datos para Economistas",
    "section": "Función 🎲",
    "text": "Función 🎲\n\n\n¿Qué hace la fn?\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n¡Juguemos!\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_06.html#función-.",
    "href": "clases/clase_06.html#función-.",
    "title": "Ciencia de Datos para Economistas",
    "section": "Función 🎲🎲….🎲",
    "text": "Función 🎲🎲….🎲\n- ¿Entrada? =&gt; Argumentos\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_06.html#construir-data-frame",
    "href": "clases/clase_06.html#construir-data-frame",
    "title": "Ciencia de Datos para Economistas",
    "section": "Construir Data Frame",
    "text": "Construir Data Frame\n\nVectores Países\n\ncharacter\nnumeric\nlogical"
  },
  {
    "objectID": "clases/clase_06.html#section-1",
    "href": "clases/clase_06.html#section-1",
    "title": "Ciencia de Datos para Economistas",
    "section": "",
    "text": "🔗 ucveconomiar4ds"
  },
  {
    "objectID": "clases/clase_06.html#acceso-elementos-df",
    "href": "clases/clase_06.html#acceso-elementos-df",
    "title": "Ciencia de Datos para Economistas",
    "section": "Acceso Elementos DF",
    "text": "Acceso Elementos DF\n\n\n\nvector\nlista\nDF\n\n\n\n\n[ ]\n[ ]\n[ ]\n\n\n\n[[ ]]\n[[ ]]\n\n\n\n$\n$"
  },
  {
    "objectID": "clases/clase_06.html#ejemplos-accesos--vectores",
    "href": "clases/clase_06.html#ejemplos-accesos--vectores",
    "title": "Ciencia de Datos para Economistas",
    "section": "Ejemplos Accesos- Vectores",
    "text": "Ejemplos Accesos- Vectores\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_06.html",
    "href": "clases/clase_06.html",
    "title": "Ciencia de Datos para Economistas",
    "section": "",
    "text": "¿Cómo lo hacemos?\nAyuda LLM\nFunciones disponibles"
  },
  {
    "objectID": "clases/clase_06.html#principios-nombres-funciones",
    "href": "clases/clase_06.html#principios-nombres-funciones",
    "title": "Ciencia de Datos para Economistas",
    "section": "Principios Nombres Funciones",
    "text": "Principios Nombres Funciones\n\nDescripción Clara : El nombre debe claramente indicar qué hace la función. Evita nombres genéricos como funcion o proceso.\nConsistencia y Coherencia : Mantén un estilo de nomenclatura consistente dentro del proyecto o grupo para facilitar la lectura y comprensión del código."
  },
  {
    "objectID": "clases/clase_06.html#construir-data-frame-df",
    "href": "clases/clase_06.html#construir-data-frame-df",
    "title": "Ciencia de Datos para Economistas",
    "section": "Construir Data Frame (DF)",
    "text": "Construir Data Frame (DF)\ndatos World Bank\ncharacter/ nombres países\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nnumeric/ PIB año 2023\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nlogical\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_06.html#ejemplos-accesos--lista",
    "href": "clases/clase_06.html#ejemplos-accesos--lista",
    "title": "Ciencia de Datos para Economistas",
    "section": "Ejemplos Accesos- Lista",
    "text": "Ejemplos Accesos- Lista\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nMétodos [ ], $ y [[ ]]\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_06.html#ejemplos-accesos--df",
    "href": "clases/clase_06.html#ejemplos-accesos--df",
    "title": "Ciencia de Datos para Economistas",
    "section": "Ejemplos Accesos- DF",
    "text": "Ejemplos Accesos- DF\n[i,j] mediante índices\ni=fila\nj=columna\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n🔗 ucveconomiar4ds"
  },
  {
    "objectID": "clases/clase_06.html#ejemplos-accesos--df-fila",
    "href": "clases/clase_06.html#ejemplos-accesos--df-fila",
    "title": "Ciencia de Datos para Economistas",
    "section": "Ejemplos Accesos- DF/ fila",
    "text": "Ejemplos Accesos- DF/ fila\n[i,j] mediante índices\ni=fila\nj=columna\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_06.html#ejemplos-accesos--dfcolumna",
    "href": "clases/clase_06.html#ejemplos-accesos--dfcolumna",
    "title": "Ciencia de Datos para Economistas",
    "section": "Ejemplos Accesos- DF/columna",
    "text": "Ejemplos Accesos- DF/columna\n[i,j] mediante índices\ni=fila\nj=columna\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_06.html#ejemplos-accesos--df-elemento",
    "href": "clases/clase_06.html#ejemplos-accesos--df-elemento",
    "title": "Ciencia de Datos para Economistas",
    "section": "Ejemplos Accesos- DF/ elemento",
    "text": "Ejemplos Accesos- DF/ elemento\n[i,j] mediante índices\ni=fila\nj=columna\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n🔗 ucveconomiar4ds"
  },
  {
    "objectID": "clases/clase_06.html#ejemplos-accesos--lista-1",
    "href": "clases/clase_06.html#ejemplos-accesos--lista-1",
    "title": "Ciencia de Datos para Economistas",
    "section": "Ejemplos Accesos- Lista/",
    "text": "Ejemplos Accesos- Lista/\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n🔗 ucveconomiar4ds"
  },
  {
    "objectID": "clases/clase_06.html#principios-nombres-funciones---cont.",
    "href": "clases/clase_06.html#principios-nombres-funciones---cont.",
    "title": "Ciencia de Datos para Economistas",
    "section": "Principios Nombres Funciones - cont.",
    "text": "Principios Nombres Funciones - cont.\n\nUsa Minúsculas y Guiones Bajos : Comienza el nombre con una letra minúscula y utiliza guiones bajos (_) para separar palabras. Esto hace que los nombres sean más fáciles de leer y evitar conflictos con palabras reservadas.\nResto de normas para nombrar objetos y variables"
  },
  {
    "objectID": "clases/clase_06.html#construir-data-frame-df--cont.",
    "href": "clases/clase_06.html#construir-data-frame-df--cont.",
    "title": "Ciencia de Datos para Economistas",
    "section": "Construir Data Frame (DF)- cont.",
    "text": "Construir Data Frame (DF)- cont.\n\nlogical\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nLista con vectores del mismo length()\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_06.html#construir-df",
    "href": "clases/clase_06.html#construir-df",
    "title": "Ciencia de Datos para Economistas",
    "section": "Construir DF",
    "text": "Construir DF\nLista con vectores del mismo length()\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_06.html#comparación-elementos",
    "href": "clases/clase_06.html#comparación-elementos",
    "title": "Ciencia de Datos para Economistas",
    "section": "Comparación Elementos",
    "text": "Comparación Elementos\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_06_v2.html",
    "href": "clases/clase_06_v2.html",
    "title": "Ciencia de Datos para Economistas",
    "section": "",
    "text": "¿Cómo lo hacemos?\nAyuda LLM\n\nFunciones disponibles\nSintaxis"
  },
  {
    "objectID": "clases/clase_06_v2.html#construir-funciones",
    "href": "clases/clase_06_v2.html#construir-funciones",
    "title": "Ciencia de Datos para Economistas",
    "section": "Construir Funciones:",
    "text": "Construir Funciones:\nRepresentación de un 🎲\n\n¿Cómo lo hacemos?\nAyuda LLM\n\nFunciones disponibles\nSintaxis"
  },
  {
    "objectID": "clases/clase_06_v2.html#función",
    "href": "clases/clase_06_v2.html#función",
    "title": "Ciencia de Datos para Economistas",
    "section": "Función 🎲",
    "text": "Función 🎲\n¿Qué debe hacer la función? ¿Qué debe representar?\n\n# ejecutar código y gradualmente descomentar líneas\nposibles_salidas_dado &lt;- c(1:6)\n# sample(posibles_salidas_dado, 1)\n# sample(posibles_salidas_dado, 2)\n# sample(posibles_salidas_dado, 3)\n# sample(posibles_salidas_dado, 7) # genera error\n# sample(posibles_salidas_dado, 7, replace=TRUE)\n\n¡Juguemos!\n\n# primera versión función\n\nlanzamiento &lt;- function(cdad_dados){\n  sample(1:6,cdad_dados, replace=TRUE)\n}\n\n# arrojar dado según función que crearmos\nlanzamiento (cdad_dados=3)\n\n[1] 4 6 6\n\nlanzamiento (cdad_dados=6)\n\n[1] 2 4 4 3 2 5"
  },
  {
    "objectID": "clases/clase_06_v2.html#función-.",
    "href": "clases/clase_06_v2.html#función-.",
    "title": "Ciencia de Datos para Economistas",
    "section": "Función 🎲🎲….🎲",
    "text": "Función 🎲🎲….🎲\n- ¿Entrada? =&gt; Argumentos\n\n# función con dos argumentos\nlanzamiento &lt;- function (cdad_dados,\n                         nombre_jugador){\n  resultado &lt;- sample (1:6,cdad_dados, replace = TRUE )\n  \n  paste(nombre_jugador, 'obtuvo el siguiente resultado',\n        resultado)\n}\n\n#La siguiente llamada a la función generará error ya que no contiente\n# dentro el valor del segundo argumento que es el nombre del jugador\n\n# lanzamiento(cdad_dados= 4)\n\nlanzamiento(nombre_jugador= 'Braian',\n            cdad_dados= 2)\n\n[1] \"Braian obtuvo el siguiente resultado 2\" \"Braian obtuvo el siguiente resultado 3\"\n\n# la siguiente ejecución generará un problema al no nombrar los\n# argumentos y en orden posicional, pasar \"Braian\" como el primer\n# argumento, que en la función que declaramos como \"lanzamiento\"\n# corresponde a \"cdad_dados\", que debe ser de tipo numérico. \n\n# Lo mismo pasaría con el segundo argumento que estamos pasando que en este caso es 5,\n# pero no lo estamos referenciando con el nombre del argumento en la \n# función, que corresponde en la segunda posición al de nombre_jugador\n\n#lanzamiento( 'Braian',\n#             5)\n\nlanzamiento(2,'Jose')\n\n[1] \"Jose obtuvo el siguiente resultado 5\" \"Jose obtuvo el siguiente resultado 6\"\n\n\nPara entender mejor la construcción de las funciones les recomiendo la lectura de esta sección del libro Hands On Promgramming With R https://rstudio-education.github.io/hopr/basics.html#sample-with-replacement que va muy similar a lo que revisamos en clase en cuanto al ejemplo del 🎲.\nPara revisar documentación de la función paste ejecutar ?paste en la consola."
  },
  {
    "objectID": "clases/clase_06_v2.html#principios-nombres-funciones",
    "href": "clases/clase_06_v2.html#principios-nombres-funciones",
    "title": "Ciencia de Datos para Economistas",
    "section": "Principios Nombres Funciones",
    "text": "Principios Nombres Funciones\n\nDescripción Clara : El nombre debe claramente indicar qué hace la función. Evita nombres genéricos como funcion o proceso.\nConsistencia y Coherencia : Mantén un estilo de nomenclatura consistente dentro del proyecto o grupo para facilitar la lectura y comprensión del código."
  },
  {
    "objectID": "clases/clase_06_v2.html#principios-nombres-funciones---cont.",
    "href": "clases/clase_06_v2.html#principios-nombres-funciones---cont.",
    "title": "Ciencia de Datos para Economistas",
    "section": "Principios Nombres Funciones - cont.",
    "text": "Principios Nombres Funciones - cont.\n\nUsa Minúsculas y Guiones Bajos : Comienza el nombre con una letra minúscula y utiliza guiones bajos (_) para separar palabras. Esto hace que los nombres sean más fáciles de leer y evitar conflictos con palabras reservadas.\nResto de normas para nombrar objetos y variables"
  },
  {
    "objectID": "clases/clase_06_v2.html#construir-data-frame-df",
    "href": "clases/clase_06_v2.html#construir-data-frame-df",
    "title": "Ciencia de Datos para Economistas",
    "section": "Construir Data Frame (DF)",
    "text": "Construir Data Frame (DF)\ndatos World Bank\ncharacter/ nombres países\n\nnombre_paises &lt;- c('togo','japon','irlanda')\nnombre_paises\n\n[1] \"togo\"    \"japon\"   \"irlanda\"\n\n\nnumeric/ PIB año 2023\n\n# vector para registrar variación PIB\nvar_pib &lt;- c (-1.7, 2.3, -3.1 ) # separador décimal es el punto! ojo\n# datos inventados, no obtenidos de la página\nvar_pib\n\n[1] -1.7  2.3 -3.1\n\n\nlogical\n\n##########################################################\ncrecimiento_presente &lt;- var_pib &gt;0\ncrecimiento_presente\n\n[1] FALSE  TRUE FALSE\n\n# crear un vector de tipo logical donde se determina si cada elemento de var_pib es mayor que cero"
  },
  {
    "objectID": "clases/clase_06_v2.html#construir-df",
    "href": "clases/clase_06_v2.html#construir-df",
    "title": "Ciencia de Datos para Economistas",
    "section": "Construir DF",
    "text": "Construir DF\nRecordar la relación de orden que tenemos entre los tres vectores\npaises - var_pib - crecimiento_presente\nLista con vectores del mismo length() . En la consola ejecutar para cada vector la función length de la siguiente forma length(var_pib) .\n\n# usar la función de R que se llama data_frame\ndf_pib_paises &lt;- data.frame(pais= nombre_paises,\n                            delta_PIB= var_pib,\n                            crecimiento= crecimiento_presente)\n# esta función de nombre data.frame, puede tomar tantos argumentos como sean necesarios, siendo cada argumento el nombre que se le dará a cada columna (o atributo) seguido de un signo igual y posteriormente los datos que conformarán cada columna, por ejemplo: pais= nombre_paises\n\n# Al crear la data frame, se colocaran tantos argumentos, como columnas se quieran tener, y como en toda función, serán separados por una coma \",\" la indicación del argumento.\n\n\ndf_pib_paises # mostrar la Data Frame Creada\n\n     pais delta_PIB crecimiento\n1    togo      -1.7       FALSE\n2   japon       2.3        TRUE\n3 irlanda      -3.1       FALSE\n\n# recordar que para construir una DF desde distintos vectores necesitamos que cada vector contenta la misma cdad de elementos, en este caso son 3.\n#"
  },
  {
    "objectID": "clases/clase_06_v2.html#consultar-la-clase-del-objeto-creado",
    "href": "clases/clase_06_v2.html#consultar-la-clase-del-objeto-creado",
    "title": "Ciencia de Datos para Economistas",
    "section": "Consultar la clase del objeto creado:",
    "text": "Consultar la clase del objeto creado:\n\nclass (df_pib_paises)\n\n[1] \"data.frame\"\n\n\nEn el libro electrónico “R para Principiantes” de Juan B. Mendoza, pueden revisar algún complemento sobre las data frames, disponible en https://bookdown.org/jboscomendoza/r-principiantes4/data-frames.html"
  },
  {
    "objectID": "clases/clase_06_v2.html#acceso-elementos-vectores-listas-y-data-frames",
    "href": "clases/clase_06_v2.html#acceso-elementos-vectores-listas-y-data-frames",
    "title": "Ciencia de Datos para Economistas",
    "section": "Acceso Elementos Vectores, Listas y Data Frames",
    "text": "Acceso Elementos Vectores, Listas y Data Frames\nSe disponen de estos operadores para acceder a los elementos que conforman los vectores, listas y Data Frames\n\n\n\nvector\nlista\nDF\n\n\n\n\n[ ]\n[ ]\n[ ]\n\n\n\n[[ ]]\n[[ ]]\n\n\n\n$\n$"
  },
  {
    "objectID": "clases/clase_06_v2.html#ejemplos-accesos--vectores",
    "href": "clases/clase_06_v2.html#ejemplos-accesos--vectores",
    "title": "Ciencia de Datos para Economistas",
    "section": "Ejemplos Accesos- Vectores",
    "text": "Ejemplos Accesos- Vectores\n\nvector_demo &lt;- seq(from= 5, to =35, by=3)\nvector_demo\n\n [1]  5  8 11 14 17 20 23 26 29 32 35\n\n\n\nvector_demo [3]\n\n[1] 11\n\n\n\nvector_demo [[3]]\n\n[1] 11\n\n\nLos dos métodos de acceso, mediante los operadores [ y [[ generan el mismo resultado cuando se trabaja con vectores."
  },
  {
    "objectID": "clases/clase_06_v2.html#ejemplos-accesos--lista",
    "href": "clases/clase_06_v2.html#ejemplos-accesos--lista",
    "title": "Ciencia de Datos para Economistas",
    "section": "Ejemplos Accesos- Lista",
    "text": "Ejemplos Accesos- Lista\nEn el libro “R para Principiantes” de Juan B. Mendoza , en el acceso https://bookdown.org/jboscomendoza/r-principiantes4/listas.html , pueden obtener información adicional sobre qué son las listas\n\nmonth.name # el objeto month.name viene precargado en R\n\n [1] \"January\"   \"February\"  \"March\"     \"April\"     \"May\"       \"June\"      \"July\"     \n [8] \"August\"    \"September\" \"October\"   \"November\"  \"December\" \n\nletters # el objeto letters viene precargado en R\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"t\" \"u\"\n[22] \"v\" \"w\" \"x\" \"y\" \"z\"\n\nlista_demo &lt;- list(meses= month.name, letras= letters, numeros= 1:12)\nlista_demo # verificamos contenido de la lista\n\n$meses\n [1] \"January\"   \"February\"  \"March\"     \"April\"     \"May\"       \"June\"      \"July\"     \n [8] \"August\"    \"September\" \"October\"   \"November\"  \"December\" \n\n$letras\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"t\" \"u\"\n[22] \"v\" \"w\" \"x\" \"y\" \"z\"\n\n$numeros\n [1]  1  2  3  4  5  6  7  8  9 10 11 12\n\n\nMétodos de acceso [ ], $ y [[ ]]\n\nlista_demo[1]\n\n$meses\n [1] \"January\"   \"February\"  \"March\"     \"April\"     \"May\"       \"June\"      \"July\"     \n [8] \"August\"    \"September\" \"October\"   \"November\"  \"December\" \n\n# ir descomentando línea a línea para evaluar los resultados\n# lista_demo$meses \n# lista_demo[[1]]"
  },
  {
    "objectID": "clases/clase_06_v2.html#comparación-elementos",
    "href": "clases/clase_06_v2.html#comparación-elementos",
    "title": "Ciencia de Datos para Economistas",
    "section": "Comparación Elementos",
    "text": "Comparación Elementos\nSe hace una comparación de tipo lógico, entre la igualdad de cada uno de los elementos que arroja lista_demo$meses con los elementos que arroja lista_demo[[1]]\n\nlista_demo$meses == lista_demo[[1]]\n\n [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n\nSe puede ver, uno a uno, que todos los elementos que arroja cada uno de los métodos de acceso, son iguales puesto que aparecen todos los valores como TRUE"
  },
  {
    "objectID": "clases/clase_06_v2.html#ejemplos-accesos--lista-1",
    "href": "clases/clase_06_v2.html#ejemplos-accesos--lista-1",
    "title": "Ciencia de Datos para Economistas",
    "section": "Ejemplos Accesos- Lista/",
    "text": "Ejemplos Accesos- Lista/\n\n# ir descomentando línea a línea para evaluar los resultados\nlista_demo[[1]][3]\n\n[1] \"March\"\n\n#lista_demo$meses[3]"
  },
  {
    "objectID": "clases/clase_06_v2.html#pendiente-por-revisar-en-próxima-clase",
    "href": "clases/clase_06_v2.html#pendiente-por-revisar-en-próxima-clase",
    "title": "Ciencia de Datos para Economistas",
    "section": "Pendiente por Revisar en próxima Clase",
    "text": "Pendiente por Revisar en próxima Clase\nLas dos clases pasadas (5 y 6) ha quedado pendiente abordar estos dos temas:\n\nConsultar Vignettes y Cheat Sheets\nAcceso a elementos de df (filas, columnas o valor determinado)"
  },
  {
    "objectID": "clases/clase_06_v2.html#vídeo-de-interés",
    "href": "clases/clase_06_v2.html#vídeo-de-interés",
    "title": "Ciencia de Datos para Economistas",
    "section": "Vídeo de Interés",
    "text": "Vídeo de Interés\nLa próxima semana empezamos a trabajar con el libro R4DS de Hadley Wickham y el segundo capítulo versa sobre la visualización de los datos, así que el siguiente vídeo puede resultar de interés https://www.youtube.com/watch?v=jbkSRLYSojo\n\n\n\n\n🔗 ucveconomiar4ds"
  },
  {
    "objectID": "clases/clase_06_codigo.html",
    "href": "clases/clase_06_codigo.html",
    "title": "pendiente",
    "section": "",
    "text": "codigos ayuda\nlibrary(usethis) ## git_sitrep()\nusethis::git_vaccinate()\nusethis::edit_r_environ()\ngitcreds::gitcreds_set()\nCapitulo PAT y problemas https://happygitwithr.com/https-pat\ngit_sitrep()\n\n\npendiente\n\n\nacceso a elementos de df (filas, columnas o valor determinado)\n\n\ncheat sheets y vignettes\n\n\nhttps://www.youtube.com/watch?v=jbkSRLYSojo"
  },
  {
    "objectID": "laboratorios/clase6_pract1.html",
    "href": "laboratorios/clase6_pract1.html",
    "title": "Clase 6 / Práctica 1",
    "section": "",
    "text": "Para crear un comentario en una línea de código se usa el signo numeral al inicio de la línea. Esto le indica a R que esa línea la debe ignorar a la hora de ejecutar el código.\nCrea un archivo de texto llamado “mi_primer_archivo.R” con una línea comentada que diga “Este es mi primer archivo en R”. Verifica en la sección derecha de RStudio, en la tab “files”, la ruta donde estás guardando el archivo\n\n\n\n\n\n\nInstala los paquetes dplyr y stringr.\n\n# descomentar línea de abajo (quitar numeral)\n\n#install.packages('dplyr')\n#install.packages('stringr')\n\n\n\n\nCarga los paquetes instalados\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(stringr)\n\n\n\n\n\nIntroducción:\n\n¿Qué es un vector? Un vector es una secuencia de elementos del mismo tipo. En R, los vectores pueden contener números, caracteres, valores lógicos, fechas, y más.\n¿Cómo crear un vector? Se utiliza la función c() para combinar elementos en un vector.\nVariables: es similar a una caja con un nombre, donde guardamos información que puede cambiar. En programación, usamos variables para almacenar datos que necesitamos más tarde.\nOperador de asignación: El operador &lt;- es como una flecha que apunta desde el valor hacia la caja, indicando que el valor de la derecha se asigna a la variable de la izquierda.\n\nEjemplos Completos:\n\n# Vector numérico\nnumeros &lt;- c(1, 2, 3, 4, 5)\n# la variable se llama numeros y su contenido es 1, 2, 3, 4, 5\n\n\n# Vector de caracteres\ndias_semana &lt;- c(\"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\", \"domingo\")\n\n# la variable se llama dias_semana y su contenido es \"lunes\", \"martes\",....\n# prestar atención a comillas al inicio y final de cada día de la semana\n\n\n# Vector lógico\nmayores_edad &lt;- c(TRUE, FALSE, TRUE)\n# la variable se llama mayores_edad y tiene asignado los valores TRUE, FALSE,TRUE \n# importante: los valores lógicos no van entre comillas\n\n\n# vectores con la fecha\nfechas_nacimiento &lt;- c('2010-01-01', \"2005-06-10\",'1999-10-31')\n\n# prestar atención al uso de comillas simples y dobles\n\n\n\n\nLos chunks anteriores tienen que haber sido ejecutados. Es ideal que los códigos se ejecuten secuencialmente dentro de un script.\n\nprint(numeros)\n\n[1] 1 2 3 4 5\n\n\n\nprint(mayores_edad)\n\n[1]  TRUE FALSE  TRUE\n\n\n\nprint(dias_semana)\n\n[1] \"lunes\"     \"martes\"    \"miércoles\" \"jueves\"    \"viernes\"   \"sábado\"   \n[7] \"domingo\"  \n\n\n\nprint(fechas_nacimiento)\n\n[1] \"2010-01-01\" \"2005-06-10\" \"1999-10-31\"\n\n\n\n\n\n\n# descomentar línea de abajo (quitar numeral)\n#numeros_pares &lt;- c(2, 4, 6, , 10)\n\n\n# descomentar línea de abajo (quitar numeral)\n# mis_frutas &lt;- c(\"manzana', \"banana\", 'uva´)\n\n\n# descomentar línea de abajo (quitar numeral)\n#mayor_que_cinco &lt; - c(6, 8, 10)\n\n\n\n\n\nCrear un vector numérico:\nPara añadir un chunk de código se debe presionar el botón verde en la barra de herramientas \nPara cada uno de los ejercicios indicados se debe añadir un chunk distinto repitiendo el procedimiento\n\nCon los números pares del 2 al 10.\nCon los números impares del 1 al 9.\n\nCrear un vector de caracteres:\n\nCon el nombre de la Facultad y de la Universidad.\nCon los nombres de los tres primeros meses del año.\n\nCrear un vector lógico:\n\nIndicando si cada número del 1 al 5 es mayor que 3.Indicando si cada letra de la palabra “banana” es una “a”.\n\nCrear un vector de fechas:\n\nDel primer día y último día de tres meses de el año que prefieras"
  },
  {
    "objectID": "laboratorios/clase6_pract1.html#ejercicios-prácticos",
    "href": "laboratorios/clase6_pract1.html#ejercicios-prácticos",
    "title": "Clase 6 / Práctica 1",
    "section": "",
    "text": "Para crear un comentario en una línea de código se usa el signo numeral al inicio de la línea. Esto le indica a R que esa línea la debe ignorar a la hora de ejecutar el código.\nCrea un archivo de texto llamado “mi_primer_archivo.R” con una línea comentada que diga “Este es mi primer archivo en R”. Verifica en la sección derecha de RStudio, en la tab “files”, la ruta donde estás guardando el archivo\n\n\n\n\n\n\nInstala los paquetes dplyr y stringr.\n\n# descomentar línea de abajo (quitar numeral)\n\n#install.packages('dplyr')\n#install.packages('stringr')\n\n\n\n\nCarga los paquetes instalados\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(stringr)\n\n\n\n\n\nIntroducción:\n\n¿Qué es un vector? Un vector es una secuencia de elementos del mismo tipo. En R, los vectores pueden contener números, caracteres, valores lógicos, fechas, y más.\n¿Cómo crear un vector? Se utiliza la función c() para combinar elementos en un vector.\nVariables: es similar a una caja con un nombre, donde guardamos información que puede cambiar. En programación, usamos variables para almacenar datos que necesitamos más tarde.\nOperador de asignación: El operador &lt;- es como una flecha que apunta desde el valor hacia la caja, indicando que el valor de la derecha se asigna a la variable de la izquierda.\n\nEjemplos Completos:\n\n# Vector numérico\nnumeros &lt;- c(1, 2, 3, 4, 5)\n# la variable se llama numeros y su contenido es 1, 2, 3, 4, 5\n\n\n# Vector de caracteres\ndias_semana &lt;- c(\"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\", \"domingo\")\n\n# la variable se llama dias_semana y su contenido es \"lunes\", \"martes\",....\n# prestar atención a comillas al inicio y final de cada día de la semana\n\n\n# Vector lógico\nmayores_edad &lt;- c(TRUE, FALSE, TRUE)\n# la variable se llama mayores_edad y tiene asignado los valores TRUE, FALSE,TRUE \n# importante: los valores lógicos no van entre comillas\n\n\n# vectores con la fecha\nfechas_nacimiento &lt;- c('2010-01-01', \"2005-06-10\",'1999-10-31')\n\n# prestar atención al uso de comillas simples y dobles\n\n\n\n\nLos chunks anteriores tienen que haber sido ejecutados. Es ideal que los códigos se ejecuten secuencialmente dentro de un script.\n\nprint(numeros)\n\n[1] 1 2 3 4 5\n\n\n\nprint(mayores_edad)\n\n[1]  TRUE FALSE  TRUE\n\n\n\nprint(dias_semana)\n\n[1] \"lunes\"     \"martes\"    \"miércoles\" \"jueves\"    \"viernes\"   \"sábado\"   \n[7] \"domingo\"  \n\n\n\nprint(fechas_nacimiento)\n\n[1] \"2010-01-01\" \"2005-06-10\" \"1999-10-31\"\n\n\n\n\n\n\n# descomentar línea de abajo (quitar numeral)\n#numeros_pares &lt;- c(2, 4, 6, , 10)\n\n\n# descomentar línea de abajo (quitar numeral)\n# mis_frutas &lt;- c(\"manzana', \"banana\", 'uva´)\n\n\n# descomentar línea de abajo (quitar numeral)\n#mayor_que_cinco &lt; - c(6, 8, 10)\n\n\n\n\n\nCrear un vector numérico:\nPara añadir un chunk de código se debe presionar el botón verde en la barra de herramientas \nPara cada uno de los ejercicios indicados se debe añadir un chunk distinto repitiendo el procedimiento\n\nCon los números pares del 2 al 10.\nCon los números impares del 1 al 9.\n\nCrear un vector de caracteres:\n\nCon el nombre de la Facultad y de la Universidad.\nCon los nombres de los tres primeros meses del año.\n\nCrear un vector lógico:\n\nIndicando si cada número del 1 al 5 es mayor que 3.Indicando si cada letra de la palabra “banana” es una “a”.\n\nCrear un vector de fechas:\n\nDel primer día y último día de tres meses de el año que prefieras"
  },
  {
    "objectID": "practicas/clase6_pract1.html",
    "href": "practicas/clase6_pract1.html",
    "title": "Clase 6 / Práctica 1",
    "section": "",
    "text": "Para crear un comentario en una línea de código se usa el signo numeral al inicio de la línea. Esto le indica a R que esa línea la debe ignorar a la hora de ejecutar el código.\nCrea un archivo de texto llamado “mi_primer_archivo.R” con una línea comentada que diga “Este es mi primer archivo en R”. Verifica en la sección derecha de RStudio, en la tab “files”, la ruta donde estás guardando el archivo\n\n\n\n\n\n\nInstala los paquetes dplyr y stringr.\n\n# descomentar línea de abajo (quitar numeral)\n\n#install.packages('dplyr')\n#install.packages('stringr')\n\n\n\n\nCarga los paquetes instalados\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(stringr)\n\n\n\n\n\nIntroducción:\n\n¿Qué es un vector? Un vector es una secuencia de elementos del mismo tipo. En R, los vectores pueden contener números, caracteres, valores lógicos, fechas, y más.\n¿Cómo crear un vector? Se utiliza la función c() para combinar elementos en un vector.\nVariables: es similar a una caja con un nombre, donde guardamos información que puede cambiar. En programación, usamos variables para almacenar datos que necesitamos más tarde.\nOperador de asignación: El operador &lt;- es como una flecha que apunta desde el valor hacia la caja, indicando que el valor de la derecha se asigna a la variable de la izquierda.\n\nEjemplos Completos:\n\n# Vector numérico\nnumeros &lt;- c(1, 2, 3, 4, 5)\n# la variable se llama numeros y su contenido es 1, 2, 3, 4, 5\n\n\n# Vector de caracteres\ndias_semana &lt;- c(\"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\", \"domingo\")\n\n# la variable se llama dias_semana y su contenido es \"lunes\", \"martes\",....\n# prestar atención a comillas al inicio y final de cada día de la semana\n\n\n# Vector lógico\nmayores_edad &lt;- c(TRUE, FALSE, TRUE)\n# la variable se llama mayores_edad y tiene asignado los valores TRUE, FALSE,TRUE \n# importante: los valores lógicos no van entre comillas\n\n\n# vectores con la fecha\nfechas_nacimiento &lt;- c('2010-01-01', \"2005-06-10\",'1999-10-31')\n\n# prestar atención al uso de comillas simples y dobles\n\n\n\n\nLos chunks anteriores tienen que haber sido ejecutados. Es ideal que los códigos se ejecuten secuencialmente dentro de un script.\n\nprint(numeros)\n\n[1] 1 2 3 4 5\n\n\n\nprint(mayores_edad)\n\n[1]  TRUE FALSE  TRUE\n\n\n\nprint(dias_semana)\n\n[1] \"lunes\"     \"martes\"    \"miércoles\" \"jueves\"    \"viernes\"   \"sábado\"   \n[7] \"domingo\"  \n\n\n\nprint(fechas_nacimiento)\n\n[1] \"2010-01-01\" \"2005-06-10\" \"1999-10-31\"\n\n\n\n\n\n\n# descomentar línea de abajo (quitar numeral)\n#numeros_pares &lt;- c(2, 4, 6, , 10)\n\n\n# descomentar línea de abajo (quitar numeral)\n# mis_frutas &lt;- c(\"manzana', \"banana\", 'uva´)\n\n\n# descomentar línea de abajo (quitar numeral)\n#mayor_que_cinco &lt; - c(6, 8, 10)\n\n\n\n\n\nCrear un vector numérico:\nPara añadir un chunk de código se debe presionar el botón verde en la barra de herramientas \nPara cada uno de los ejercicios indicados se debe añadir un chunk distinto repitiendo el procedimiento\n\nCon los números pares del 2 al 10.\nCon los números impares del 1 al 9.\n\nCrear un vector de caracteres:\n\nCon el nombre de la Facultad y de la Universidad.\nCon los nombres de los tres primeros meses del año.\n\nCrear un vector lógico:\n\nIndicando si cada número del 1 al 5 es mayor que 3.Indicando si cada letra de la palabra “banana” es una “a”.\n\nCrear un vector de fechas:\n\nDel primer día y último día de tres meses de el año que prefieras",
    "crumbs": [
      "Prácticas",
      "clase 6 / práctica 1"
    ]
  },
  {
    "objectID": "practicas/clase6_pract1.html#ejercicios-prácticos",
    "href": "practicas/clase6_pract1.html#ejercicios-prácticos",
    "title": "Clase 6 / Práctica 1",
    "section": "",
    "text": "Para crear un comentario en una línea de código se usa el signo numeral al inicio de la línea. Esto le indica a R que esa línea la debe ignorar a la hora de ejecutar el código.\nCrea un archivo de texto llamado “mi_primer_archivo.R” con una línea comentada que diga “Este es mi primer archivo en R”. Verifica en la sección derecha de RStudio, en la tab “files”, la ruta donde estás guardando el archivo\n\n\n\n\n\n\nInstala los paquetes dplyr y stringr.\n\n# descomentar línea de abajo (quitar numeral)\n\n#install.packages('dplyr')\n#install.packages('stringr')\n\n\n\n\nCarga los paquetes instalados\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(stringr)\n\n\n\n\n\nIntroducción:\n\n¿Qué es un vector? Un vector es una secuencia de elementos del mismo tipo. En R, los vectores pueden contener números, caracteres, valores lógicos, fechas, y más.\n¿Cómo crear un vector? Se utiliza la función c() para combinar elementos en un vector.\nVariables: es similar a una caja con un nombre, donde guardamos información que puede cambiar. En programación, usamos variables para almacenar datos que necesitamos más tarde.\nOperador de asignación: El operador &lt;- es como una flecha que apunta desde el valor hacia la caja, indicando que el valor de la derecha se asigna a la variable de la izquierda.\n\nEjemplos Completos:\n\n# Vector numérico\nnumeros &lt;- c(1, 2, 3, 4, 5)\n# la variable se llama numeros y su contenido es 1, 2, 3, 4, 5\n\n\n# Vector de caracteres\ndias_semana &lt;- c(\"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\", \"domingo\")\n\n# la variable se llama dias_semana y su contenido es \"lunes\", \"martes\",....\n# prestar atención a comillas al inicio y final de cada día de la semana\n\n\n# Vector lógico\nmayores_edad &lt;- c(TRUE, FALSE, TRUE)\n# la variable se llama mayores_edad y tiene asignado los valores TRUE, FALSE,TRUE \n# importante: los valores lógicos no van entre comillas\n\n\n# vectores con la fecha\nfechas_nacimiento &lt;- c('2010-01-01', \"2005-06-10\",'1999-10-31')\n\n# prestar atención al uso de comillas simples y dobles\n\n\n\n\nLos chunks anteriores tienen que haber sido ejecutados. Es ideal que los códigos se ejecuten secuencialmente dentro de un script.\n\nprint(numeros)\n\n[1] 1 2 3 4 5\n\n\n\nprint(mayores_edad)\n\n[1]  TRUE FALSE  TRUE\n\n\n\nprint(dias_semana)\n\n[1] \"lunes\"     \"martes\"    \"miércoles\" \"jueves\"    \"viernes\"   \"sábado\"   \n[7] \"domingo\"  \n\n\n\nprint(fechas_nacimiento)\n\n[1] \"2010-01-01\" \"2005-06-10\" \"1999-10-31\"\n\n\n\n\n\n\n# descomentar línea de abajo (quitar numeral)\n#numeros_pares &lt;- c(2, 4, 6, , 10)\n\n\n# descomentar línea de abajo (quitar numeral)\n# mis_frutas &lt;- c(\"manzana', \"banana\", 'uva´)\n\n\n# descomentar línea de abajo (quitar numeral)\n#mayor_que_cinco &lt; - c(6, 8, 10)\n\n\n\n\n\nCrear un vector numérico:\nPara añadir un chunk de código se debe presionar el botón verde en la barra de herramientas \nPara cada uno de los ejercicios indicados se debe añadir un chunk distinto repitiendo el procedimiento\n\nCon los números pares del 2 al 10.\nCon los números impares del 1 al 9.\n\nCrear un vector de caracteres:\n\nCon el nombre de la Facultad y de la Universidad.\nCon los nombres de los tres primeros meses del año.\n\nCrear un vector lógico:\n\nIndicando si cada número del 1 al 5 es mayor que 3.Indicando si cada letra de la palabra “banana” es una “a”.\n\nCrear un vector de fechas:\n\nDel primer día y último día de tres meses de el año que prefieras",
    "crumbs": [
      "Prácticas",
      "clase 6 / práctica 1"
    ]
  },
  {
    "objectID": "clases/clase_07.html#estructuras-de-datos",
    "href": "clases/clase_07.html#estructuras-de-datos",
    "title": "Ciencia de Datos para Economistas",
    "section": "Estructuras de Datos",
    "text": "Estructuras de Datos\n\n\n\n\n\n\n\n\nObjeto\nR\nEjemplo\n\n\n\n\n\nvector atómico\nc(1)\n\n\n ️\nvector\nc(‘a’, ‘x’, ‘d’)\n\n\n\nmátriz\nmatrix(1:8,2,4)"
  },
  {
    "objectID": "clases/clase_07.html#estructuras-de-datos-2",
    "href": "clases/clase_07.html#estructuras-de-datos-2",
    "title": "Ciencia de Datos para Economistas",
    "section": "Estructuras de Datos 2",
    "text": "Estructuras de Datos 2\n\n\n\n\n\n\n\n\nObjeto\nR\nEjemplo\n\n\n\n\n\nlista\nlista_test &lt;- list(primer=c(‘a’, ‘x’), segun=c(1))\n\n\n\ndata frame\nmtcars\n\n\n\ntibble\nas_tibble(mtcars)"
  },
  {
    "objectID": "clases/clase_07.html#data-frames",
    "href": "clases/clase_07.html#data-frames",
    "title": "Ciencia de Datos para Economistas",
    "section": "Data Frames",
    "text": "Data Frames\nLas data frames son un tipo de estructura de datos en R que permite almacenar y manipular conjuntos de datos tabulares. Es similar a un conjunto de hojas de cálculo o una tabla SQL.\nCaracterísticas principales del data frame:\n\nColumnas Variadas : Cada columna puede contener datos de diferentes tipos (numéricos, caracteres, factores, etc.).\nFilas Etiquetadas : Las filas pueden estar etiquetadas con nombres."
  },
  {
    "objectID": "clases/clase_07.html#data-frames---cont.",
    "href": "clases/clase_07.html#data-frames---cont.",
    "title": "Ciencia de Datos para Economistas",
    "section": "Data Frames - cont.",
    "text": "Data Frames - cont.\n\nEstructura Tabular : Los datos están organizados en filas y columnas, lo que hace que sean fáciles de leer y analizar.\nManipulación Flexible : Se pueden realizar operaciones complejas sobre los datos, como selección, filtrado, agrupamiento y transformación."
  },
  {
    "objectID": "clases/clase_07.html#acceso-elementos-df",
    "href": "clases/clase_07.html#acceso-elementos-df",
    "title": "Ciencia de Datos para Economistas",
    "section": "Acceso Elementos DF",
    "text": "Acceso Elementos DF\n\n\n\nVector\nlista\nDF\n\n\n\n\n[ ]\n[ ]\n[ ]\n\n\n\n[[ ]]\n[[ ]]\n\n\n\n$\n$"
  },
  {
    "objectID": "clases/clase_07.html#ejemplos-accesos--df-fila",
    "href": "clases/clase_07.html#ejemplos-accesos--df-fila",
    "title": "Ciencia de Datos para Economistas",
    "section": "Ejemplos Accesos- DF/ fila",
    "text": "Ejemplos Accesos- DF/ fila\n[i,j] mediante índices\ni=fila\nj=columna\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_07.html#ejemplos-accesos--dfcolumna",
    "href": "clases/clase_07.html#ejemplos-accesos--dfcolumna",
    "title": "Ciencia de Datos para Economistas",
    "section": "Ejemplos Accesos- DF/columna",
    "text": "Ejemplos Accesos- DF/columna\n[i,j] mediante índices\ni=fila\nj=columna\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_07.html#ejemplos-accesos--df-elemento",
    "href": "clases/clase_07.html#ejemplos-accesos--df-elemento",
    "title": "Ciencia de Datos para Economistas",
    "section": "Ejemplos Accesos- DF/ elemento",
    "text": "Ejemplos Accesos- DF/ elemento\n[i,j] mediante índices\ni=fila\nj=columna\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_07.html#da-parte-ayudas",
    "href": "clases/clase_07.html#da-parte-ayudas",
    "title": "Ciencia de Datos para Economistas",
    "section": "2da Parte/ Ayudas",
    "text": "2da Parte/ Ayudas\n\n\n\n\n¿Para qué necesitamos ayuda? Opciones:\n\nManual del Paquete\nVignettes\nCheat Sheets\nOtras (LLM´s, googlear, stackoverflow, foros, etc)"
  },
  {
    "objectID": "clases/clase_07.html#vignettes",
    "href": "clases/clase_07.html#vignettes",
    "title": "Ciencia de Datos para Economistas",
    "section": "Vignettes",
    "text": "Vignettes\nSon documentos en formato HTML o PDF que proporcionan tutoriales, ejemplos de código y descripciones detalladas sobre el uso de ciertos paquetes."
  },
  {
    "objectID": "clases/clase_07.html#características-vignettes",
    "href": "clases/clase_07.html#características-vignettes",
    "title": "Ciencia de Datos para Economistas",
    "section": "Características vignettes:",
    "text": "Características vignettes:\n\nEjemplos\nContenido Detallado\nVersión Interactiva\nDocumentación Adicional\n\n\nAcceso Vignettes\nPara acceder a las vignettes de un paquete específico, puedes usar la siguiente función en R browseVignettes(\"nombre_del_paquete\")"
  },
  {
    "objectID": "clases/clase_07.html#cheat-sheets",
    "href": "clases/clase_07.html#cheat-sheets",
    "title": "Ciencia de Datos para Economistas",
    "section": "Cheat Sheets",
    "text": "Cheat Sheets\nLas cheat sheets (hojas rápidas o hojas de trucos) son documentos en formato PDF que resumen información esencial sobre un paquete específico.\nEstas hojas proporcionan una visión rápida y un resumen conciso de los comandos, funciones de un paquete.\nEnlace https://posit.co/resources/cheatsheets/?type=translations/"
  },
  {
    "objectID": "clases/clase_07.html#relación-data-frames---listas",
    "href": "clases/clase_07.html#relación-data-frames---listas",
    "title": "Ciencia de Datos para Economistas",
    "section": "Relación Data Frames - Listas",
    "text": "Relación Data Frames - Listas\n\nEstructura Anidada : Un data frame es una estructura anidada donde cada columna (o columna) es un vector. Esta estructura se puede pensar como una lista de vectores.\nEtiquetas de Columnas : Cada columna en un data frame tiene una etiqueta o nombre, lo que la distingue de una lista ordinaria.\nManipulación y Acceso : Las operaciones de acceso y manipulación a los data frames se basan en estas estructuras anidadas y etiquetas."
  },
  {
    "objectID": "clases/clase_07.html#métodos-y",
    "href": "clases/clase_07.html#métodos-y",
    "title": "Ciencia de Datos para Economistas",
    "section": "Métodos [ ], $ y [[ ]]",
    "text": "Métodos [ ], $ y [[ ]]\n\n[ ]\n$\n[[ ]]"
  },
  {
    "objectID": "clases/clase_07.html#documentación-paquetes",
    "href": "clases/clase_07.html#documentación-paquetes",
    "title": "Ciencia de Datos para Economistas",
    "section": "Documentación Paquetes",
    "text": "Documentación Paquetes\nLa documentación sobre las utilidades y funcionalidades de cada paquete. En el manual del paquete se ordenan alfabéticamente las funciones que están contenidas y para cada función se ilustra uno o más caso de usos.\nHay paquetes que tienen flujos de trabajo donde se require usar diversas funciones del mismo, no obstante, con el manual muchas veces no se tiene una perspectiva general sobre cómo lograrlo.\n👎 La lectura alfabética de las funciones no resulta práctica, sino sólo referencial."
  },
  {
    "objectID": "clases/clase_07.html#obtención-documetación-paquete",
    "href": "clases/clase_07.html#obtención-documetación-paquete",
    "title": "Ciencia de Datos para Economistas",
    "section": "Obtención Documetación Paquete",
    "text": "Obtención Documetación Paquete\n\nVía Cran\nVía RStudio:\n\nCon operador ? o ?? sino está cargado\nSección derecha-inferior, tab “Packages”"
  },
  {
    "objectID": "clases/clase_07.html#ejemplo-paquete-readr",
    "href": "clases/clase_07.html#ejemplo-paquete-readr",
    "title": "Ciencia de Datos para Economistas",
    "section": "Ejemplo Paquete readr",
    "text": "Ejemplo Paquete readr"
  },
  {
    "objectID": "clases/clase_07.html#estructuras-de-datos--repaso",
    "href": "clases/clase_07.html#estructuras-de-datos--repaso",
    "title": "Ciencia de Datos para Economistas",
    "section": "",
    "text": "Objeto\nR\nEjemplo\n\n\n\n\n\nvector atómico\nc(1)\n\n\n ️\nvector\nc(‘a’, ‘x’, ‘d’)\n\n\n\nmátriz\nmatrix(1:8,2,4)"
  },
  {
    "objectID": "clases/clase_07.html#estructuras-de-datos-2---repaso",
    "href": "clases/clase_07.html#estructuras-de-datos-2---repaso",
    "title": "Ciencia de Datos para Economistas",
    "section": "Estructuras de Datos 2 - Repaso",
    "text": "Estructuras de Datos 2 - Repaso\n\n\n\n\n\n\n\n\nObjeto\nR\nEjemplo\n\n\n\n\n\nlista\nlista_test &lt;- list(primer=c(‘a’, ‘x’), segun=c(1))\n\n\n\ndata frame\nmtcars\n\n\n\ntibble\nas_tibble(mtcars)"
  },
  {
    "objectID": "practicas/clase6_prac2.html",
    "href": "practicas/clase6_prac2.html",
    "title": "Clase 6 / Práctica 3",
    "section": "",
    "text": "A los efectos de demostrar para qué nos pueden servir las funciones, trabajaremos con ejemplos donde dada una entrada de datos, estos son procesados internamente dentro de la función y luego se genera una salida (de datos ).\n\n\nLa sintáxis y los componentes básicos de una función en R son los siguientes:\n\nnombre_de_la_funcion &lt;- function(arg1, arg2, ...) {\n  # Código que realiza alguna tarea o calculo\n  return(resultado)\n}\n\n\nnombre_de_la_funcion: Es el nombre que le das a tu función y por el cual la llamarás cuando necesites usarla.\nfunction(): Es el comando en R para definir una nueva función. Dentro de los paréntesis () puedes especificar los argumentos o variables que necesitas para que la función pueda realizar el proceso que estás definiendo.\narg1 , arg2,….,argn : (también conocidos como parámetros) son valores de entrada que se pasan a la función para ser utilizados dentro del código.\nreturn(): Finalmente, el valor resultante de tu función puede ser devuelto usando el comando return. Si no usas return(), la función devolverá automáticamente el último valor calculado. El uso del return() será explicado con mayor detalle en las clases.\nEl código real de tu función se encuentra dentro de las llaves {}. Aquí es donde realizas todos los cálculos y acciones que tu función necesita hacer.\n\nEs importante usar nombres descriptivos y fáciles de entender para tus funciones. Esto hace que sea más fácil entender qué hace cada una cuando las leas o las uses en el futuro.\nAl igual que en las matemáticas, los argumentos permiten que una misma función realice diferentes tareas dependiendo de los datos con los que es llamada, no obstante lo antes indicado es ilustrativo, ya que la definición de las funciones dentro de las matemáticas tiene diferencias considerables a lo que representa una función dentro de la computación.\nCon respecto a los argumentos, cada uno de ellos puede tener un valor predeterminado si se especifica al definir la función. Si al llamar una función no especifico el valor del argumento que definí como predeterminado, R usará el valor por defecto.\nAquí tienes un ejemplo sencillo:\n\n# Definimos una función llamada 'suma' que recibe dos argumentos: 'numero1' y 'numero2'\nsuma &lt;- function(numero1, numero2 = 0) {\n  # Realizamos la suma de los dos números\n  resultado &lt;- numero1 + numero2\n  \n  # Devolvemos el resultado\n  return(resultado)\n}\n\nEn este ejemplo:\n\nnumero1 es un argumento requerido.\nnumero2 es un argumento opcional, que tiene un valor predeterminado de 0. Si no se proporciona un valor para numero2, R utilizará 0 automáticamente.\n\nPara llamar a esta función:\n\n# Llamamos a la función 'suma' con dos argumentos\nresultado1 &lt;- suma(5, 3)\nprint(resultado1) \n# Devolverá: [1] 8\n\n# Llamamos a la función 'suma' con solo un argumento (se usará el valor predeterminado de 'numero2')\nresultado2 &lt;- suma(5)\nprint(resultado2) # Devolverá: [1] 5"
  },
  {
    "objectID": "practicas/clase6_prac2.html#escritura-funciones",
    "href": "practicas/clase6_prac2.html#escritura-funciones",
    "title": "Clase 6 / Práctica 3",
    "section": "",
    "text": "A los efectos de demostrar para qué nos pueden servir las funciones, trabajaremos con ejemplos donde dada una entrada de datos, estos son procesados internamente dentro de la función y luego se genera una salida (de datos ).\n\n\nLa sintáxis y los componentes básicos de una función en R son los siguientes:\n\nnombre_de_la_funcion &lt;- function(arg1, arg2, ...) {\n  # Código que realiza alguna tarea o calculo\n  return(resultado)\n}\n\n\nnombre_de_la_funcion: Es el nombre que le das a tu función y por el cual la llamarás cuando necesites usarla.\nfunction(): Es el comando en R para definir una nueva función. Dentro de los paréntesis () puedes especificar los argumentos o variables que necesitas para que la función pueda realizar el proceso que estás definiendo.\narg1 , arg2,….,argn : (también conocidos como parámetros) son valores de entrada que se pasan a la función para ser utilizados dentro del código.\nreturn(): Finalmente, el valor resultante de tu función puede ser devuelto usando el comando return. Si no usas return(), la función devolverá automáticamente el último valor calculado. El uso del return() será explicado con mayor detalle en las clases.\nEl código real de tu función se encuentra dentro de las llaves {}. Aquí es donde realizas todos los cálculos y acciones que tu función necesita hacer.\n\nEs importante usar nombres descriptivos y fáciles de entender para tus funciones. Esto hace que sea más fácil entender qué hace cada una cuando las leas o las uses en el futuro.\nAl igual que en las matemáticas, los argumentos permiten que una misma función realice diferentes tareas dependiendo de los datos con los que es llamada, no obstante lo antes indicado es ilustrativo, ya que la definición de las funciones dentro de las matemáticas tiene diferencias considerables a lo que representa una función dentro de la computación.\nCon respecto a los argumentos, cada uno de ellos puede tener un valor predeterminado si se especifica al definir la función. Si al llamar una función no especifico el valor del argumento que definí como predeterminado, R usará el valor por defecto.\nAquí tienes un ejemplo sencillo:\n\n# Definimos una función llamada 'suma' que recibe dos argumentos: 'numero1' y 'numero2'\nsuma &lt;- function(numero1, numero2 = 0) {\n  # Realizamos la suma de los dos números\n  resultado &lt;- numero1 + numero2\n  \n  # Devolvemos el resultado\n  return(resultado)\n}\n\nEn este ejemplo:\n\nnumero1 es un argumento requerido.\nnumero2 es un argumento opcional, que tiene un valor predeterminado de 0. Si no se proporciona un valor para numero2, R utilizará 0 automáticamente.\n\nPara llamar a esta función:\n\n# Llamamos a la función 'suma' con dos argumentos\nresultado1 &lt;- suma(5, 3)\nprint(resultado1) \n# Devolverá: [1] 8\n\n# Llamamos a la función 'suma' con solo un argumento (se usará el valor predeterminado de 'numero2')\nresultado2 &lt;- suma(5)\nprint(resultado2) # Devolverá: [1] 5"
  },
  {
    "objectID": "practicas/clase6_prac2.html#por-qué-escribimos-las-funciones",
    "href": "practicas/clase6_prac2.html#por-qué-escribimos-las-funciones",
    "title": "Clase 6 / Práctica 3",
    "section": "¿Por qué escribimos las funciones?",
    "text": "¿Por qué escribimos las funciones?\nLa necesidad de crear una función viene dada en que tenemos un procesamiento, por ejemplo de datos, que es necesario ejecutar varias veces en un script que estamos creando y a los fines de no replicar múltiples veces el mismo procedimiento, preferimos crear una función donde fácilmente podamos replicar la cadena de pasos que estamos ejecutando.\nSupongamos que tenemos dentro de un reporte que estamos creando, la necesidad de calcular varias veces las variaciones porcentuales que presenta la inflación de distintos períodos. Para esto, en vez de realizar muchas veces los cálculos que permiten determinar cada una de las variaciones presentes, preferimos crear una función que tome de entrada como argumentos los datos del período t+1 y los del período t y dentro de ella hacemos los cálculos para generar la salida deseada.\nOtra necesidad que plantea que definamos nuestras propias funciones, viene dado por lo que se conversó anteriormente en clase al hacer la analogía del autobús que cubre rutas generales de transporte y del carro propio que nos puede llevar de forma más directa a donde necesitemos trasladarnos, siendo la escritura de nuestras funciones el equivalente a disponer de un carro.\nContar con una función adaptada a nuestros requerimientos nos ayudará a ser más eficientes a la hora de procesar los datos con los que estemos trabajando. Es importante destacar que al escribir nuestra propia función, también podemos, y así en general lo haremos, usar funciones que vienen predifinidas en RBase u otras que pertenezcan a paquetes que carguemos en memoria. Siempre que se pueda, usaremos códigos ya escritos por otras personas que han enfrentado problemas similares a los que son nos presentan."
  },
  {
    "objectID": "practicas/clase6_prac2.html#ejercicios-funciones",
    "href": "practicas/clase6_prac2.html#ejercicios-funciones",
    "title": "Clase 6 / Práctica 3",
    "section": "Ejercicios Funciones",
    "text": "Ejercicios Funciones\n1) completar los elementos faltantes para que la función se pueda ejecutar. NOTA: sino los completa no podrá ejecutar el chunk y le dará un mensaje de error\n\n## función \ncalculo_inflacion &lt;- function(precios_anterior, precios_actual) \n  \n  # Calculamos la inflación para cada artículo\n  inflacion &lt;- ((precios_actual / precios_anterior) - 1) * 100\n  \n  # Retornamos el valor\n  return(inflacion\n}\n\n\n# Ejemplo de uso\n# Si la función definida en el chunk anterior no se completó correctamente no se podrá ejecutar ninguno de los chunks siguientes\ncalculo_inflacion(10, 14) \ncalculo_inflacion(12, 9)\n\nLos argumentos que se le pasan a una función pueden ser posicionales sin mencionar explicitamente el nombre del argumento\n\ncalculo_inflacion(10 14)\n\nIgualmente se puede mencionar explicitamente el nombre del argumento\n\ncalculo_inflacion(precios_anterior =10, \n                  precios_actual 14)\n\no dados con el nombre sin tomar en cuenta la posición\n\ncalculo_inflacion(precios_actual =20, \n                  precios_anterior= 21\n\n2) Completar los elmentos faltantes para realizar la definición de una función que permite realizar el cálculo del PIB percápita dado el PIB y el total de habitantes de un país.\n\ncalcular_pib_per_capita &lt;- function(pib_total,) {\n  # Calculamos el PIB per cápita\n  pib_per_capita &lt;-      / poblacion\n  \n  return(pib_per_capita)\n}\n\n\n# Ejemplo de uso\npib_total &lt;- 123000043  # PIB total en millones de dólares\npoblacion &lt;- 24531    # Población en millones\n\ncalcular_pib_per_capita(pib_total, poblacion)\n\nprint(pib_per_capita_resultado)  # Imprimir el resultado"
  },
  {
    "objectID": "practicas/clase6_pract2.html",
    "href": "practicas/clase6_pract2.html",
    "title": "Clase 6 / Práctica 2",
    "section": "",
    "text": "A los efectos de demostrar para qué nos pueden servir las funciones, trabajaremos con ejemplos donde dada una entrada de datos, estos son procesados internamente dentro de la función y luego se genera una salida (de datos ).\n\n\nLa sintáxis y los componentes básicos de una función en R son los siguientes:\n\nnombre_de_la_funcion &lt;- function(arg1, arg2, ...) {\n  # Código que realiza alguna tarea o calculo\n  return(resultado)\n}\n\n\nnombre_de_la_funcion: Es el nombre que le das a tu función y por el cual la llamarás cuando necesites usarla.\nfunction(): Es el comando en R para definir una nueva función. Dentro de los paréntesis () puedes especificar los argumentos o variables que necesitas para que la función pueda realizar el proceso que estás definiendo.\narg1 , arg2,….,argn : (también conocidos como parámetros) son valores de entrada que se pasan a la función para ser utilizados dentro del código.\nreturn(): Finalmente, el valor resultante de tu función puede ser devuelto usando el comando return. Si no usas return(), la función devolverá automáticamente el último valor calculado. El uso del return() será explicado con mayor detalle en las clases.\nEl código real de tu función se encuentra dentro de las llaves {}. Aquí es donde realizas todos los cálculos y acciones que tu función necesita hacer.\n\nEs importante usar nombres descriptivos y fáciles de entender para tus funciones. Esto hace que sea más fácil entender qué hace cada una cuando las leas o las uses en el futuro.\nAl igual que en las matemáticas, los argumentos permiten que una misma función realice diferentes tareas dependiendo de los datos con los que es llamada, no obstante lo antes indicado es ilustrativo, ya que la definición de las funciones dentro de las matemáticas tiene diferencias considerables a lo que representa una función dentro de la computación.\nCon respecto a los argumentos, cada uno de ellos puede tener un valor predeterminado si se especifica al definir la función. Si al llamar una función no especifico el valor del argumento que definí como predeterminado, R usará el valor por defecto.\nAquí tienes un ejemplo sencillo:\n\n# Definimos una función llamada 'suma' que recibe dos argumentos: 'numero1' y 'numero2'\nsuma &lt;- function(numero1, numero2 = 0) {\n  # Realizamos la suma de los dos números\n  resultado &lt;- numero1 + numero2\n  \n  # Devolvemos el resultado\n  return(resultado)\n}\n\nEn este ejemplo:\n\nnumero1 es un argumento requerido.\nnumero2 es un argumento opcional, que tiene un valor predeterminado de 0. Si no se proporciona un valor para numero2, R utilizará 0 automáticamente.\n\nPara llamar a esta función:\n\n# Llamamos a la función 'suma' con dos argumentos\nresultado1 &lt;- suma(5, 3)\nprint(resultado1) \n# Devolverá: [1] 8\n\n# Llamamos a la función 'suma' con solo un argumento (se usará el valor predeterminado de 'numero2')\nresultado2 &lt;- suma(5)\nprint(resultado2) # Devolverá: [1] 5",
    "crumbs": [
      "Prácticas",
      "clase 6 / práctica 2"
    ]
  },
  {
    "objectID": "practicas/clase6_pract2.html#escritura-funciones",
    "href": "practicas/clase6_pract2.html#escritura-funciones",
    "title": "Clase 6 / Práctica 2",
    "section": "",
    "text": "A los efectos de demostrar para qué nos pueden servir las funciones, trabajaremos con ejemplos donde dada una entrada de datos, estos son procesados internamente dentro de la función y luego se genera una salida (de datos ).\n\n\nLa sintáxis y los componentes básicos de una función en R son los siguientes:\n\nnombre_de_la_funcion &lt;- function(arg1, arg2, ...) {\n  # Código que realiza alguna tarea o calculo\n  return(resultado)\n}\n\n\nnombre_de_la_funcion: Es el nombre que le das a tu función y por el cual la llamarás cuando necesites usarla.\nfunction(): Es el comando en R para definir una nueva función. Dentro de los paréntesis () puedes especificar los argumentos o variables que necesitas para que la función pueda realizar el proceso que estás definiendo.\narg1 , arg2,….,argn : (también conocidos como parámetros) son valores de entrada que se pasan a la función para ser utilizados dentro del código.\nreturn(): Finalmente, el valor resultante de tu función puede ser devuelto usando el comando return. Si no usas return(), la función devolverá automáticamente el último valor calculado. El uso del return() será explicado con mayor detalle en las clases.\nEl código real de tu función se encuentra dentro de las llaves {}. Aquí es donde realizas todos los cálculos y acciones que tu función necesita hacer.\n\nEs importante usar nombres descriptivos y fáciles de entender para tus funciones. Esto hace que sea más fácil entender qué hace cada una cuando las leas o las uses en el futuro.\nAl igual que en las matemáticas, los argumentos permiten que una misma función realice diferentes tareas dependiendo de los datos con los que es llamada, no obstante lo antes indicado es ilustrativo, ya que la definición de las funciones dentro de las matemáticas tiene diferencias considerables a lo que representa una función dentro de la computación.\nCon respecto a los argumentos, cada uno de ellos puede tener un valor predeterminado si se especifica al definir la función. Si al llamar una función no especifico el valor del argumento que definí como predeterminado, R usará el valor por defecto.\nAquí tienes un ejemplo sencillo:\n\n# Definimos una función llamada 'suma' que recibe dos argumentos: 'numero1' y 'numero2'\nsuma &lt;- function(numero1, numero2 = 0) {\n  # Realizamos la suma de los dos números\n  resultado &lt;- numero1 + numero2\n  \n  # Devolvemos el resultado\n  return(resultado)\n}\n\nEn este ejemplo:\n\nnumero1 es un argumento requerido.\nnumero2 es un argumento opcional, que tiene un valor predeterminado de 0. Si no se proporciona un valor para numero2, R utilizará 0 automáticamente.\n\nPara llamar a esta función:\n\n# Llamamos a la función 'suma' con dos argumentos\nresultado1 &lt;- suma(5, 3)\nprint(resultado1) \n# Devolverá: [1] 8\n\n# Llamamos a la función 'suma' con solo un argumento (se usará el valor predeterminado de 'numero2')\nresultado2 &lt;- suma(5)\nprint(resultado2) # Devolverá: [1] 5",
    "crumbs": [
      "Prácticas",
      "clase 6 / práctica 2"
    ]
  },
  {
    "objectID": "practicas/clase6_pract2.html#por-qué-escribimos-las-funciones",
    "href": "practicas/clase6_pract2.html#por-qué-escribimos-las-funciones",
    "title": "Clase 6 / Práctica 2",
    "section": "¿Por qué escribimos las funciones?",
    "text": "¿Por qué escribimos las funciones?\nLa necesidad de crear una función viene dada en que tenemos un procesamiento, por ejemplo de datos, que es necesario ejecutar varias veces en un script que estamos creando y a los fines de no replicar múltiples veces el mismo procedimiento, preferimos crear una función donde fácilmente podamos replicar la cadena de pasos que estamos ejecutando.\nSupongamos que tenemos dentro de un reporte que estamos creando, la necesidad de calcular varias veces las variaciones porcentuales que presenta la inflación de distintos períodos. Para esto, en vez de realizar muchas veces los cálculos que permiten determinar cada una de las variaciones presentes, preferimos crear una función que tome de entrada como argumentos los datos del período t+1 y los del período t y dentro de ella hacemos los cálculos para generar la salida deseada.\nOtra necesidad que plantea que definamos nuestras propias funciones, viene dado por lo que se conversó anteriormente en clase al hacer la analogía del autobús que cubre rutas generales de transporte y del carro propio que nos puede llevar de forma más directa a donde necesitemos trasladarnos, siendo la escritura de nuestras funciones el equivalente a disponer de un carro.\nContar con una función adaptada a nuestros requerimientos nos ayudará a ser más eficientes a la hora de procesar los datos con los que estemos trabajando. Es importante destacar que al escribir nuestra propia función, también podemos, y así en general lo haremos, usar funciones que vienen predifinidas en RBase u otras que pertenezcan a paquetes que carguemos en memoria. Siempre que se pueda, usaremos códigos ya escritos por otras personas que han enfrentado problemas similares a los que son nos presentan.",
    "crumbs": [
      "Prácticas",
      "clase 6 / práctica 2"
    ]
  },
  {
    "objectID": "practicas/clase6_pract2.html#ejercicios-funciones",
    "href": "practicas/clase6_pract2.html#ejercicios-funciones",
    "title": "Clase 6 / Práctica 2",
    "section": "Ejercicios Funciones",
    "text": "Ejercicios Funciones\n1) completar los elementos faltantes para que la función se pueda ejecutar. NOTA: sino los completa no podrá ejecutar el chunk y le dará un mensaje de error\n\n## función \ncalculo_inflacion &lt;- function(precios_anterior, precios_actual) \n  \n  # Calculamos la inflación para cada artículo\n  inflacion &lt;- ((precios_actual / precios_anterior) - 1) * 100\n  \n  # Retornamos el valor\n  return(inflacion\n}\n\n\n# Ejemplo de uso\n# Si la función definida en el chunk anterior no se completó correctamente no se podrá ejecutar ninguno de los chunks siguientes\ncalculo_inflacion(10, 14) \ncalculo_inflacion(12, 9)\n\nLos argumentos que se le pasan a una función pueden ser posicionales sin mencionar explicitamente el nombre del argumento\n\ncalculo_inflacion(10 14)\n\nIgualmente se puede mencionar explicitamente el nombre del argumento\n\ncalculo_inflacion(precios_anterior =10, \n                  precios_actual 14)\n\no dados con el nombre sin tomar en cuenta la posición\n\ncalculo_inflacion(precios_actual =20, \n                  precios_anterior= 21\n\n2) Completar los elmentos faltantes para realizar la definición de una función que permite realizar el cálculo del PIB percápita dado el PIB y el total de habitantes de un país.\n\ncalcular_pib_per_capita &lt;- function(pib_total,) {\n  # Calculamos el PIB per cápita\n  pib_per_capita &lt;-      / poblacion\n  \n  return(pib_per_capita)\n}\n\n\n# Ejemplo de uso\npib_total &lt;- 123000043  # PIB total en millones de dólares\npoblacion &lt;- 24531    # Población en millones\n\ncalcular_pib_per_capita(pib_total, poblacion)\n\nprint(pib_per_capita_resultado)  # Imprimir el resultado",
    "crumbs": [
      "Prácticas",
      "clase 6 / práctica 2"
    ]
  },
  {
    "objectID": "clases/clase_07.html",
    "href": "clases/clase_07.html",
    "title": "Ciencia de Datos para Economistas",
    "section": "",
    "text": "Objeto\nR\nEjemplo\n\n\n\n\n\nvector atómico\nc(1)\n\n\n ️\nvector\nc(‘a’, ‘x’, ‘d’)\n\n\n\nmátriz\nmatrix(1:8,2,4)"
  },
  {
    "objectID": "clases/clase_08.html",
    "href": "clases/clase_08.html",
    "title": "Ciencia de Datos para Economistas",
    "section": "",
    "text": "intervenciones en clase 13-11 sobre la visualizaciones que se hagan con ggplot2 que viene de tarea clase 5. Cambio de fecha del 11-11 al 13-11\nModificación tarea clase 5 ggplot\nTareas clase 7 (entrega 13 y 18) y clase 8 (20-11)\nClase 6 práctica 1 construccion vectores"
  },
  {
    "objectID": "clases/clase_08.html#varios-y-puntos-pendientes",
    "href": "clases/clase_08.html#varios-y-puntos-pendientes",
    "title": "Ciencia de Datos para Economistas",
    "section": "Varios y Puntos Pendientes",
    "text": "Varios y Puntos Pendientes\n\nintervenciones en clase 13-11 sobre la visualizaciones que se hagan con ggplot2 que viene de tarea clase 5. Cambio de fecha del 11-11 al 13-11\nModificación tarea clase 5 ggplot\nTareas clase 7 (entrega 13 y 18) y clase 8 (20-11)\nClase 6 práctica 1 construccion vectores"
  },
  {
    "objectID": "clases/clase_08.html#objetivo",
    "href": "clases/clase_08.html#objetivo",
    "title": "Ciencia de Datos para Economistas",
    "section": "Objetivo",
    "text": "Objetivo\n\nPresentar operadores lógicos y trabajar con ellos\nAcceder a elementos de vectores y DF’s según condiciones lógicas\nInspeccionar valores, rangos y estructura de una DF"
  },
  {
    "objectID": "clases/clase_08.html#operadores-lógicos",
    "href": "clases/clase_08.html#operadores-lógicos",
    "title": "Ciencia de Datos para Economistas",
    "section": "Operadores Lógicos",
    "text": "Operadores Lógicos\n\n\\(&gt;\\) (mayor a)\n\\(&gt;=\\) (mayor o igual a)\n\\(&lt;\\) (menor a)\n\\(&lt;=\\) (menor o igual a)\n\\(==\\) (igual a)\n\\(!=\\) (distinto a)\n& (y)\n\\(|\\) (o)"
  },
  {
    "objectID": "clases/clase_08.html#uso-de-operadores-lógicos-en-un-vector",
    "href": "clases/clase_08.html#uso-de-operadores-lógicos-en-un-vector",
    "title": "Ciencia de Datos para Economistas",
    "section": "Uso de Operadores Lógicos en un Vector",
    "text": "Uso de Operadores Lógicos en un Vector\nVector seleccionado “millas por galón” mpg\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#data-frame-a-trabajar",
    "href": "clases/clase_08.html#data-frame-a-trabajar",
    "title": "Ciencia de Datos para Economistas",
    "section": "Data Frame a Trabajar",
    "text": "Data Frame a Trabajar\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSobre el contenido de la df: según la hipótesis del ahorro a lo largo del ciclo vital desarrollada por Franco Modigliani, el coeficiente de ahorro (ahorro personal agregado dividido por la renta disponible) se explica por la renta disponible per cápita, la tasa porcentual de variación de la renta disponible per cápita y dos variables demográficas: el porcentaje de población menor de 15 años y el porcentaje de población mayor de 75 años. Los datos se promedian a lo largo de la década 1960-1970 para eliminar el ciclo económico u otras fluctuaciones a corto plazo"
  },
  {
    "objectID": "clases/clase_08.html#inspección-data-frame",
    "href": "clases/clase_08.html#inspección-data-frame",
    "title": "Ciencia de Datos para Economistas",
    "section": "Inspección Data Frame",
    "text": "Inspección Data Frame\nDimensiones\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n Número de columnas\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#funciones-extremos",
    "href": "clases/clase_08.html#funciones-extremos",
    "title": "Ciencia de Datos para Economistas",
    "section": "Funciones Extremos",
    "text": "Funciones Extremos\n\nMínimo en vector\n\n\nmin(df_ahorro$pop15)\n\n\nMáximo en vector\n\n\nmax(df_ahorro$pop15)"
  },
  {
    "objectID": "clases/clase_08.html#cantidades-de-elementos",
    "href": "clases/clase_08.html#cantidades-de-elementos",
    "title": "Ciencia de Datos para Economistas",
    "section": "Cantidades de Elementos",
    "text": "Cantidades de Elementos\nlength\ndim\nnrow\nncol\nnueva columna con $\n\nFunciones Anidadas"
  },
  {
    "objectID": "clases/clase_08.html#importar-en-formato-csv-una-data-frame",
    "href": "clases/clase_08.html#importar-en-formato-csv-una-data-frame",
    "title": "Ciencia de Datos para Economistas",
    "section": "Importar en Formato csv una Data Frame",
    "text": "Importar en Formato csv una Data Frame\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n👀: los datos tienen estructura tabular. Observaciones son filas y atributos las columnas"
  },
  {
    "objectID": "clases/clase_08.html#dplyr-de-batalla",
    "href": "clases/clase_08.html#dplyr-de-batalla",
    "title": "Ciencia de Datos para Economistas",
    "section": "DPLYR (🏇🏽 de batalla)",
    "text": "DPLYR (🏇🏽 de batalla)\nUna gramática para la manipulación de datos.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#tabla-resumen-estadístico",
    "href": "clases/clase_08.html#tabla-resumen-estadístico",
    "title": "Ciencia de Datos para Economistas",
    "section": "Tabla Resumen Estadístico",
    "text": "Tabla Resumen Estadístico\nRepresentar los valores mínimo y máximo, primer y tercer cuartil, media, promedio de un vector o data frame.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#tabla-resumen-estadístico---cont",
    "href": "clases/clase_08.html#tabla-resumen-estadístico---cont",
    "title": "Ciencia de Datos para Economistas",
    "section": "Tabla Resumen Estadístico - cont",
    "text": "Tabla Resumen Estadístico - cont\nLa salida de función summary cambia según el objeto que estemos trabajando\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#vector-lógico-con-valores-que-cumplen-una-condición",
    "href": "clases/clase_08.html#vector-lógico-con-valores-que-cumplen-una-condición",
    "title": "Ciencia de Datos para Economistas",
    "section": "Vector Lógico con valores que Cumplen una Condición",
    "text": "Vector Lógico con valores que Cumplen una Condición\nMayor que un valor dado\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#asignación-valores-a-variables",
    "href": "clases/clase_08.html#asignación-valores-a-variables",
    "title": "Ciencia de Datos para Economistas",
    "section": "Asignación valores a variables",
    "text": "Asignación valores a variables\n\nvariable con promedio\ncreación df\nevaluar valores que cumplen ambas condiciones\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nReforzar con lectura propuesta en Tarea Clase 8 sobre “Tabla de Verdad”."
  },
  {
    "objectID": "clases/clase_08.html#inspección-df",
    "href": "clases/clase_08.html#inspección-df",
    "title": "Ciencia de Datos para Economistas",
    "section": "Inspección df",
    "text": "Inspección df\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#múltiples-condiciones",
    "href": "clases/clase_08.html#múltiples-condiciones",
    "title": "Ciencia de Datos para Economistas",
    "section": "Múltiples Condiciones",
    "text": "Múltiples Condiciones\nOperador & (y)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n Operador == doble igualdad (👀 es distinto a asignación)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nwhich indica el índice de los elementos extraídos según una condición"
  },
  {
    "objectID": "clases/clase_08.html#múltiples-condiciones---cont",
    "href": "clases/clase_08.html#múltiples-condiciones---cont",
    "title": "Ciencia de Datos para Economistas",
    "section": "Múltiples Condiciones - cont",
    "text": "Múltiples Condiciones - cont\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n Operador != diferente\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#asignar-a-una-variable-la-df",
    "href": "clases/clase_08.html#asignar-a-una-variable-la-df",
    "title": "Ciencia de Datos para Economistas",
    "section": "Asignar a una variable la DF",
    "text": "Asignar a una variable la DF\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#crear-columna-con-nombre-países",
    "href": "clases/clase_08.html#crear-columna-con-nombre-países",
    "title": "Ciencia de Datos para Economistas",
    "section": "Crear Columna con Nombre Países",
    "text": "Crear Columna con Nombre Países\nRevisar nombres filas\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n Asignar nueva columa a la DF\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#inspección-nuevo-atributo",
    "href": "clases/clase_08.html#inspección-nuevo-atributo",
    "title": "Ciencia de Datos para Economistas",
    "section": "Inspección Nuevo Atributo",
    "text": "Inspección Nuevo Atributo\nRevisar DF\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#funciones-valores-extremos",
    "href": "clases/clase_08.html#funciones-valores-extremos",
    "title": "Ciencia de Datos para Economistas",
    "section": "Funciones Valores Extremos",
    "text": "Funciones Valores Extremos\nMínimo en vector\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n Máximo en vector\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#estructura-gapminder",
    "href": "clases/clase_08.html#estructura-gapminder",
    "title": "Ciencia de Datos para Economistas",
    "section": "Estructura Gapminder",
    "text": "Estructura Gapminder\nEstructura DF\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#valores-únicos-por-atributo",
    "href": "clases/clase_08.html#valores-únicos-por-atributo",
    "title": "Ciencia de Datos para Economistas",
    "section": "Valores Únicos por Atributo",
    "text": "Valores Únicos por Atributo\nPaíses\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#juntar-dfs",
    "href": "clases/clase_08.html#juntar-dfs",
    "title": "Ciencia de Datos para Economistas",
    "section": "Juntar DF´s",
    "text": "Juntar DF´s\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#revisar-nueva-df",
    "href": "clases/clase_08.html#revisar-nueva-df",
    "title": "Ciencia de Datos para Economistas",
    "section": "Revisar Nueva DF",
    "text": "Revisar Nueva DF\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#continuar-inspección",
    "href": "clases/clase_08.html#continuar-inspección",
    "title": "Ciencia de Datos para Economistas",
    "section": "Continuar Inspección…",
    "text": "Continuar Inspección…\n\n\n\n\n🔗 ucveconomiar4ds"
  },
  {
    "objectID": "clases/clase_08.html#tabla-de-contingencia",
    "href": "clases/clase_08.html#tabla-de-contingencia",
    "title": "Ciencia de Datos para Economistas",
    "section": "Tabla de Contingencia",
    "text": "Tabla de Contingencia\nCantidad cilindros por observación\n\nmtcars$cyl\nConteo de frecuencia de un dato categórico\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#tabla-de-contingencia-cruzada",
    "href": "clases/clase_08.html#tabla-de-contingencia-cruzada",
    "title": "Ciencia de Datos para Economistas",
    "section": "Tabla de Contingencia Cruzada",
    "text": "Tabla de Contingencia Cruzada\nMúltiples categorías\n\n\n\ncyl\nNumber of cylinders\n\n\nvs\nEngine (0 = V-shaped, 1 = straight)\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#forma-vectorizada",
    "href": "clases/clase_08.html#forma-vectorizada",
    "title": "Ciencia de Datos para Economistas",
    "section": "Forma vectorizada:",
    "text": "Forma vectorizada:\nSe aplica el condicional lógico sobre el elemento i del vector analizado teniendo de resultado un vector del mismo length del vector de entrada.\nPor ejemplo, si i vale 3, se compara si 22.8 es mayor que el promedio_mpg y si es menor que valor_3ercuartil\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#inspección-data-frame--cont",
    "href": "clases/clase_08.html#inspección-data-frame--cont",
    "title": "Ciencia de Datos para Economistas",
    "section": "Inspección Data Frame -cont",
    "text": "Inspección Data Frame -cont\nNúmero de filas\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n Nombres de las columnas\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#inspección-data-frame--cont2",
    "href": "clases/clase_08.html#inspección-data-frame--cont2",
    "title": "Ciencia de Datos para Economistas",
    "section": "Inspección Data Frame -cont2",
    "text": "Inspección Data Frame -cont2\n Nombres de las filas\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#tabla-sumario-gapminder",
    "href": "clases/clase_08.html#tabla-sumario-gapminder",
    "title": "Ciencia de Datos para Economistas",
    "section": "Tabla Sumario Gapminder",
    "text": "Tabla Sumario Gapminder\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nTiene estructura tabular"
  },
  {
    "objectID": "clases/clase_08.html#revisar-tabla-venezuela",
    "href": "clases/clase_08.html#revisar-tabla-venezuela",
    "title": "Ciencia de Datos para Economistas",
    "section": "Revisar Tabla Venezuela",
    "text": "Revisar Tabla Venezuela\nTabla sumario\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#múltiples-condiciones---cont-2",
    "href": "clases/clase_08.html#múltiples-condiciones---cont-2",
    "title": "Ciencia de Datos para Economistas",
    "section": "Múltiples Condiciones - cont 2",
    "text": "Múltiples Condiciones - cont 2\n Operador | or (o)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#vector-lógico-con-valores-que-cumplen-una-condición--cont.",
    "href": "clases/clase_08.html#vector-lógico-con-valores-que-cumplen-una-condición--cont.",
    "title": "Ciencia de Datos para Economistas",
    "section": "Vector Lógico con valores que Cumplen una Condición -cont.",
    "text": "Vector Lógico con valores que Cumplen una Condición -cont.\n Mayor que el valor que retorna una función\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#inspección-data-frame--cont2-1",
    "href": "clases/clase_08.html#inspección-data-frame--cont2-1",
    "title": "Ciencia de Datos para Economistas",
    "section": "Inspección Data Frame -cont2",
    "text": "Inspección Data Frame -cont2\nEstructura de un objeto\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n Resumen Estadístico\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#inspección-data-frame--cont3",
    "href": "clases/clase_08.html#inspección-data-frame--cont3",
    "title": "Ciencia de Datos para Economistas",
    "section": "Inspección Data Frame -cont3",
    "text": "Inspección Data Frame -cont3\nEstructura de un objeto\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#inspección-data-frame--cont4",
    "href": "clases/clase_08.html#inspección-data-frame--cont4",
    "title": "Ciencia de Datos para Economistas",
    "section": "Inspección Data Frame -cont4",
    "text": "Inspección Data Frame -cont4\n Resumen Estadístico\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#valores-únicos-por-atributo---cont",
    "href": "clases/clase_08.html#valores-únicos-por-atributo---cont",
    "title": "Ciencia de Datos para Economistas",
    "section": "Valores Únicos por Atributo - cont",
    "text": "Valores Únicos por Atributo - cont\n Años\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#dplyr-filtrado",
    "href": "clases/clase_08.html#dplyr-filtrado",
    "title": "Ciencia de Datos para Economistas",
    "section": "DPLYR / Filtrado",
    "text": "DPLYR / Filtrado\nFunción filter.\nEncadenamiento en los procesamientos: operador pipe %&gt;%\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#combinar-dfs",
    "href": "clases/clase_08.html#combinar-dfs",
    "title": "Ciencia de Datos para Economistas",
    "section": "Combinar DF’s",
    "text": "Combinar DF’s\nFunción bind_rows\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#inspección-df-que-cumple-condiciones",
    "href": "clases/clase_08.html#inspección-df-que-cumple-condiciones",
    "title": "Ciencia de Datos para Economistas",
    "section": "Inspección DF que Cumple Condiciones",
    "text": "Inspección DF que Cumple Condiciones\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#crear-columna-con-valor-promedio",
    "href": "clases/clase_08.html#crear-columna-con-valor-promedio",
    "title": "Ciencia de Datos para Economistas",
    "section": "Crear Columna con Valor Promedio",
    "text": "Crear Columna con Valor Promedio\nCon los valores correspondientes a pop15 y pop75 obtener promedio por cada observación\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_08.html#inspección-nuevos-atributos",
    "href": "clases/clase_08.html#inspección-nuevos-atributos",
    "title": "Ciencia de Datos para Economistas",
    "section": "Inspección Nuevos Atributos",
    "text": "Inspección Nuevos Atributos\nRevisar DF\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "clases/clase_09.html#cargar-datos-en-formato-xls",
    "href": "clases/clase_09.html#cargar-datos-en-formato-xls",
    "title": "Ciencia de Datos para Economistas",
    "section": "Cargar Datos en formato XLS",
    "text": "Cargar Datos en formato XLS\n\nlibrary(readxl)\nlibrary(dplyr)\nruta &lt;- 'data_in/gapminder.xlsx'#'ruta_archivo'\ndf_gapminder &lt;- read_xlsx(ruta)"
  },
  {
    "objectID": "clases/clase_09.html#operaciones-en-filas",
    "href": "clases/clase_09.html#operaciones-en-filas",
    "title": "Ciencia de Datos para Economistas",
    "section": "Operaciones en Filas",
    "text": "Operaciones en Filas\n\nglimpse(df_gapminder)\n\nRows: 1,704\nColumns: 6\n$ country   &lt;chr&gt; \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", \"Afghanist…\n$ continent &lt;chr&gt; \"Asia\", \"Asia\", \"Asia\", \"Asia\", \"Asia\", \"Asia\", \"Asia\", \"Asia\", \"Asia\"…\n$ year      &lt;dbl&gt; 1952, 1957, 1962, 1967, 1972, 1977, 1982, 1987, 1992, 1997, 2002, 2007…\n$ lifeExp   &lt;dbl&gt; 28.801, 30.332, 31.997, 34.020, 36.088, 38.438, 39.854, 40.822, 41.674…\n$ pop       &lt;dbl&gt; 8425333, 9240934, 10267083, 11537966, 13079460, 14880372, 12881816, 13…\n$ gdpPercap &lt;dbl&gt; 779.4453, 820.8530, 853.1007, 836.1971, 739.9811, 786.1134, 978.0114, …"
  },
  {
    "objectID": "clases/clase_09.html#filter",
    "href": "clases/clase_09.html#filter",
    "title": "Ciencia de Datos para Economistas",
    "section": "Filter",
    "text": "Filter\n\nstr_detect()\n!is.na()"
  },
  {
    "objectID": "clases/clase_09.html#slice",
    "href": "clases/clase_09.html#slice",
    "title": "Ciencia de Datos para Economistas",
    "section": "Slice",
    "text": "Slice\n\nslice_min()\nslice_max()\nslice_head()\nslice_tail()\nslice_sample()"
  },
  {
    "objectID": "clases/clase_09.html#arrange",
    "href": "clases/clase_09.html#arrange",
    "title": "Ciencia de Datos para Economistas",
    "section": "Arrange",
    "text": "Arrange\n\ndesc()"
  },
  {
    "objectID": "clases/clase_09.html#operaciones-en-columnas",
    "href": "clases/clase_09.html#operaciones-en-columnas",
    "title": "Ciencia de Datos para Economistas",
    "section": "Operaciones en Columnas",
    "text": "Operaciones en Columnas"
  },
  {
    "objectID": "clases/clase_09.html#select",
    "href": "clases/clase_09.html#select",
    "title": "Ciencia de Datos para Economistas",
    "section": "Select",
    "text": "Select\n\nselect(!)\nselect(ends_with())\neverything()"
  },
  {
    "objectID": "clases/clase_09.html#rename",
    "href": "clases/clase_09.html#rename",
    "title": "Ciencia de Datos para Economistas",
    "section": "Rename",
    "text": "Rename"
  },
  {
    "objectID": "clases/clase_09.html#mutate",
    "href": "clases/clase_09.html#mutate",
    "title": "Ciencia de Datos para Economistas",
    "section": "Mutate",
    "text": "Mutate\n\nifelse()\nmean()\nsum()"
  },
  {
    "objectID": "clases/clase_09.html#summarise",
    "href": "clases/clase_09.html#summarise",
    "title": "Ciencia de Datos para Economistas",
    "section": "Summarise",
    "text": "Summarise"
  },
  {
    "objectID": "clases/clase_09.html#group_by",
    "href": "clases/clase_09.html#group_by",
    "title": "Ciencia de Datos para Economistas",
    "section": "Group_By",
    "text": "Group_By\nLecturas Recomendadas:\n\nCapítulo 4 R4DS (temas pasados referente a variables y operaciones básicas)\nCapítulo 5 R4DS: comparaciones, operadores lógicos, arrange, select, mutate, summarise, pipe operator. En el capítulo se tratan los valores faltantes NA que luego serán abordados\n\n\n\n\n\n\n🔗 ucveconomiar4ds"
  },
  {
    "objectID": "clases/clase_09.html#objetivo",
    "href": "clases/clase_09.html#objetivo",
    "title": "Ciencia de Datos para Economistas",
    "section": "Objetivo:",
    "text": "Objetivo:\nConocer las “paths” o rutas para ubicar directorios o archivos con los cuales se trabajará. Se asume que existe un archivo que se llama “archivo.txt” que está ubicado dentro de la carpeta “Documentos”. La carpeta “Documentos” en Windows se puede llamar “Mis Documentos”."
  },
  {
    "objectID": "clases/clase_10.html#objetivo",
    "href": "clases/clase_10.html#objetivo",
    "title": "Ciencia de Datos para Economistas",
    "section": "Objetivo",
    "text": "Objetivo\nRealizar manipulaciones a los datos contenidos en una DF según diversos criterios, en particular en operaciones que afectan a las filas u observaciones."
  },
  {
    "objectID": "clases/clase_10.html#cargar-datos-en-formato-xls",
    "href": "clases/clase_10.html#cargar-datos-en-formato-xls",
    "title": "Ciencia de Datos para Economistas",
    "section": "Cargar Datos en formato XLS",
    "text": "Cargar Datos en formato XLS\n\nlibrary(readxl)\nlibrary(dplyr)\nruta &lt;- 'data_in/gapminder.xlsx'#'ruta_archivo'\ndf_gapminder &lt;- read_xlsx(ruta)"
  },
  {
    "objectID": "clases/clase_10.html#operaciones-en-filas",
    "href": "clases/clase_10.html#operaciones-en-filas",
    "title": "Ciencia de Datos para Economistas",
    "section": "Operaciones en Filas",
    "text": "Operaciones en Filas\n\nglimpse(df_gapminder)"
  },
  {
    "objectID": "clases/clase_10.html#filter",
    "href": "clases/clase_10.html#filter",
    "title": "Ciencia de Datos para Economistas",
    "section": "Filter",
    "text": "Filter\n\nstr_detect()\n!is.na()"
  },
  {
    "objectID": "clases/clase_10.html#slice",
    "href": "clases/clase_10.html#slice",
    "title": "Ciencia de Datos para Economistas",
    "section": "Slice",
    "text": "Slice\n\nslice_min()\nslice_max()\nslice_head()\nslice_tail()\nslice_sample()"
  },
  {
    "objectID": "clases/clase_10.html#arrange",
    "href": "clases/clase_10.html#arrange",
    "title": "Ciencia de Datos para Economistas",
    "section": "Arrange",
    "text": "Arrange\n\ndesc()\n\n\n\n\n\n🔗 ucveconomiar4ds"
  },
  {
    "objectID": "clases/clase_09.html#rutas-absolutas",
    "href": "clases/clase_09.html#rutas-absolutas",
    "title": "Ciencia de Datos para Economistas",
    "section": "1. Rutas Absolutas",
    "text": "1. Rutas Absolutas\nUna ruta absoluta es la ruta completa desde la raíz del sistema hasta el archivo o directorio específico.\n\nWindows : Comienza con una letra seguida de dos puntos (por ejemplo, C:) y luego las carpetas separadas por barras invertidas ().\n\n\n# Ejemplo en Windows\npath_absoluto &lt;- \"C:\\\\Users\\\\NombreUsuario\\\\Documentos\\\\archivo.txt\"\n\n\nmacOS/Linux : Comienza desde la raíz del sistema (por ejemplo, /) y luego las carpetas separadas por barras (/).\n\n\n# Ejemplo en macOS/Linux\npath_absoluto &lt;- \"/Users/NombreUsuario/Documentos/archivo.txt\""
  },
  {
    "objectID": "clases/clase_09.html#rutas-relativas",
    "href": "clases/clase_09.html#rutas-relativas",
    "title": "Ciencia de Datos para Economistas",
    "section": "2. Rutas Relativas",
    "text": "2. Rutas Relativas\nUna ruta relativa es la ruta desde el directorio de trabajo actual hasta el archivo o directorio específico.\n\nWindows : Las rutas relativas también usan barras invertidas (\\\\).\n\n\n# Ejemplo en Windows\npath_relativo &lt;- \"Documentos\\\\archivo.txt\"\n\n\nmacOS/Linux : Las rutas relativas usan barras (/).\n\n\n# Ejemplo en macOS/Linux\npath_relativo &lt;- \"Documentos/archivo.txt\""
  },
  {
    "objectID": "clases/clase_09.html#directorio-de-trabajo",
    "href": "clases/clase_09.html#directorio-de-trabajo",
    "title": "Ciencia de Datos para Economistas",
    "section": "3. Directorio de Trabajo",
    "text": "3. Directorio de Trabajo\nEl directorio de trabajo es el lugar donde R busca archivos por defecto. Verificar el Directorio de Trabajo :\n\ngetwd()\n\n\nCambiar el Directorio de Trabajo :\n\nUsando la interfaz gráfica de RStudio: ⚙️ -Set As Working Directory.... Ver sección inferior derecha:"
  },
  {
    "objectID": "clases/clase_09.html#leer-y-escribir-archivos",
    "href": "clases/clase_09.html#leer-y-escribir-archivos",
    "title": "Ciencia de Datos para Economistas",
    "section": "4. Leer y Escribir Archivos",
    "text": "4. Leer y Escribir Archivos\n\nLectura de un archivo en Windows :\n\n# Ruta relativa\ndatos &lt;- read.csv(\"archivo.csv\")  \n\n# Ruta absoluta en Windows\ndatos &lt;- read.csv(\"C:\\\\Users\\\\NombreUsuario\\\\Documentos\\\\archivo.csv\")  \n\nLectura de un archivo en MacOS:\n\n# Ruta relativa\ndatos &lt;- read.csv(\"archivo.csv\")  \n# Ruta absoluta en macOS/Linux\ndatos &lt;- read.csv(\"/Users/NombreUsuario/Documents/archivo.csv\") \n\nEscritura de un archivo en Windows:\n\n# Ruta relativa\nwrite.csv(datos, \"nuevo_archivo.csv\")  \n# Ruta absoluta en Windows\nwrite.csv(datos, \"C:\\\\Users\\\\NombreUsuario\\\\Documentos\\\\nuevo_archivo.csv\")  \n\nEscritura de un archivo en MacOS\n\n# Ruta relativa\nwrite.csv(datos, \"nuevo_archivo.csv\")  \n# Ruta absoluta en macOS/Linux\nwrite.csv(datos, \"/Users/NombreUsuario/Documents/nuevo_archivo.csv\")"
  },
  {
    "objectID": "clases/clase_09.html#consideraciones-para-usuarios-de-diferentes-sistemas-operativos",
    "href": "clases/clase_09.html#consideraciones-para-usuarios-de-diferentes-sistemas-operativos",
    "title": "Ciencia de Datos para Economistas",
    "section": "6. Consideraciones para Usuarios de Diferentes Sistemas Operativos",
    "text": "6. Consideraciones para Usuarios de Diferentes Sistemas Operativos\n\nFunción file.path : Esta función ayuda a construir rutas que sean compatibles con el sistema operativo que está usando.\n\nruta_archivo &lt;- file.path(\"Directorio1\", \"Subdirectorio2\", \"archivo.txt\")\nruta_archivo"
  },
  {
    "objectID": "clases/clase_09.html#resumen",
    "href": "clases/clase_09.html#resumen",
    "title": "Ciencia de Datos para Economistas",
    "section": "Resumen",
    "text": "Resumen\n\nRutas Absolutas : Comienzan desde la raíz del sistema y usan barras invertidas en Windows () o barras (/) en macOS/Linux.\nRutas Relativas : Son rutas desde el directorio de trabajo actual, usando barras invertidas en Windows () o barras (/) en macOS/Linux.\nDirectorio de Trabajo : Se puede verificar y cambiar usando getwd() y setwd().\nLeer/Escribir Archivos : Usar rutas relativas o absolutas según sea necesario, considerando el sistema operativo.\n\n\n\n\n\n🔗 ucveconomiar4ds"
  },
  {
    "objectID": "clases/clase_09.html#directorio-de-trabajo-cont.",
    "href": "clases/clase_09.html#directorio-de-trabajo-cont.",
    "title": "Ciencia de Datos para Economistas",
    "section": "3. Directorio de Trabajo/ cont.",
    "text": "3. Directorio de Trabajo/ cont.\n\nUsando código para windows:\n\n# Para Windows\nsetwd(\"C:\\\\Users\\\\NombreUsuario\\\\Documentos\")\n\nUsando código para MacOS\n\n# Para macOS/Linux\nsetwd(\"/Users/NombreUsuario/Documentos\")"
  },
  {
    "objectID": "clases/clase_09.html#leer-archivos",
    "href": "clases/clase_09.html#leer-archivos",
    "title": "Ciencia de Datos para Economistas",
    "section": "4. Leer Archivos",
    "text": "4. Leer Archivos\n\nLectura de un archivo en Windows :\n\n# Ruta relativa\ndatos &lt;- read.csv(\"archivo.csv\")  \n\n# Ruta absoluta en Windows\ndatos &lt;- read.csv(\"C:\\\\Users\\\\NombreUsuario\\\\Documentos\\\\archivo.csv\")  \n\nLectura de un archivo en MacOS:\n\n# Ruta relativa\ndatos &lt;- read.csv(\"archivo.csv\")  \n# Ruta absoluta en macOS/Linux\ndatos &lt;- read.csv(\"/Users/NombreUsuario/Documentos/archivo.csv\")"
  },
  {
    "objectID": "clases/clase_09.html#escribir-archivos",
    "href": "clases/clase_09.html#escribir-archivos",
    "title": "Ciencia de Datos para Economistas",
    "section": "5 Escribir Archivos",
    "text": "5 Escribir Archivos\n\nEscritura de un archivo en Windows:\n\n# Ruta relativa\nwrite.csv(datos, \"nuevo_archivo.csv\")  \n# Ruta absoluta en Windows\nwrite.csv(datos, \"C:\\\\Users\\\\NombreUsuario\\\\Documentos\\\\nuevo_archivo.csv\")  \n\nEscritura de un archivo en MacOS\n\n# Ruta relativa\nwrite.csv(datos, \"nuevo_archivo.csv\")  \n# Ruta absoluta en macOS/Linux\nwrite.csv(datos, \"/Users/NombreUsuario/Documentos/nuevo_archivo.csv\")"
  },
  {
    "objectID": "clases/clase_11.html#objetivo",
    "href": "clases/clase_11.html#objetivo",
    "title": "Ciencia de Datos para Economistas",
    "section": "Objetivo",
    "text": "Objetivo\nRealizar manipulaciones a los datos contenidos en una DF según diversos criterios, en particular en operaciones que afectan a las columnas o atributos.\n\n\nAnuncios:\n\nChat y lecturas\nSesión lunes visualizaciones\nSesión miércoles proyecto y tarea ensayo"
  },
  {
    "objectID": "clases/clase_11.html#operaciones-en-columnas",
    "href": "clases/clase_11.html#operaciones-en-columnas",
    "title": "Ciencia de Datos para Economistas",
    "section": "Operaciones en Columnas",
    "text": "Operaciones en Columnas"
  },
  {
    "objectID": "clases/clase_11.html#select",
    "href": "clases/clase_11.html#select",
    "title": "Ciencia de Datos para Economistas",
    "section": "Select",
    "text": "Select\n\nselect(!)\nselect(ends_with())\neverything()"
  },
  {
    "objectID": "clases/clase_11.html#rename",
    "href": "clases/clase_11.html#rename",
    "title": "Ciencia de Datos para Economistas",
    "section": "Rename",
    "text": "Rename"
  },
  {
    "objectID": "clases/clase_11.html#mutate",
    "href": "clases/clase_11.html#mutate",
    "title": "Ciencia de Datos para Economistas",
    "section": "Mutate",
    "text": "Mutate\n\nifelse()\nmean()\nsum()"
  },
  {
    "objectID": "clases/clase_11.html#summarise",
    "href": "clases/clase_11.html#summarise",
    "title": "Ciencia de Datos para Economistas",
    "section": "Summarise",
    "text": "Summarise"
  },
  {
    "objectID": "clases/clase_11.html#group_by",
    "href": "clases/clase_11.html#group_by",
    "title": "Ciencia de Datos para Economistas",
    "section": "Group_By",
    "text": "Group_By"
  },
  {
    "objectID": "clases/clase_11.html#lecturas-recomendadas",
    "href": "clases/clase_11.html#lecturas-recomendadas",
    "title": "Ciencia de Datos para Economistas",
    "section": "Lecturas Recomendadas:",
    "text": "Lecturas Recomendadas:\n\nCapítulo 4 R4DS (temas pasados referente a variables y operaciones básicas)\nCapítulo 5 R4DS: comparaciones, operadores lógicos, arrange, select, mutate, summarise, pipe operator. En el capítulo se tratan los valores faltantes NA que luego serán abordados\n\n\n\n\n\n🔗 ucveconomiar4ds"
  }
]