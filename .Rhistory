filter(continent=='Americas')%>%
# select(country, lifeExp)%>%
distinct(country, lifeExp, , .keep_all=TRUE) #, .keep_all=TRUE
dim(df_paises_america_limpio)
str(df_paises_america_limpio)
df_paises_america_limpio
#3. crear df con valores duplicados uniendo dos df's
df_paises_america2 <- bind_rows(df_paises_america,
df_paises_america%>%
sample_n(30))%>%
arrange(country, year)
dim(df_paises_america)
dim(df_paises_america2) #presencia de valores duplicados
df_paises_america_limpio
#3. crear df con valores duplicados uniendo dos df's
df_paises_america2 <- bind_rows(df_paises_america,
df_paises_america%>%
sample_n(30))%>%
arrange(country, year)
dim(df_paises_america)
dim(df_paises_america2) #presencia de valores duplicados
#4. remover filas duplicadas
df_paises_america_limpio <- df_paises_america2%>%
filter(continent=='Americas')%>%
distinct(country, lifeExp) #, .keep_all=TRUE
df_paises_america2%>%
print(n=30)
#5. obtener listado de países de América según gapminder
paises_america <- df_gapminder_csv%>%
filter(continent=='Americas')%>%
select(country)%>%
distinct(country)%>% #.keep_all
pull(country)
#6. seleccionar sólo las columnas asociadas a valores promedios
df_gsm_mean <- df_gastosaludmundial%>%
filter(location_name %in% paises_america)%>%
select(location_name,year, ends_with('mean'))
names(df_gsm_mean)
unique(df_gsm_mean$location_name)
dim(df_gsm_mean)
string_paises <- paste0(paises_america,collapse = '|')
dim(df_gastosaludmundial)
#6. seleccionar sólo las columnas asociadas a valores promedios
df_gsm_mean <- df_gastosaludmundial%>%
filter(location_name %in% paises_america)%>%
select(location_name,year, ends_with('mean'))
names(df_gsm_mean)
unique(df_gsm_mean$location_name)
dim(df_gsm_mean)
string_paises <- paste0(paises_america,collapse = '|')
unique(df_gsm_mean$location_name)
paises_america
#faltantes
paises1 <- df_gastosaludmundial%>%
filter(location_name %in% paises_america)%>%
distinct(location_name)%>%
pull(location_name)
paises1
paises2
paises2 <- df_gastosaludmundial%>%
filter(str_detect(location_name, string_paises))%>%
distinct(location_name)%>%
pull(location_name)
paises2
paises2[paises2 %in% paises1]
paises2[!paises2 %in% paises1]
df_gapminder <- gapminder
##########################################################################################
######## Cargar librerías                                                          #######
##########################################################################################
library(tidyverse)
df_gapminder <- gapminder
library(gapminder)
df_gapminder <- gapminder
nombres <- I(c("Juan", "Ana", "Pedro"))
nombres
?I
string_paises
levels(paises_america2)
##########################################################################################
######## Cargar librerías                                                          #######
##########################################################################################
library(tidyverse)
library(gapminder)
##########################################################################################
######## Cargar conjuntos de datos                                                 #######
##########################################################################################
df_gapminder_csv <- read.csv('https://raw.githubusercontent.com/javendaXgh/datos/refs/heads/master/gapminder.csv')%>%
select(-X)%>%
as_tibble()
df_gapminder <- gapminder
df_gastosaludmundial <- read.csv('https://raw.githubusercontent.com/UCVeconomia2024-2/scripts/refs/heads/main/data_in/clase_12/IHME/IHME_HEALTH_SPENDING_1995_2021/IHME_HEALTH_SPENDING_1995_2021_Y2024M07D23.CSV')
##########################################################################################
######## Procesamientos. Cada enunciado es un problema a resolver                  #######
##########################################################################################
#1. Global Health Data Exchange. Revisar contenido pre EDA (Exploratory Data Analysis)
dim(df_gastosaludmundial)
names(df_gastosaludmundial)
summary(df_gastosaludmundial[,1:10])
str(df_gastosaludmundial[,1:10])
unique(df_gastosaludmundial$location_name)
#2. obtener listado de países de América según gapminder
df_paises_america <- df_gapminder_csv%>%
filter(continent=='Americas')
#3. crear df con valores duplicados uniendo dos df's
df_paises_america2 <- bind_rows(df_paises_america,
df_paises_america%>%
sample_n(30)
)%>%
arrange(country, year)
df_paises_america2%>%
print(n=30) # presencia de valores duplicados
dim(df_paises_america)
dim(df_paises_america2) #presencia de valores duplicados
#4. remover filas duplicadas
df_paises_america_limpio <- df_paises_america2%>%
filter(continent=='Americas')%>%
distinct(country, lifeExp) #, .keep_all=TRUE
dim(df_paises_america_limpio)
str(df_paises_america_limpio)
df_paises_america_limpio
#4.1 remover filas duplicadas conservando todos los atributos
df_paises_america_limpio <- df_paises_america2%>%
filter(continent=='Americas')%>%
distinct(country, lifeExp, .keep_all=TRUE)
dim(df_paises_america_limpio)
str(df_paises_america_limpio)
df_paises_america_limpio
#5. obtener listado de países de América según gapminder
paises_america <- df_gapminder_csv%>%
filter(continent=='Americas')%>%
select(country)%>%
distinct(country)%>% #.keep_all
pull(country)
length(paises_america) # cdad de paises
#6. seleccionar sólo las columnas asociadas a valores promedios
df_gsm_mean <- df_gastosaludmundial%>%
filter(location_name %in% paises_america)%>%
select(location_name,year, ends_with('mean'))
names(df_gsm_mean)
unique(df_gsm_mean$location_name) # 22 valores Vs. 25 en paises_america
dim(df_gsm_mean)
string_paises <- paste0(paises_america,collapse = '|')
df_gsm_mean <- df_gastosaludmundial%>%
filter(str_detect(location_name, string_paises))%>%
select(location_name,year, ends_with('mean'))
unique(df_gsm_mean$location_name)
#faltantes
paises1 <- df_gastosaludmundial%>%
filter(location_name %in% paises_america)%>%
distinct(location_name)%>%
pull(location_name)
library(stringr)
?str_detect # consultar función
paises2 <- df_gastosaludmundial%>%
filter(str_detect(location_name, string_paises))%>%
distinct(location_name)%>%
pull(location_name)
paises2[paises2 %in% paises1]
paises2[!paises2 %in% paises1]
##########################################################################################
#######Variación cuando existe un vector con factores                                 ####
##########################################################################################
library(forcats) # fue cargada previamente con tidyverse
paises_america2 <- df_gapminder%>%
filter(continent=='Americas')%>%
select(country)%>%
distinct(country)%>%
pull(country)
levels(paises_america2)
levels(paises_america)
fct_count(paises_america, sort = FALSE,
prop = FALSE)
fct_drop(paises_america)
fct_drop(paises_america)
?fct_drop
f <- factor(c("a", "b"), levels = c("a", "b", "c"))
f
fct_drop(f)
vector_factores <- factor(sample(sample(1:10), 20, replace = TRUE),
levels = 1:11)
vector_factores
vector_factores <- factor(sample(1:10, 20, replace = TRUE),
levels = 1:11)
vector_factores
levels(vector_factores)
relig_income
relig_income
billboard
?who
?relig_income
?pivot_longer
billboard %>%
pivot_longer(
cols = starts_with("wk"),
names_to = "week",
names_prefix = "wk",
values_to = "rank",
values_drop_na = TRUE
)
billboard %>%
pivot_longer(
cols = starts_with("wk"),
names_to = "week",
# names_prefix = "wk",
values_to = "rank",
values_drop_na = TRUE
)
billboard %>%
pivot_longer(
cols = starts_with("wk"),
names_to = "week",
# names_prefix = "wk",
values_to = "rank",
values_drop_na = TRUE
)
who%>%
select(new_sp_m2534)%>%
filter(!is.na(new_sp_m2534))%>%
separate(new_sp_m2534,
into=c('a','b','c'),
sep="new_?(.*)_(.)(.*)")
?fish_encounters
dim(fish_encounters)
vector_largo <- c(0, 0, 0, 0)
vector_corto <- c(1, 2)
vector_largo[] <- vector_corto
vector_largo
##########################################################################################
######## Limpiar ambiente de trabajo                                               #######
##########################################################################################
rm(list= ls())
##########################################################################################
######## Cargar librerías                                                          #######
##########################################################################################
library(tidyverse)
library(gapminder)
##########################################################################################
######## Cargar conjuntos de datos                                                 #######
##########################################################################################
df_gapminder_csv <- read.csv('https://raw.githubusercontent.com/javendaXgh/datos/refs/heads/master/gapminder.csv')%>%
select(-X)%>%
as_tibble()
df_gapminder <- gapminder
df_gastosaludmundial <- read.csv('https://raw.githubusercontent.com/UCVeconomia2024-2/scripts/refs/heads/main/data_in/clase_12/IHME/IHME_HEALTH_SPENDING_1995_2021/IHME_HEALTH_SPENDING_1995_2021_Y2024M07D23.CSV')
df_ventas <- read.csv('https://raw.githubusercontent.com/UCVeconomia2024-2/scripts/refs/heads/main/data_in/df_ventas.csv')
df_ventas%>%
filter(is.na(VAT))
df_ventas%>%
filter(VAT==NA)
df_ventas%>%
filter(VAT!=NA)
df_ventas%>%
filter(is.na(VAT))
class('1')
mode(mtcars)
?NA
as.numeric(NA)
as.character(NA)
as.numeric(c(1,NA))
as.character(c('Prop',NA))
as.character(c(1,NA))
vector_corto <- c(1, 2)
vector_largo <- c(3, 4, 5)
resultado <- vector_corto + vector_largo
# Eliminar filas con valores NA en un data frame
df <- data.frame(a = c(1, 2, NA), b = c(4, NA, 6))
df_sin_na <- na.omit(df)
df_sin_na
# Reemplazar valores NA con la media de la columna 'a'
df$a[is.na(df$a)] <- mean(df$a, na.rm = TRUE)
df
mean(df$a, na.rm = TRUE)
df_completos <- df[complete.cases(df), ]
df_completos
Sys.time()
Sys.timezone()
?strftime
fecha_ct <- as.POSIXct(1268736919, origin="1970-01-01", tz="GMT")
fecha_ct <- as.POSIXct(1268736919, origin="1970-01-01", tz="GMT")
fecha_lt <- as.POSIXlt(1268736919, origin="1970-01-01", tz="GMT")
fecha_formateada <- strftime(fecha_ct, "%Y-%m-%d")
print(fecha_formateada)
print(strftime(fecha_ct, "%Y-%M-%D"))
print(strftime(Sys.Date(), "%Y-%M-%D"))
print(strftime(Sys.Date(), "%Y-%M-%d"))
print(strftime(Sys.Date(), "%y-%M-%d"))
print(strftime(Sys.Date(), "%y-%month-%d"))
as.POSIXct(fecha_lt$datetime[1],
format = "%Y-%m-%dT%H:%M",
tz = "Europa/Berlin")
fecha_lt
fecha_lt$datetime[1]
as.POSIXct(fecha_lt,
format = "%Y-%m-%dT%H:%M",
tz = "Europa/Berlin")
as.POSIXct(fecha_lt,
format = "%Y-%m-%dT%H:%M",
tz = "Europa/Berlin")
as.POSIXct(fecha_lt,
format = "%Y-%m-%dT%H:%M",
tz = "Europe/Berlin")
print(strftime(Sys.Date(), "%Y-%m-%dT%H:%M"))
print(strftime(Sys.Date(), "%Y-%m-%dT %H:%M"))
print(strftime(Sys.Date(), "%Y-%m-%d Time %H:%M"))
print(strftime(Sys.time(), "%Y-%m-%d Time %H:%M"))
as.POSIXct(fecha_lt,
format = "%Y-%m-%d T %H:%M",
tz = "Europe/Berlin")
as.POSIXct("2012-06-28")
?strftime
plot(mtcars$mpg,mtcars$cyl)
devtools::install_github("agusnieto77/TweetScraperR")
library(TweetScraperR)
?getTweetsSearchStreaming
urls_hashtagRstats <- getTweetsSearchStreaming(search = "#Helicoide",
n_tweets = 3000)
urls_hashtagRstats <- getTweetsSearchStreaming(search = "#Helicoide",
n_tweets = 30)
urls_hashtagRstats
tweets_historicos <- getTweetsHistoricalHashtag("#Helicoide",
n_tweets = 30)
tweets_historicos <- getTweetsHistoricalHashtag("#Helicoide",
n_tweets = 30)
timeline_tweets <- getTweetsHistoricalTimeline(username = "rstatstweet", n_tweets = 10,
since = "2018-10-26", until = "2020-10-30")
library(tidyverse)
library(sf)
library(spData)
library(gganimate)
library(viridis)
data(world)
# see also: https://proj.org/operations/projections/index.html
projs <- list(
"Mercator" = "+proj=merc",
"WGS 84" = "+proj=longlat",
"Robinson" = "+proj=robin",
"Compact Miller" = "+proj=comill",
"Eckert I" = "+proj=eck1",
"Eckert II" = "+proj=eck2",
"Eckert III" = "+proj=eck3",
"Eckert IV" = "+proj=eck4",
"Mollweide" = "+proj=moll",
"Azimuth Equidistant" = "+proj=aeqd",
"Lambert Equal Area" = "+proj=laea",
"Adams World in a Square 2" = "+proj=adams_ws2",
"Sinusoidal (Sanson-Flamsteed)" = "+proj=sinu",
"Interrupted Goode Homolosine" = "+proj=igh"
)
##########
dd <- map_dfr(projs, function(p) {
d <- world %>%
select(iso_a2, name_long, continent, geom) %>%
mutate(projection = p, L1 = 1:n()) %>%
st_transform(p)
dd <- left_join(
st_coordinates(d) %>% as_tibble(),
d %>% as_tibble() %>% select(-geom),
by = "L1"
)
res <- dd %>%
mutate(name_long=as.character(name_long))%>%
select(x = X, y = Y, everything(),name_long )%>%
mutate(id = paste0(L1, L2, L3)) %>%
mutate(x_orig = x, y_orig = y,
x = (x - min(x)) / (max(x) - min(x)),
y = (y - min(y)) / (max(y) - min(y)))
res
})%>%
mutate(projection = factor(projection, levels = unlist(projs)))
anim <- ggplot(dd, aes(x = x, y = y,  group = id)) + # group = id,
geom_polygon(fill="black") + #fill="black"
transition_states(projection) +
ease_aes("cubic-in-out") +
labs(title = "El mundo proyectado en sistema: '{names(projs)[projs == closest_state]}' Projektion",
subtitle = "Proyección: '{closest_state}'") +
theme(axis.title=element_blank(),
#axis.text=element_blank(),
axis.ticks=element_blank(),
panel.grid=element_blank(),
plot.background=element_rect(fill = "grey60"))+
theme_dark()
anim
#########
world1 <- world%>%
filter(name_long %in% c('Colombia', 'Venezuela','Guyana'))%>%
mutate(name_long = replace(name_long, name_long == "Guyana", "Venezuela"))%>%
mutate(iso_a2 = replace(iso_a2, iso_a2 == "GY", "VE"))%>%
mutate(color=case_when(iso_a2=='VE'~'red',
iso_a2=='CO'~'blue'))
unique(world1$iso_a2)
dd1 <- map_dfr(projs, function(p) {
d <- world1 %>%
select(iso_a2, name_long,geom) %>%
mutate(projection = p, L1 = 1:n()) %>%
st_transform(p)
dd <- left_join(
st_coordinates(d) %>% as_tibble(),
d %>% as_tibble() %>% select(-geom),
by = "L1"
)
#
res <- dd %>%
mutate(name_long=as.character(name_long))%>%
select(x = X, y = Y, everything(),name_long )%>%
mutate(id = paste0(L1, L2, L3)) %>%
mutate(id = replace(id, id == 114,113)) %>%
mutate(x_orig = x, y_orig = y,
x = (x - min(x)) / (max(x) - min(x)),
y = (y - min(y)) / (max(y) - min(y)))
res
})%>%
mutate(projection = factor(projection, levels = unlist(projs)))#%>%
unique(dd1$id)
cols <- c("#FACD2D","#0011AD","#0011AD")
anim_ve <- ggplot(dd1, aes(x = x, y = y,fill = id,colour='black')) + # group = id,
geom_polygon() + #fill="black"
transition_states(projection) +
scale_fill_manual(values = cols)+
# scale_fill_viridis(discrete = TRUE) +
ease_aes("cubic-in-out") +
labs(title = "Colombia y Venezuela proyectados en: '{names(projs)[projs == closest_state]}' Projektion",
subtitle = "Proyección: '{closest_state}'") +
theme_dark() +
theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
panel.grid=element_blank(),
plot.background=element_rect(fill = "#5D737E"),
legend.title = element_blank(),
legend.position = 'none')
anim_ve
setwd("~/R/UCV_ECONOMIA_R4DS/r4dsucv2024")
df_funcion_ggplot <- data.frame(Component=
c('Datos','Estética', 'Geometrías','Estadísticas'
'Escalas','Sistema de Coordenadas','Facetas','Temas Visuales'),
c('los datos que se van a visualizar',
'el mapeo estético que hace entre las variables y la representación visual',
'las formas geométricas usadas para representar los datos',
'las transformaciones estadísticas aplicadas a los datos',
'mapeos entre los datos y las representaciones en los ejes (dimensiones)',
'mapeos de los datos dentro del plano ',
'los arreglos de los datos dentro de una grilla rectangular de gráficos',
'la representación visual general del gráfico (fondo, tipo de letras, etc.)'
c('los datos que se van a visualizar',
c('los datos que se van a visualizar',
'el mapeo estético que hace entre las variables y la representación visual',
'las formas geométricas usadas para representar los datos',
'las transformaciones estadísticas aplicadas a los datos',
'mapeos entre los datos y las representaciones en los ejes (dimensiones)',
'mapeos de los datos dentro del plano ',
'los arreglos de los datos dentro de una grilla rectangular de gráficos',
'la representación visual general del gráfico (fondo, tipo de letras, etc.)')
c('`ggplot(data)`','`aes()`','`geom_*`','`stat_*`',
'`scale_*`','`coord_*`','`facet_*`','`theme()` o `theme_*`')
c('Datos','Estética', 'Geometrías','Estadísticas'
'Escalas','Sistema de Coordenadas','Facetas','Temas Visuales')
c('Datos','Estética', 'Geometrías','Estadísticas'
'Escalas','Sistema de Coordenadas','Facetas','Temas Visuales')
c('Datos','Estética', 'Geometrías','Estadísticas'
'Escalas','Sistema de Coordenadas','Facetas','Temas Visuales')
df_funcion_ggplot <- data.frame(Component=  c('Datos','Estética', 'Geometrías','Estadísticas',
'Escalas','Sistema de Coordenadas','Facetas','Temas Visuales'),
Funcion= c('`ggplot(data)`','`aes()`','`geom_*`','`stat_*`',
'`scale_*`','`coord_*`','`facet_*`','`theme()` o `theme_*`'),
Descripción= c('los datos que se van a visualizar',
'el mapeo estético que hace entre las variables y la representación visual',
'las formas geométricas usadas para representar los datos',
'las transformaciones estadísticas aplicadas a los datos',
'mapeos entre los datos y las representaciones en los ejes (dimensiones)',
'mapeos de los datos dentro del plano ',
'los arreglos de los datos dentro de una grilla rectangular de gráficos',
'la representación visual general del gráfico (fondo, tipo de letras, etc.)')
)
c('✅',  '✅' ,'✅',  '✅' ,️ '⛔️', '⛔️','✅',  '✅')
c('✅', '✅' ,'✅',  '✅' ,️ '⛔️', '⛔️','✅',  '✅')
'✅'
'✅'
c('✅' ,'✅' ,'✅' ,'✅' ,'⛔️', '⛔️','✅' ,'✅')
?geom_smooth
??geom_smooth
??geom_col
library(httr2)
req <- request("https://covid19.patria.org.ve/api/v1/timeline")
req
req |> req_method("GET")
req |> req_dry_run()
resp <- req_perform(req)
resp
resp |> resp_content_type()
resp |> resp_status_desc()
resp |> resp_body_html()
str(resp)
resp$status_code
resp$headers
resp$method
resp$body
resp$body%>%
rawToChar()
resp |> resp_content_type()
resp |> resp_status_desc()
str(resp)
resp |> resp_content_type()
resp$body%>%
rawToChar()%>%
resp$body%>%
rawToChar()%>%
fromJSON()
library(jsonlite)
resp$body%>%
rawToChar()%>%
fromJSON()
