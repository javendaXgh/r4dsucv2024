---
title: "Ciencia de Datos para Economistas"
subtitle: "Clase 8- Inspeccionar Data Frames"
date: "Noviembre 11, 2024"
author: "MSc. José M. Avendaño"
# output:
#   html_document:
#     toc: yes
filters:
  - webr
engine: knitr
format: 
  revealjs:
    incremental: true   
# execute: 
#   echo: true
  # eval: false
---

## Varios y Puntos Pendientes

::: notes
intervenciones en clase 13-11 sobre la visualizaciones que se hagan con ggplot2 que viene de tarea clase 5. Cambio de fecha del 11-11 al 13-11

Modificación tarea clase 5 ggplot

Tareas clase 7 (entrega 13 y 18) y clase 8 (20-11)

Clase 6 práctica 1 construccion vectores
:::

## Objetivo

-   Presentar operadores lógicos y trabajar con ellos

-   Acceder a elementos de vectores y DF's según condiciones lógicas

-   Inspeccionar valores, rangos y estructura de una DF

## Tabla de Contingencia

Cantidad cilindros por observación

```{web-r}

mtcars$cyl
```

Conteo de frecuencia de un dato categórico

```{webr-r}

table(mtcars$cyl)
```

## Tabla de Contingencia Cruzada

Múltiples categorías

|       |                                     |
|:------|:------------------------------------|
| `cyl` | Number of cylinders                 |
| `vs`  | Engine (0 = V-shaped, 1 = straight) |

```{webr-r}
table(mtcars$cyl, mtcars$vs)
```

## Tabla Resumen Estadístico

Representar los valores mínimo y máximo, primer y tercer cuartil, media, promedio de un vector o data frame.

```{webr-r}
summary(mtcars$mpg)
```

## Tabla Resumen Estadístico - cont

La salida de función `summary` cambia según el objeto que estemos trabajando

```{webr-r}
summary(mtcars)
```

## Operadores Lógicos

-   $>$ (mayor a)
-   $>=$ (mayor o igual a)
-   $<$ (menor a)
-   $<=$ (menor o igual a)
-   $==$ (igual a)
-   $!=$ (distinto a)
-   & (y)
-   $|$ (o)

## Uso de Operadores Lógicos en un Vector

Vector seleccionado "millas por galón" `mpg`

```{webr-r}
mtcars$mpg
```

## Vector Lógico con valores que Cumplen una Condición

Mayor que un valor dado

```{webr-r}
  mtcars$mpg>19.20
```

## Vector Lógico con valores que Cumplen una Condición -cont.

<br> Mayor que el valor que retorna una función

```{webr-r}
mtcars$mpg>mean(mtcars$mpg)
```

## Asignación valores a variables

-   variable con promedio

-   creación df

-   evaluar valores que cumplen ambas condiciones

```{webr-r}
promedio_mpg <- mean(mtcars$mpg)
valor_3ercuartil <- 33.90 

df_mpg <- data.frame(mpg= mtcars$mpg,
                     may_mean= mtcars$mpg>promedio_mpg,
                     men_3cuar= mtcars$mpg<valor_3ercuartil )


```

Reforzar con lectura propuesta en Tarea Clase 8 sobre "[Tabla de Verdad](https://es.wikipedia.org/wiki/Tabla_de_verdad)".

## Inspección DF que Cumple Condiciones

```{webr-r}
df_mpg
```

## Forma vectorizada:

Se aplica el condicional lógico sobre el elemento *i* del vector analizado teniendo de resultado un vector del mismo `length` del vector de entrada.

Por ejemplo, si *i* vale 3, se compara si 22.8 es mayor que el `promedio_mpg` **y** si es menor que `valor_3ercuartil`

```{webr-r}
mtcars$mpg>promedio_mpg & mtcars$mpg<valor_3ercuartil 
```

## Múltiples Condiciones

Operador `&` (y)

```{webr-r}
mtcars$mpg[mtcars$mpg>promedio_mpg & mtcars$mpg<valor_3ercuartil ]
```

<br> Operador `==` doble igualdad (👀 es distinto a asignación)

```{webr-r}
 which (mtcars$mpg == 19.2  )
```

`which` indica el índice de los elementos extraídos según una condición

## Múltiples Condiciones - cont

```{webr-r}
mtcars[ mtcars$mpg==21, ]
```

<br> Operador `!=` diferente

```{webr-r}
mtcars[mtcars$mpg!=21,c(1,4:6)]
```

## Múltiples Condiciones - cont 2

<br> Operador `|` or (o)

```{webr-r}
mtcars[which(mtcars$mpg==21 | mtcars$mpg==22.8),1:3]
```

## Data Frame a Trabajar

```{webr-r}
# View(datasets::LifeCycleSavings)
```

```         
Sobre el contenido de la df: según la hipótesis del ahorro a lo largo del ciclo vital desarrollada por Franco Modigliani, el coeficiente de ahorro (ahorro personal agregado dividido por la renta disponible) se explica por la renta disponible per cápita, la tasa porcentual de variación de la renta disponible per cápita y dos variables demográficas: el porcentaje de población menor de 15 años y el porcentaje de población mayor de 75 años. Los datos se promedian a lo largo de la década 1960-1970 para eliminar el ciclo económico u otras fluctuaciones a corto plazo
```

## Asignar a una variable la DF

```{webr-r}
df_ahorro <- datasets::LifeCycleSavings
head(df_ahorro, 8)
```

## Inspección Data Frame

Dimensiones

```{webr-r}
dim(df_ahorro)
```

<br> Número de columnas

```{webr-r}
ncol(df_ahorro)
```

## Inspección Data Frame -cont

Número de filas

```{webr-r}
nrow(df_ahorro)
```

<br> Nombres de las columnas

```{webr-r}
colnames(df_ahorro)
```

## Inspección Data Frame -cont2

<br> Nombres de las filas

```{webr-r}
rownames(df_ahorro)
```

## Inspección Data Frame -cont3

Estructura de un objeto

```{webr-r}
str(df_ahorro)
```

## Inspección Data Frame -cont4

<br> Resumen Estadístico

```{webr-r}
summary(df_ahorro)
```

## Crear Columna con Nombre Países

Revisar nombres filas

```{webr-r}
rownames(df_ahorro)[1:10]
```

<br> Asignar nueva columa a la DF

```{webr-r}
df_ahorro$pais <- rownames(df_ahorro)
```



## Inspección Nuevo Atributo

Revisar DF

```{webr-r}
head(df_ahorro, 5)
```

## Funciones Valores Extremos

Mínimo en vector

```{webr-r}
min(df_ahorro$pop15)
```

<br> Máximo en vector

```{webr-r}
max(df_ahorro$pop15)
```

## Importar en Formato csv una Data Frame

```{webr-r}
df_gapminder <- read.csv('https://raw.githubusercontent.com/javendaXgh/datos/refs/heads/master/gapminder.csv') 

```

<br>

```{webr-r}
head(df_gapminder,3)
```

👀: los datos tienen estructura tabular. Observaciones son filas y atributos las columnas

## Estructura Gapminder

Estructura DF

```{webr-r}
str(df_gapminder)
```

## Tabla Sumario Gapminder

```{webr-r}
summary(df_gapminder)
```

::: notes
Tiene estructura tabular
:::

## Valores Únicos por Atributo

Países

```{webr-r}
unique(df_gapminder$country)
```

## Valores Únicos por Atributo - cont

<br> Años

```{webr-r}
unique(df_gapminder$year)
```

## DPLYR (🏇🏽 de batalla)

Una gramática para la manipulación de datos.

```{webr-r}
library(dplyr)
```

## DPLYR / Filtrado

Función `filter`.

Encadenamiento en los procesamientos: operador pipe `%>%`

```{webr-r}
df_venezuela <- df_gapminder %>%
  filter(country=='Venezuela')

df_venezuela
```

## Revisar Tabla Venezuela

Tabla sumario

```{webr-r}
summary(df_venezuela)
```

## Juntar DF´s

```{webr-r}
df_colombia <- df_gapminder %>%
  filter(country=='Colombia')

df_colombia
```

## Combinar DF's

Función `bind_rows`

```{webr-r}
df_gran_colombia <- bind_rows(df_venezuela,
                              df_colombia )
```

## Revisar Nueva DF

```{webr-r}
df_gran_colombia
```

## Continuar Inspección...
