datos_goo_respuesta$parts%>%
str_remove('```json\n|\n```\n')
datos_goo_respuesta$parts%>%
str_remove(.,'```json\n|\n```\n')
datos_goo_respuesta$parts%>%
str_remove(.,'```json\\n|\\n```\\n')
datos_goo_respuesta$parts%>%
str_squish()
datos_goo_respuesta$parts%>%
str_squish()
datos_goo_respuesta$parts%>%
str_squish(.)
datos_goo_respuesta$parts
datos_goo_respuesta$parts%>%
.[[1]]
datos_goo_respuesta$parts%>%
.[[1]]%>%
str_squish(.)
datos_goo_respuesta$parts%>%
.[[1]]%>%
str_squish(.)%>%
str_remove(.,'```json\\n|\\n```\\n')
datos_goo_respuesta$parts%>%
.[[1]]%>%
str_squish(.)%>%
str_remove(.,'```json |```')
datos_goo_respuesta$parts%>%
.[[1]]%>%
str_squish(.)%>%
str_remove(.,'```json | ```')
datos_goo_respuesta$parts%>%
.[[1]]%>%
str_squish(.)%>%
str_remove_all(.,'```json | ```')
datos_goo_respuesta$parts%>%
.[[1]]%>%
str_squish(.)%>%
str_remove_all(.,'```json | ```')%>%
fromJSON()
datos_goo_respuesta$parts%>%
.[[1]]%>%
str_squish(.)%>%
str_remove_all(.,'```json | ```')%>%
fromJSON()%>%
as_data_frame()
datos_goo_respuesta$parts%>%
.[[1]]%>%
str_squish(.)%>%
str_remove_all(.,'```json | ```')%>%
fromJSON()
llm_resultado_google$body |>
rawToChar() |>
fromJSON()%>%
.$candidates %>%
.$content%>%
.$parts%>%
.[[1]]%>%
str_squish(.)%>%
str_remove_all(.,'```json | ```')%>%
fromJSON()
saveRDS(datos_goo_respuesta,'clases/data_in/datos_goo_respuesta.rds')
library(pdfetch)
library(xts)
valor_apple <- pdfetch_YAHOO(c("AAPL"))
valor_apple <- valor_apple%>%
as_data_frame()%>%
mutate(accion= 'Apple',
codigo= 'AAPL')%>%
bind_cols( fecha= index(valor_apple))
library(tidyverse)
valor_apple <- pdfetch_YAHOO(c("AAPL"))
valor_apple <- valor_apple%>%
as_data_frame()%>%
mutate(accion= 'Apple',
codigo= 'AAPL')%>%
bind_cols( fecha= index(valor_apple))
names(valor_apple) <- c('open','high','low',
'close','adjclose', 'volume',
'accion','codigo','fecha')
valor_apple <- valor_apple%>%
as_tibble()%>%
mutate(accion= 'Apple',
codigo= 'AAPL')%>%
bind_cols( fecha= index(valor_apple))
names(valor_apple) <- c('open','high','low',
'close','adjclose', 'volume',
'accion','codigo','fecha')
library(tidyverse)
valor_apple <- pdfetch_YAHOO(c("AAPL"))
valor_apple <- valor_apple%>%
as_data_frame()%>%
mutate(accion= 'Apple',
codigo= 'AAPL')%>%
bind_cols( fecha= index(valor_apple))
names(valor_apple) <- c('open','high','low',
'close','adjclose', 'volume',
'accion','codigo','fecha')
# descarga valores en formato zoo
valor_bitcoin <- pdfetch_YAHOO('BTC-USD')
# procesamiento de datos descargados
valor_bitcoin <- valor_bitcoin%>%
as_data_frame()%>%
mutate(accion= 'Bitcoin',
codigo= 'BTC-USD')%>%
bind_cols( fecha= index(valor_bitcoin))
names(valor_bitcoin) <- c('open','high','low',
'close','adjclose', 'volume',
'accion','codigo','fecha')
# descarga valores en formato zoo
valor_nvidia <- pdfetch_YAHOO('NVDA')
# procesamiento de datos descargados
valor_nvidia <- valor_nvidia%>%
as_data_frame()%>%
mutate(accion= 'Nvidia',
codigo= 'NVDA')%>%
bind_cols( fecha= index(valor_nvidia))
names(valor_nvidia) <- c('open','high','low',
'close','adjclose', 'volume',
'accion','codigo','fecha')
# descarga valores en formato zoo
valor_google <- pdfetch_YAHOO('GOOG')
# procesamiento de datos descargados
valor_google <- valor_google%>%
as_data_frame()%>%
mutate(accion= 'Google',
codigo= 'GOOG')%>%
bind_cols( fecha= index(valor_google))
names(valor_google) <- c('open','high','low',
'close','adjclose', 'volume',
'accion','codigo','fecha')
# descarga valores en formato zoo
valor_oracle <- pdfetch_YAHOO('ORCL')
# procesamiento de datos descargados
valor_oracle <- valor_oracle%>%
as_data_frame()%>%
mutate(accion= 'Oracle',
codigo= 'ORCL')%>%
bind_cols( fecha= index(valor_oracle))
names(valor_oracle) <- c('open','high','low',
'close','adjclose', 'volume',
'accion','codigo','fecha')
# unificar en una data frame valores de las acciones descargados
valores_acciones <- bind_rows(valor_apple,
valor_bitcoin,
valor_nvidia,
valor_google,
valor_oracle)%>%
select(9,1:7)%>%
pivot_longer(cols = c('open','high','low',
'close','adjclose'),
names_to = "tipo_valor",
values_to = "valor")
valores_acciones
library(dplyr)
?left_join
df_paises <- data.frame ( pais = c("España", "Francia",
"Alemania", "Italia"),
poblacion = c(47.3, 65.2, 83.1, 60.4) )
df_paises <- data.frame ( pais = c("España", "Francia",
"Alemania", "Italia"),
poblacion = c(47.3, 65.2, 83.1, 60.4) )
df_economia <- data.frame( Pais = c("España", "Alemania",
"Italia", "Portugal"),
pib_per_capita = c(29500, 37800, 31600, 24000) )
left_join(df_paises,df_economia)
left_join(df_paises,df_economia, by=c('pais','Pais'))
df_economia
left_join(df_paises,df_economia, by=c('pais','Pais'))
left_join(df_paises, df_economia, by=c('pais','Pais'))
left_join(df_paises, df_economia, suffix = c(".pais", ".Pais"))
Pais
left_join(df_paises, df_economia, suffix = c(pais, Pais))
left_join(df_paises, df_economia, by = c(pais, Pais))
left_join(df_paises, df_economia, by = c('pais', 'Pais'))
left_join(df_paises, df_economia, by = c('pais'= 'Pais'))
full_join(df_paises, df_economia, by = c('pais'= 'Pais'))
library(tidyverse)
?rowwise
df <- data.frame(
x = c(1, 2, 3),
y = c(4, 5, 6)
)
df <- data.frame(
x = c(1, 2, 3),
y = c(4, 5, 6)
)
df <- data.frame(
x = c(1, 2, 3),
y = c(4, 5, 6))
df %>%
rowwise() %>%
mutate(promedio_xy = mean(c(x, y)))
df %>%
# rowwise() %>%
mutate(promedio_xy = mean(c(x, y)))
# Ejemplo 2: Filtrar filas basadas en una condición compleja que involucra múltiples columnas
df <- data.frame(
a = c(10, 20, 30),
b = c(5, 15, 25)
)
df %>% rowwise() %>% filter(a > b * 2)
df_1 <- data.frame(
x = c(1, 2, 3),
y = c(4, 5, 6))
df1_1 %>%
mutate(promedio_xy = mean(c(x, y)))
df_1 %>%
mutate(promedio_xy = mean(c(x, y)))
df_1 %>%
rowwise() %>%
mutate(promedio_xy = mean(c(x, y)))
# Ejemplo 2: Filtrar filas basadas en una condición compleja que involucra múltiples columnas
df_2 <- data.frame(
a = c(10, 20, 30),
b = c(5, 15, 25))
df_2
df_2 %>%
rowwise() %>%
filter(a >( b * 2))
df_2
df_2 %>%
rowwise() %>%
filter(a <( b * 2))
df_2 %>%
# rowwise() %>%
filter(a <( b * 2))
df_1 %>%
rowwise() %>%
mutate(promedio_xy = mean(x, y))
df_1 %>%
# rowwise() %>%
mutate(promedio_xy = mean(x, y))
df_1 %>%
rowwise() %>%
mutate(promedio_xy = mean(x, y))
df_1 %>%
rowwise() %>%
mutate(promedio_xy = mean(c(x, y)))
df_1 %>%
mutate(promedio_xy = mean(c(x, y)))
df_1 %>%
rowwise() %>%
mutate(promedio_xy = mean(c(x, y)))
df <- data.frame(
lat1 = c(40.7128),
lon1 = c(-74.0060),
lat2 = c(34.0522),
lon2 = c(-118.2437)
)
df
# Crear un tibble
datos <- tribble(
~id, ~valor1, ~valor2,
"A", 10, 5,
"B", 15, 3,
"C", 20, 7
)
datos
# Usar rowwise para calcular el ratio por fila
resultados <- datos %>%
rowwise() %>%
mutate(ratio = valor1 / valor2) %>%
ungroup()
# Usar rowwise para calcular el ratio por fila
datos %>%
rowwise() %>%
mutate(ratio = valor1 / valor2) %>%
ungroup()
# Usar rowwise para calcular el ratio por fila
datos %>%
# rowwise() %>%
mutate(ratio = valor1 / valor2) %>%
ungroup()
mi_funcion <- function(x, y) {
return(x * y + x / y)
}
# Usar rowwise para aplicar la función personalizada
datos %>%
rowwise() %>%
mutate(resultado = mi_funcion(valor1, valor2)) %>%
ungroup()
# Usar rowwise para aplicar la función personalizada
datos %>%
# rowwise() %>%
mutate(resultado = mi_funcion(valor1, valor2)) %>%
ungroup()
# Usar rowwise para aplicar la función personalizada
datos %>%
# rowwise() %>%
mutate(resultado = mi_funcion(valor1, valor2))# %>%
# Usar rowwise para aplicar la función personalizada
datos %>%
# rowwise() %>%
mutate(resultado = mi_funcion(valor1, valor2))# %>%
# Usar rowwise para aplicar la función personalizada
datos %>%
rowwise() %>%
mutate(resultado = mi_funcion(valor1, valor2))# %>%
mi_funcion <- function(x, y) {
return(sqtr(x * y + x / y))
}
# Usar rowwise para aplicar la función personalizada
datos %>%
rowwise() %>%
mutate(resultado = mi_funcion(valor1, valor2))# %>%
mi_funcion <- function(x, y) {
return(sqrt(x * y + x / y))
}
# Usar rowwise para aplicar la función personalizada
datos %>%
rowwise() %>%
mutate(resultado = mi_funcion(valor1, valor2))# %>%
# Usar rowwise para aplicar la función personalizada
datos %>%
# rowwise() %>%
mutate(resultado = mi_funcion(valor1, valor2))# %>%
mi_funcion <- function(x, y) {
return(sqrt(mean(x * y) + x / y))
}
# Usar rowwise para aplicar la función personalizada
datos %>%
# rowwise() %>%
mutate(resultado = mi_funcion(valor1, valor2))# %>%
# Usar rowwise para aplicar la función personalizada
datos %>%
rowwise() %>%
mutate(resultado = mi_funcion(valor1, valor2))# %>%
# Crear un tibble
datos <- tribble(
~id, ~valor1, ~valor2,
"A", 10, 5,
"B", 15, 3,
"C", 20, 7
)
# Usar rowwise para calcular el ratio por fila
datos %>%
rowwise() %>%
mutate(ratio = valor1 / valor2) %>%
ungroup()
# Usar rowwise para calcular el ratio por fila
datos %>%
# rowwise() %>%
mutate(ratio = valor1 / valor2) %>%
ungroup()
# Usar rowwise para calcular el ratio por fila
datos %>%
# rowwise() %>%
mutate(ratio = valor1 / valor2) %>%
ungroup()
# Crear un tibble
datos <- tribble(
~id, ~valor1, ~valor2,
"A", 10, 5,
"B", 15, 3,
"C", 21, 7
)
# Usar rowwise para calcular el ratio por fila
datos %>%
# rowwise() %>%
mutate(ratio = valor1 / valor2) %>%
ungroup()
# Usar rowwise para calcular el ratio por fila
datos %>%
rowwise() %>%
mutate(ratio = valor1 / valor2) %>%
ungroup()
# Usar rowwise para calcular el ratio por fila
datos %>%
# rowwise() %>%
mutate(ratio = valor1 / valor2) %>%
ungroup()
mi_funcion <- function(x, y) {
sum(x+y)/mean(c(x,y))
}
# Usar rowwise para aplicar la función personalizada
datos %>%
rowwise() %>%
mutate(resultado = mi_funcion(valor1, valor2))# %>%
# Usar rowwise para aplicar la función personalizada
datos %>%
# rowwise() %>%
mutate(resultado = mi_funcion(valor1, valor2))# %>%
mi_funcion <- function(x, y) {
sum(x+y)/mean(c(x,y))
}
# Usar rowwise para aplicar la función personalizada
datos %>%
# rowwise() %>%
mutate(resultado = mi_funcion(valor1, valor2))
# Usar rowwise para aplicar la función personalizada
datos %>%
rowwise() %>%
mutate(resultado = mi_funcion(valor1, valor2))
# Crear un tibble
datos <- tribble(
~id, ~valor1, ~valor2,
"A", 10, 5,
"B", 12, 3,
"C", 20, 7
)
datos
# Usar rowwise para calcular el ratio por fila
datos %>%
# rowwise() %>%
mutate(ratio = valor1 / valor2) %>%
ungroup()
# Usar rowwise para calcular el ratio por fila
datos %>%
rowwise() %>%
mutate(ratio = valor1 / valor2) %>%
ungroup()
# Usar rowwise para aplicar la función personalizada
datos %>%
rowwise() %>%
mutate(resultado = mi_funcion(valor1, valor2))
(
# Usar rowwise para aplicar la función personalizada
datos %>%
# rowwise() %>%
mutate(resultado = mi_funcion(valor1, valor2))
# Usar rowwise para aplicar la función personalizada
datos %>%
mi_funcion <- function(x, y) {
sum(x+y)/mean(c(x,y))
}
mi_funcion(5,3)
# Usar rowwise para aplicar la función personalizada
datos %>%
# rowwise() %>%
mutate(resultado = mi_funcion(valor1, valor2))
# Usar rowwise para aplicar la función personalizada
datos %>%
rowwise() %>%
mutate(resultado = mi_funcion(valor1, valor2))
datos
datos
# Crear un tibble
datos <- tribble(
~id, ~valor1, ~valor2,
"A", 10, 5,
"B", 21, 3,
"C", 9, 7
)
datos
mi_funcion <- function(x, y) {
sum(x+y)/mean(c(x,y))
}
mi_funcion(5,3)
# Usar rowwise para aplicar la función personalizada
datos %>%
rowwise() %>%
mutate(resultado = mi_funcion(valor1, valor2))
datos
# Crear un tibble
datos <- tribble(
~id, ~valor1, ~valor2,
"A", 10, 5,
"B", 40, 3,
"C", 9, 7
)
mi_funcion <- function(x, y) {
sum(x+y)/mean(c(x,y))
}
mi_funcion(5,3)
# Crear un tibble
datos <- tribble(
~id, ~valor1, ~valor2,
"A", 10, 5,
"B", 40, 3,
"C", 9, 7
)
datos
# Usar rowwise para aplicar la función personalizada
datos %>%
rowwise() %>%
mutate(resultado = mi_funcion(valor1, valor2))
# Usar rowwise para aplicar la función personalizada
datos %>%
# rowwise() %>%
mutate(resultado = mi_funcion(valor1, valor2))
# Usar rowwise para aplicar la función personalizada
datos %>%
rowwise() %>%
mutate(resultado = mi_funcion(valor1, valor2))
mi_funcion <- function(x, y) {
sum(x+y)*mean(c(x,y))
}
mi_funcion <- function(x, y) {
sum(x, y)*mean(c(x,y))
}
mi_funcion(5,3)
# Crear un tibble
datos <- tribble(
~id, ~valor1, ~valor2,
"A", 10, 5,
"B", 40, 3,
"C", 9, 7
)
datos
# Usar rowwise para aplicar la función personalizada
datos %>%
rowwise() %>%
mutate(resultado = mi_funcion(valor1, valor2))
# Usar rowwise para aplicar la función personalizada
datos %>%
# rowwise() %>%
mutate(resultado = mi_funcion(valor1, valor2))
shiny::runApp('test')
?xts
??xts
library(xts)
??xts
