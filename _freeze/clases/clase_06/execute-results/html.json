{
  "hash": "1b549e44c4c9a7d48198f0cf62b2e596",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Ciencia de Datos para Economistas\"\nsubtitle: \"Clase 6- Construir Funciones y Data Frames\"\nfilters:\n  - webr\nengine: knitr\n#format: live-html\ndate: \"Noviembre 4, 2024\"\nformat: \n  revealjs:\n    incremental: true   \n---\n\n\n\n## Construir Funciones:\n\n### Representaci√≥n de un üé≤\n\n-   ¬øC√≥mo lo hacemos?\n\n-   Ayuda LLM\n\n    -   Funciones disponibles\n\n    -   Sintaxis\n\n## Funci√≥n üé≤\n\n::: columns\n::: {.column width=\"50%\"}\n### ¬øQu√© hace la fn?\n\n\n\n::: {.cell}\n\n```{.webr .cell-code}\n#\n\n\n\n\n\n\n\n#\n```\n:::\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n###  ¬°Juguemos!\n\n\n\n::: {.cell}\n\n```{.webr .cell-code}\n#\n\n\n\n\n\n\n\n#\n```\n:::\n\n\n\n:::\n:::\n\n## Funci√≥n üé≤üé≤....üé≤\n\n### - ¬øEntrada? =\\> Argumentos\n\n\n\n::: {.cell}\n\n```{.webr .cell-code}\n##########################################################\n\n\n\n\n\n\n#\n```\n:::\n\n\n\n## Principios Nombres Funciones\n\n1.  **Descripci√≥n Clara** : El nombre debe claramente indicar qu√© hace la funci√≥n. Evita nombres gen√©ricos como **`funcion`** o **`proceso`**.\n\n2.  **Consistencia y Coherencia** : Mant√©n un estilo de nomenclatura consistente dentro del proyecto o grupo para facilitar la lectura y comprensi√≥n del c√≥digo.\n\n## Principios Nombres Funciones - cont.\n\n1.  **Usa Min√∫sculas y Guiones Bajos** : Comienza el nombre con una letra min√∫scula y utiliza guiones bajos (**`_`**) para separar palabras. Esto hace que los nombres sean m√°s f√°ciles de leer y evitar conflictos con palabras reservadas.\n\n2.  Resto de normas para nombrar objetos y variables\n\n## Construir Data Frame (DF)\n\ndatos [World Bank](https://data.worldbank.org/indicator/NY.GDP.MKTP.KD.ZG)\n\ncharacter/ nombres pa√≠ses\n\n\n\n::: {.cell}\n\n```{.webr .cell-code}\n##########################################################\n\n```\n:::\n\n\n\nnumeric/ PIB a√±o 2023\n\n\n\n::: {.cell}\n\n```{.webr .cell-code}\n##########################################################\n\n```\n:::\n\n\n\nlogical\n\n\n\n::: {.cell}\n\n```{.webr .cell-code}\n##########################################################\n\n```\n:::\n\n\n\n## Construir DF\n\nLista con vectores del mismo `length()`\n\n\n\n::: {.cell}\n\n```{.webr .cell-code}\n##########################################################\n\n\n\n\n\n#\n```\n:::\n\n\n\n## Acceso Elementos DF\n\n| vector | lista     | DF        |\n|--------|-----------|-----------|\n| \\[ \\]  | \\[ \\]     | \\[ \\]     |\n|        | \\[\\[ \\]\\] | \\[\\[ \\]\\] |\n|        | \\$        | \\$        |\n\n## Ejemplos Accesos- Vectores\n\n\n\n::: {.cell}\n\n```{.webr .cell-code}\nvector_demo <- seq(from= 5, to =35, by=3)\nvector_demo\n\n```\n:::\n\n::: {.cell}\n\n```{.webr .cell-code}\nvector_demo []\n```\n:::\n\n::: {.cell}\n\n```{.webr .cell-code}\nvector_demo [[]]\n```\n:::\n\n\n\n## Ejemplos Accesos- Lista\n\n\n\n::: {.cell}\n\n```{.webr .cell-code}\nmonth.name\nletters\n#lista_demo <- list(meses= month.name, letras= letters)\n#lista_demo\n\n```\n:::\n\n\n\n### M√©todos \\[ \\], \\$ y \\[\\[ \\]\\]\n\n\n\n::: {.cell}\n\n```{.webr .cell-code}\nlista_demo[1]\n#lista_demo$meses\n#lista_demo[[1]]\n```\n:::\n\n\n\n## Comparaci√≥n Elementos\n\n\n\n::: {.cell}\n\n```{.webr .cell-code}\nlista_demo$meses == lista_demo[[1]]\n\n```\n:::\n\n\n\n## Ejemplos Accesos- Lista/ \n\n\n\n::: {.cell}\n\n```{.webr .cell-code}\nlista_demo[[1]][3]\n#lista_demo$meses[3]\n```\n:::\n\n\n\n## Ejemplos Accesos- DF/ fila\n\n\\[i,j\\] mediante √≠ndices\n\ni=fila\n\nj=columna\n\n\n\n::: {.cell}\n\n```{.webr .cell-code}\n# acceso fila 2\nmtcars[2,]\n#mtcars['Datsun 710',]\n\n```\n:::\n\n\n\n## Ejemplos Accesos- DF/columna\n\n\\[i,j\\] mediante √≠ndices\n\ni=fila\n\nj=columna\n\n\n\n::: {.cell}\n\n```{.webr .cell-code}\n# acceso columna 3\nmtcars[,3]\n#mtcars[[3]]\n#mtcars$disp\n#mtcars['disp']\n```\n:::\n\n\n\n## Ejemplos Accesos- DF/ elemento\n\n\\[i,j\\] mediante √≠ndices\n\ni=fila\n\nj=columna\n\n\n\n::: {.cell}\n\n```{.webr .cell-code}\n# elemento determinado i=2, j=3\nmtcars[2,3]\n\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}